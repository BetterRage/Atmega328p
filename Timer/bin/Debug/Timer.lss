
bin\Debug\Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800100  00800100  0000055a  2**0
                  ALLOC
  2 .fuse         00000003  00820000  00820000  0000055a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .debug_aranges 00000020  00000000  00000000  0000055d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000b1  00000000  00000000  0000057d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002d5  00000000  00000000  0000062e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000015a  00000000  00000000  00000903  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000318  00000000  00000000  00000a5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b0  00000000  00000000  00000d78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000106  00000000  00000000  00000e28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <main>
  88:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init_usart>:
#ifndef UART_H_INCLUDED
#define UART_H_INCLUDED
#include <avr/io.h>

void init_usart(uint32_t baud)
{
  90:	0f 93       	push	r16
  92:	1f 93       	push	r17
  94:	df 93       	push	r29
  96:	cf 93       	push	r28
  98:	00 d0       	rcall	.+0      	; 0x9a <init_usart+0xa>
  9a:	00 d0       	rcall	.+0      	; 0x9c <init_usart+0xc>
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
  a0:	69 83       	std	Y+1, r22	; 0x01
  a2:	7a 83       	std	Y+2, r23	; 0x02
  a4:	8b 83       	std	Y+3, r24	; 0x03
  a6:	9c 83       	std	Y+4, r25	; 0x04
    UBRR0L = (16000000ul/(16ul*baud))-1;
  a8:	04 ec       	ldi	r16, 0xC4	; 196
  aa:	10 e0       	ldi	r17, 0x00	; 0
  ac:	89 81       	ldd	r24, Y+1	; 0x01
  ae:	9a 81       	ldd	r25, Y+2	; 0x02
  b0:	ab 81       	ldd	r26, Y+3	; 0x03
  b2:	bc 81       	ldd	r27, Y+4	; 0x04
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	aa 1f       	adc	r26, r26
  ba:	bb 1f       	adc	r27, r27
  bc:	88 0f       	add	r24, r24
  be:	99 1f       	adc	r25, r25
  c0:	aa 1f       	adc	r26, r26
  c2:	bb 1f       	adc	r27, r27
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	aa 1f       	adc	r26, r26
  ca:	bb 1f       	adc	r27, r27
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	aa 1f       	adc	r26, r26
  d2:	bb 1f       	adc	r27, r27
  d4:	9c 01       	movw	r18, r24
  d6:	ad 01       	movw	r20, r26
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	94 e2       	ldi	r25, 0x24	; 36
  dc:	a4 ef       	ldi	r26, 0xF4	; 244
  de:	b0 e0       	ldi	r27, 0x00	; 0
  e0:	bc 01       	movw	r22, r24
  e2:	cd 01       	movw	r24, r26
  e4:	0e 94 3f 02 	call	0x47e	; 0x47e <__udivmodsi4>
  e8:	da 01       	movw	r26, r20
  ea:	c9 01       	movw	r24, r18
  ec:	81 50       	subi	r24, 0x01	; 1
  ee:	f8 01       	movw	r30, r16
  f0:	80 83       	st	Z, r24
    UBRR0H = 0;
  f2:	e5 ec       	ldi	r30, 0xC5	; 197
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	10 82       	st	Z, r1
    UCSR0B |= (1<<TXEN0) | (1<<RXEN0)|(1<<RXCIE0);           // Sender und Empfänger aktivieren
  f8:	a1 ec       	ldi	r26, 0xC1	; 193
  fa:	b0 e0       	ldi	r27, 0x00	; 0
  fc:	e1 ec       	ldi	r30, 0xC1	; 193
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	88 69       	ori	r24, 0x98	; 152
 104:	8c 93       	st	X, r24
    UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);         // 8-Bit Übertragung
 106:	e2 ec       	ldi	r30, 0xC2	; 194
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	86 e0       	ldi	r24, 0x06	; 6
 10c:	80 83       	st	Z, r24
 // Asynchrone Übertragung (UMSEL00=0 und UMSEL01=0)
}
 10e:	0f 90       	pop	r0
 110:	0f 90       	pop	r0
 112:	0f 90       	pop	r0
 114:	0f 90       	pop	r0
 116:	cf 91       	pop	r28
 118:	df 91       	pop	r29
 11a:	1f 91       	pop	r17
 11c:	0f 91       	pop	r16
 11e:	08 95       	ret

00000120 <_putch>:
void _putch(char ch)
{
 120:	df 93       	push	r29
 122:	cf 93       	push	r28
 124:	0f 92       	push	r0
 126:	cd b7       	in	r28, 0x3d	; 61
 128:	de b7       	in	r29, 0x3e	; 62
 12a:	89 83       	std	Y+1, r24	; 0x01
    while(!(UCSR0A & (1<<UDRE0)));
 12c:	e0 ec       	ldi	r30, 0xC0	; 192
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	88 2f       	mov	r24, r24
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	80 72       	andi	r24, 0x20	; 32
 138:	90 70       	andi	r25, 0x00	; 0
 13a:	00 97       	sbiw	r24, 0x00	; 0
 13c:	b9 f3       	breq	.-18     	; 0x12c <_putch+0xc>
    UDR0 = ch;
 13e:	e6 ec       	ldi	r30, 0xC6	; 198
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	89 81       	ldd	r24, Y+1	; 0x01
 144:	80 83       	st	Z, r24
}
 146:	0f 90       	pop	r0
 148:	cf 91       	pop	r28
 14a:	df 91       	pop	r29
 14c:	08 95       	ret

0000014e <_puts>:
void _puts(char st[])
{
 14e:	df 93       	push	r29
 150:	cf 93       	push	r28
 152:	00 d0       	rcall	.+0      	; 0x154 <_puts+0x6>
 154:	0f 92       	push	r0
 156:	cd b7       	in	r28, 0x3d	; 61
 158:	de b7       	in	r29, 0x3e	; 62
 15a:	9b 83       	std	Y+3, r25	; 0x03
 15c:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t i=0;
 15e:	19 82       	std	Y+1, r1	; 0x01
 160:	0f c0       	rjmp	.+30     	; 0x180 <_puts+0x32>
    while(st[i])
        _putch(st[i++]);
 162:	89 81       	ldd	r24, Y+1	; 0x01
 164:	28 2f       	mov	r18, r24
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	8a 81       	ldd	r24, Y+2	; 0x02
 16a:	9b 81       	ldd	r25, Y+3	; 0x03
 16c:	fc 01       	movw	r30, r24
 16e:	e2 0f       	add	r30, r18
 170:	f3 1f       	adc	r31, r19
 172:	90 81       	ld	r25, Z
 174:	89 81       	ldd	r24, Y+1	; 0x01
 176:	8f 5f       	subi	r24, 0xFF	; 255
 178:	89 83       	std	Y+1, r24	; 0x01
 17a:	89 2f       	mov	r24, r25
 17c:	0e 94 90 00 	call	0x120	; 0x120 <_putch>
    UDR0 = ch;
}
void _puts(char st[])
{
    uint8_t i=0;
    while(st[i])
 180:	89 81       	ldd	r24, Y+1	; 0x01
 182:	28 2f       	mov	r18, r24
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	8a 81       	ldd	r24, Y+2	; 0x02
 188:	9b 81       	ldd	r25, Y+3	; 0x03
 18a:	fc 01       	movw	r30, r24
 18c:	e2 0f       	add	r30, r18
 18e:	f3 1f       	adc	r31, r19
 190:	80 81       	ld	r24, Z
 192:	88 23       	and	r24, r24
 194:	31 f7       	brne	.-52     	; 0x162 <_puts+0x14>
        _putch(st[i++]);
    _putch(32);
 196:	80 e2       	ldi	r24, 0x20	; 32
 198:	0e 94 90 00 	call	0x120	; 0x120 <_putch>
}
 19c:	0f 90       	pop	r0
 19e:	0f 90       	pop	r0
 1a0:	0f 90       	pop	r0
 1a2:	cf 91       	pop	r28
 1a4:	df 91       	pop	r29
 1a6:	08 95       	ret

000001a8 <_getch>:
char _getch(void)
{
 1a8:	df 93       	push	r29
 1aa:	cf 93       	push	r28
 1ac:	cd b7       	in	r28, 0x3d	; 61
 1ae:	de b7       	in	r29, 0x3e	; 62
    while(!(UCSR0A & (1<<RXC0)));
 1b0:	e0 ec       	ldi	r30, 0xC0	; 192
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	88 23       	and	r24, r24
 1b8:	dc f7       	brge	.-10     	; 0x1b0 <_getch+0x8>
    return UDR0;
 1ba:	e6 ec       	ldi	r30, 0xC6	; 198
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
}
 1c0:	cf 91       	pop	r28
 1c2:	df 91       	pop	r29
 1c4:	08 95       	ret

000001c6 <_gets>:

void _gets(char* st)
{
 1c6:	df 93       	push	r29
 1c8:	cf 93       	push	r28
 1ca:	00 d0       	rcall	.+0      	; 0x1cc <_gets+0x6>
 1cc:	0f 92       	push	r0
 1ce:	cd b7       	in	r28, 0x3d	; 61
 1d0:	de b7       	in	r29, 0x3e	; 62
 1d2:	9a 83       	std	Y+2, r25	; 0x02
 1d4:	89 83       	std	Y+1, r24	; 0x01
    do
    {
        *st=_getch();
 1d6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_getch>
 1da:	e9 81       	ldd	r30, Y+1	; 0x01
 1dc:	fa 81       	ldd	r31, Y+2	; 0x02
 1de:	80 83       	st	Z, r24
    } while (*st++!=10);  // die Funktion WriteLine von C# schickt einen String,
 1e0:	e9 81       	ldd	r30, Y+1	; 0x01
 1e2:	fa 81       	ldd	r31, Y+2	; 0x02
 1e4:	80 81       	ld	r24, Z
 1e6:	1b 82       	std	Y+3, r1	; 0x03
 1e8:	8a 30       	cpi	r24, 0x0A	; 10
 1ea:	11 f0       	breq	.+4      	; 0x1f0 <_gets+0x2a>
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	8b 83       	std	Y+3, r24	; 0x03
 1f0:	89 81       	ldd	r24, Y+1	; 0x01
 1f2:	9a 81       	ldd	r25, Y+2	; 0x02
 1f4:	01 96       	adiw	r24, 0x01	; 1
 1f6:	9a 83       	std	Y+2, r25	; 0x02
 1f8:	89 83       	std	Y+1, r24	; 0x01
 1fa:	8b 81       	ldd	r24, Y+3	; 0x03
 1fc:	88 23       	and	r24, r24
 1fe:	59 f7       	brne	.-42     	; 0x1d6 <_gets+0x10>
    *--st=0;			  // der mit New Line (\n, ASCII: 10) abschlossen ist.
 200:	89 81       	ldd	r24, Y+1	; 0x01
 202:	9a 81       	ldd	r25, Y+2	; 0x02
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	9a 83       	std	Y+2, r25	; 0x02
 208:	89 83       	std	Y+1, r24	; 0x01
 20a:	e9 81       	ldd	r30, Y+1	; 0x01
 20c:	fa 81       	ldd	r31, Y+2	; 0x02
 20e:	10 82       	st	Z, r1
}
 210:	0f 90       	pop	r0
 212:	0f 90       	pop	r0
 214:	0f 90       	pop	r0
 216:	cf 91       	pop	r28
 218:	df 91       	pop	r29
 21a:	08 95       	ret

0000021c <_newline>:
void _newline()
{
 21c:	df 93       	push	r29
 21e:	cf 93       	push	r28
 220:	cd b7       	in	r28, 0x3d	; 61
 222:	de b7       	in	r29, 0x3e	; 62
    _putch(13);   // CR
 224:	8d e0       	ldi	r24, 0x0D	; 13
 226:	0e 94 90 00 	call	0x120	; 0x120 <_putch>
    _putch(10);   // LF
 22a:	8a e0       	ldi	r24, 0x0A	; 10
 22c:	0e 94 90 00 	call	0x120	; 0x120 <_putch>
}
 230:	cf 91       	pop	r28
 232:	df 91       	pop	r29
 234:	08 95       	ret

00000236 <itoa8>:
void itoa8(uint16_t val,char *stringa)
{
 236:	df 93       	push	r29
 238:	cf 93       	push	r28
 23a:	00 d0       	rcall	.+0      	; 0x23c <itoa8+0x6>
 23c:	00 d0       	rcall	.+0      	; 0x23e <itoa8+0x8>
 23e:	cd b7       	in	r28, 0x3d	; 61
 240:	de b7       	in	r29, 0x3e	; 62
 242:	9a 83       	std	Y+2, r25	; 0x02
 244:	89 83       	std	Y+1, r24	; 0x01
 246:	7c 83       	std	Y+4, r23	; 0x04
 248:	6b 83       	std	Y+3, r22	; 0x03
    stringa[0]=(val%10000)/1000+48;
 24a:	89 81       	ldd	r24, Y+1	; 0x01
 24c:	9a 81       	ldd	r25, Y+2	; 0x02
 24e:	20 e1       	ldi	r18, 0x10	; 16
 250:	37 e2       	ldi	r19, 0x27	; 39
 252:	b9 01       	movw	r22, r18
 254:	0e 94 2b 02 	call	0x456	; 0x456 <__udivmodhi4>
 258:	28 ee       	ldi	r18, 0xE8	; 232
 25a:	33 e0       	ldi	r19, 0x03	; 3
 25c:	b9 01       	movw	r22, r18
 25e:	0e 94 2b 02 	call	0x456	; 0x456 <__udivmodhi4>
 262:	cb 01       	movw	r24, r22
 264:	80 5d       	subi	r24, 0xD0	; 208
 266:	eb 81       	ldd	r30, Y+3	; 0x03
 268:	fc 81       	ldd	r31, Y+4	; 0x04
 26a:	80 83       	st	Z, r24
    stringa[1]=(val%1000)/100+48;
 26c:	8b 81       	ldd	r24, Y+3	; 0x03
 26e:	9c 81       	ldd	r25, Y+4	; 0x04
 270:	fc 01       	movw	r30, r24
 272:	31 96       	adiw	r30, 0x01	; 1
 274:	89 81       	ldd	r24, Y+1	; 0x01
 276:	9a 81       	ldd	r25, Y+2	; 0x02
 278:	28 ee       	ldi	r18, 0xE8	; 232
 27a:	33 e0       	ldi	r19, 0x03	; 3
 27c:	b9 01       	movw	r22, r18
 27e:	0e 94 2b 02 	call	0x456	; 0x456 <__udivmodhi4>
 282:	24 e6       	ldi	r18, 0x64	; 100
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	b9 01       	movw	r22, r18
 288:	0e 94 2b 02 	call	0x456	; 0x456 <__udivmodhi4>
 28c:	cb 01       	movw	r24, r22
 28e:	80 5d       	subi	r24, 0xD0	; 208
 290:	80 83       	st	Z, r24
    stringa[2]=(val%100)/10+48;
 292:	8b 81       	ldd	r24, Y+3	; 0x03
 294:	9c 81       	ldd	r25, Y+4	; 0x04
 296:	fc 01       	movw	r30, r24
 298:	32 96       	adiw	r30, 0x02	; 2
 29a:	89 81       	ldd	r24, Y+1	; 0x01
 29c:	9a 81       	ldd	r25, Y+2	; 0x02
 29e:	24 e6       	ldi	r18, 0x64	; 100
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	b9 01       	movw	r22, r18
 2a4:	0e 94 2b 02 	call	0x456	; 0x456 <__udivmodhi4>
 2a8:	2a e0       	ldi	r18, 0x0A	; 10
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	b9 01       	movw	r22, r18
 2ae:	0e 94 2b 02 	call	0x456	; 0x456 <__udivmodhi4>
 2b2:	cb 01       	movw	r24, r22
 2b4:	80 5d       	subi	r24, 0xD0	; 208
 2b6:	80 83       	st	Z, r24
    stringa[3]=(val%10)+48;
 2b8:	8b 81       	ldd	r24, Y+3	; 0x03
 2ba:	9c 81       	ldd	r25, Y+4	; 0x04
 2bc:	fc 01       	movw	r30, r24
 2be:	33 96       	adiw	r30, 0x03	; 3
 2c0:	89 81       	ldd	r24, Y+1	; 0x01
 2c2:	9a 81       	ldd	r25, Y+2	; 0x02
 2c4:	2a e0       	ldi	r18, 0x0A	; 10
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	b9 01       	movw	r22, r18
 2ca:	0e 94 2b 02 	call	0x456	; 0x456 <__udivmodhi4>
 2ce:	80 5d       	subi	r24, 0xD0	; 208
 2d0:	80 83       	st	Z, r24
    stringa[4]=0;
 2d2:	8b 81       	ldd	r24, Y+3	; 0x03
 2d4:	9c 81       	ldd	r25, Y+4	; 0x04
 2d6:	fc 01       	movw	r30, r24
 2d8:	34 96       	adiw	r30, 0x04	; 4
 2da:	10 82       	st	Z, r1
}
 2dc:	0f 90       	pop	r0
 2de:	0f 90       	pop	r0
 2e0:	0f 90       	pop	r0
 2e2:	0f 90       	pop	r0
 2e4:	cf 91       	pop	r28
 2e6:	df 91       	pop	r29
 2e8:	08 95       	ret

000002ea <stringequals>:
uint8_t stringequals(char st1[],char st2[])
{
 2ea:	df 93       	push	r29
 2ec:	cf 93       	push	r28
 2ee:	cd b7       	in	r28, 0x3d	; 61
 2f0:	de b7       	in	r29, 0x3e	; 62
 2f2:	28 97       	sbiw	r28, 0x08	; 8
 2f4:	0f b6       	in	r0, 0x3f	; 63
 2f6:	f8 94       	cli
 2f8:	de bf       	out	0x3e, r29	; 62
 2fa:	0f be       	out	0x3f, r0	; 63
 2fc:	cd bf       	out	0x3d, r28	; 61
 2fe:	9c 83       	std	Y+4, r25	; 0x04
 300:	8b 83       	std	Y+3, r24	; 0x03
 302:	7e 83       	std	Y+6, r23	; 0x06
 304:	6d 83       	std	Y+5, r22	; 0x05
    int i=0;
 306:	1a 82       	std	Y+2, r1	; 0x02
 308:	19 82       	std	Y+1, r1	; 0x01
 30a:	14 c0       	rjmp	.+40     	; 0x334 <stringequals+0x4a>
    while(st1[i++])
    {
        if(st1[i]!=st2[i])
 30c:	29 81       	ldd	r18, Y+1	; 0x01
 30e:	3a 81       	ldd	r19, Y+2	; 0x02
 310:	8b 81       	ldd	r24, Y+3	; 0x03
 312:	9c 81       	ldd	r25, Y+4	; 0x04
 314:	fc 01       	movw	r30, r24
 316:	e2 0f       	add	r30, r18
 318:	f3 1f       	adc	r31, r19
 31a:	40 81       	ld	r20, Z
 31c:	29 81       	ldd	r18, Y+1	; 0x01
 31e:	3a 81       	ldd	r19, Y+2	; 0x02
 320:	8d 81       	ldd	r24, Y+5	; 0x05
 322:	9e 81       	ldd	r25, Y+6	; 0x06
 324:	fc 01       	movw	r30, r24
 326:	e2 0f       	add	r30, r18
 328:	f3 1f       	adc	r31, r19
 32a:	80 81       	ld	r24, Z
 32c:	48 17       	cp	r20, r24
 32e:	11 f0       	breq	.+4      	; 0x334 <stringequals+0x4a>
            return 0;
 330:	1f 82       	std	Y+7, r1	; 0x07
 332:	19 c0       	rjmp	.+50     	; 0x366 <stringequals+0x7c>
    stringa[4]=0;
}
uint8_t stringequals(char st1[],char st2[])
{
    int i=0;
    while(st1[i++])
 334:	29 81       	ldd	r18, Y+1	; 0x01
 336:	3a 81       	ldd	r19, Y+2	; 0x02
 338:	8b 81       	ldd	r24, Y+3	; 0x03
 33a:	9c 81       	ldd	r25, Y+4	; 0x04
 33c:	fc 01       	movw	r30, r24
 33e:	e2 0f       	add	r30, r18
 340:	f3 1f       	adc	r31, r19
 342:	80 81       	ld	r24, Z
 344:	88 87       	std	Y+8, r24	; 0x08
 346:	88 85       	ldd	r24, Y+8	; 0x08
 348:	88 23       	and	r24, r24
 34a:	11 f0       	breq	.+4      	; 0x350 <stringequals+0x66>
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	88 87       	std	Y+8, r24	; 0x08
 350:	88 85       	ldd	r24, Y+8	; 0x08
 352:	29 81       	ldd	r18, Y+1	; 0x01
 354:	3a 81       	ldd	r19, Y+2	; 0x02
 356:	2f 5f       	subi	r18, 0xFF	; 255
 358:	3f 4f       	sbci	r19, 0xFF	; 255
 35a:	3a 83       	std	Y+2, r19	; 0x02
 35c:	29 83       	std	Y+1, r18	; 0x01
 35e:	88 23       	and	r24, r24
 360:	a9 f6       	brne	.-86     	; 0x30c <stringequals+0x22>
    {
        if(st1[i]!=st2[i])
            return 0;
    }
    return 1;
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	8f 83       	std	Y+7, r24	; 0x07
 366:	8f 81       	ldd	r24, Y+7	; 0x07
}
 368:	28 96       	adiw	r28, 0x08	; 8
 36a:	0f b6       	in	r0, 0x3f	; 63
 36c:	f8 94       	cli
 36e:	de bf       	out	0x3e, r29	; 62
 370:	0f be       	out	0x3f, r0	; 63
 372:	cd bf       	out	0x3d, r28	; 61
 374:	cf 91       	pop	r28
 376:	df 91       	pop	r29
 378:	08 95       	ret

0000037a <__vector_14>:
#include <avr/interrupt.h>
#include "../Headerfunktionen/UART.h"
uint8_t cnt=0;
ISR(TIMER0_COMPA_vect)
{
 37a:	1f 92       	push	r1
 37c:	0f 92       	push	r0
 37e:	0f b6       	in	r0, 0x3f	; 63
 380:	0f 92       	push	r0
 382:	11 24       	eor	r1, r1
 384:	8f 93       	push	r24
 386:	af 93       	push	r26
 388:	bf 93       	push	r27
 38a:	ef 93       	push	r30
 38c:	ff 93       	push	r31
 38e:	df 93       	push	r29
 390:	cf 93       	push	r28
 392:	0f 92       	push	r0
 394:	cd b7       	in	r28, 0x3d	; 61
 396:	de b7       	in	r29, 0x3e	; 62
    uint8_t sreg=SREG;
 398:	ef e5       	ldi	r30, 0x5F	; 95
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	80 81       	ld	r24, Z
 39e:	89 83       	std	Y+1, r24	; 0x01
    SREG&=~(1<<7);
 3a0:	af e5       	ldi	r26, 0x5F	; 95
 3a2:	b0 e0       	ldi	r27, 0x00	; 0
 3a4:	ef e5       	ldi	r30, 0x5F	; 95
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	80 81       	ld	r24, Z
 3aa:	8f 77       	andi	r24, 0x7F	; 127
 3ac:	8c 93       	st	X, r24
    TCNT0=0;
 3ae:	e6 e4       	ldi	r30, 0x46	; 70
 3b0:	f0 e0       	ldi	r31, 0x00	; 0
 3b2:	10 82       	st	Z, r1
    cnt++;
 3b4:	80 91 00 01 	lds	r24, 0x0100
 3b8:	8f 5f       	subi	r24, 0xFF	; 255
 3ba:	80 93 00 01 	sts	0x0100, r24
    SREG=sreg;
 3be:	ef e5       	ldi	r30, 0x5F	; 95
 3c0:	f0 e0       	ldi	r31, 0x00	; 0
 3c2:	89 81       	ldd	r24, Y+1	; 0x01
 3c4:	80 83       	st	Z, r24
}
 3c6:	0f 90       	pop	r0
 3c8:	cf 91       	pop	r28
 3ca:	df 91       	pop	r29
 3cc:	ff 91       	pop	r31
 3ce:	ef 91       	pop	r30
 3d0:	bf 91       	pop	r27
 3d2:	af 91       	pop	r26
 3d4:	8f 91       	pop	r24
 3d6:	0f 90       	pop	r0
 3d8:	0f be       	out	0x3f, r0	; 63
 3da:	0f 90       	pop	r0
 3dc:	1f 90       	pop	r1
 3de:	18 95       	reti

000003e0 <main>:

int main(void)
{
 3e0:	df 93       	push	r29
 3e2:	cf 93       	push	r28
 3e4:	cd b7       	in	r28, 0x3d	; 61
 3e6:	de b7       	in	r29, 0x3e	; 62
    SREG|=(1<<7);
 3e8:	af e5       	ldi	r26, 0x5F	; 95
 3ea:	b0 e0       	ldi	r27, 0x00	; 0
 3ec:	ef e5       	ldi	r30, 0x5F	; 95
 3ee:	f0 e0       	ldi	r31, 0x00	; 0
 3f0:	80 81       	ld	r24, Z
 3f2:	80 68       	ori	r24, 0x80	; 128
 3f4:	8c 93       	st	X, r24
    OCR0A=71;
 3f6:	e7 e4       	ldi	r30, 0x47	; 71
 3f8:	f0 e0       	ldi	r31, 0x00	; 0
 3fa:	87 e4       	ldi	r24, 0x47	; 71
 3fc:	80 83       	st	Z, r24
    TIMSK0|=(1<<OCIE0A);
 3fe:	ae e6       	ldi	r26, 0x6E	; 110
 400:	b0 e0       	ldi	r27, 0x00	; 0
 402:	ee e6       	ldi	r30, 0x6E	; 110
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	80 81       	ld	r24, Z
 408:	82 60       	ori	r24, 0x02	; 2
 40a:	8c 93       	st	X, r24
    TCCR0B|=0x05;
 40c:	a5 e4       	ldi	r26, 0x45	; 69
 40e:	b0 e0       	ldi	r27, 0x00	; 0
 410:	e5 e4       	ldi	r30, 0x45	; 69
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	80 81       	ld	r24, Z
 416:	85 60       	ori	r24, 0x05	; 5
 418:	8c 93       	st	X, r24
    DDRD=0b00000100;
 41a:	ea e2       	ldi	r30, 0x2A	; 42
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	84 e0       	ldi	r24, 0x04	; 4
 420:	80 83       	st	Z, r24
    init_usart(9600);
 422:	60 e8       	ldi	r22, 0x80	; 128
 424:	75 e2       	ldi	r23, 0x25	; 37
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	0e 94 48 00 	call	0x90	; 0x90 <init_usart>
    while(1)
    {
        if(cnt>=11)
 42e:	80 91 00 01 	lds	r24, 0x0100
 432:	8b 30       	cpi	r24, 0x0B	; 11
 434:	e0 f3       	brcs	.-8      	; 0x42e <main+0x4e>
        {
            cnt=0;
 436:	10 92 00 01 	sts	0x0100, r1
            PORTD^=1<<PD2;
 43a:	ab e2       	ldi	r26, 0x2B	; 43
 43c:	b0 e0       	ldi	r27, 0x00	; 0
 43e:	eb e2       	ldi	r30, 0x2B	; 43
 440:	f0 e0       	ldi	r31, 0x00	; 0
 442:	90 81       	ld	r25, Z
 444:	84 e0       	ldi	r24, 0x04	; 4
 446:	89 27       	eor	r24, r25
 448:	8c 93       	st	X, r24
            _putch('1');
 44a:	81 e3       	ldi	r24, 0x31	; 49
 44c:	0e 94 90 00 	call	0x120	; 0x120 <_putch>
            _newline();
 450:	0e 94 0e 01 	call	0x21c	; 0x21c <_newline>
 454:	ec cf       	rjmp	.-40     	; 0x42e <main+0x4e>

00000456 <__udivmodhi4>:
 456:	aa 1b       	sub	r26, r26
 458:	bb 1b       	sub	r27, r27
 45a:	51 e1       	ldi	r21, 0x11	; 17
 45c:	07 c0       	rjmp	.+14     	; 0x46c <__udivmodhi4_ep>

0000045e <__udivmodhi4_loop>:
 45e:	aa 1f       	adc	r26, r26
 460:	bb 1f       	adc	r27, r27
 462:	a6 17       	cp	r26, r22
 464:	b7 07       	cpc	r27, r23
 466:	10 f0       	brcs	.+4      	; 0x46c <__udivmodhi4_ep>
 468:	a6 1b       	sub	r26, r22
 46a:	b7 0b       	sbc	r27, r23

0000046c <__udivmodhi4_ep>:
 46c:	88 1f       	adc	r24, r24
 46e:	99 1f       	adc	r25, r25
 470:	5a 95       	dec	r21
 472:	a9 f7       	brne	.-22     	; 0x45e <__udivmodhi4_loop>
 474:	80 95       	com	r24
 476:	90 95       	com	r25
 478:	bc 01       	movw	r22, r24
 47a:	cd 01       	movw	r24, r26
 47c:	08 95       	ret

0000047e <__udivmodsi4>:
 47e:	a1 e2       	ldi	r26, 0x21	; 33
 480:	1a 2e       	mov	r1, r26
 482:	aa 1b       	sub	r26, r26
 484:	bb 1b       	sub	r27, r27
 486:	fd 01       	movw	r30, r26
 488:	0d c0       	rjmp	.+26     	; 0x4a4 <__udivmodsi4_ep>

0000048a <__udivmodsi4_loop>:
 48a:	aa 1f       	adc	r26, r26
 48c:	bb 1f       	adc	r27, r27
 48e:	ee 1f       	adc	r30, r30
 490:	ff 1f       	adc	r31, r31
 492:	a2 17       	cp	r26, r18
 494:	b3 07       	cpc	r27, r19
 496:	e4 07       	cpc	r30, r20
 498:	f5 07       	cpc	r31, r21
 49a:	20 f0       	brcs	.+8      	; 0x4a4 <__udivmodsi4_ep>
 49c:	a2 1b       	sub	r26, r18
 49e:	b3 0b       	sbc	r27, r19
 4a0:	e4 0b       	sbc	r30, r20
 4a2:	f5 0b       	sbc	r31, r21

000004a4 <__udivmodsi4_ep>:
 4a4:	66 1f       	adc	r22, r22
 4a6:	77 1f       	adc	r23, r23
 4a8:	88 1f       	adc	r24, r24
 4aa:	99 1f       	adc	r25, r25
 4ac:	1a 94       	dec	r1
 4ae:	69 f7       	brne	.-38     	; 0x48a <__udivmodsi4_loop>
 4b0:	60 95       	com	r22
 4b2:	70 95       	com	r23
 4b4:	80 95       	com	r24
 4b6:	90 95       	com	r25
 4b8:	9b 01       	movw	r18, r22
 4ba:	ac 01       	movw	r20, r24
 4bc:	bd 01       	movw	r22, r26
 4be:	cf 01       	movw	r24, r30
 4c0:	08 95       	ret

000004c2 <_exit>:
 4c2:	f8 94       	cli

000004c4 <__stop_program>:
 4c4:	ff cf       	rjmp	.-2      	; 0x4c4 <__stop_program>
