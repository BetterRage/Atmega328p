
bin\Debug\LCDTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000bb4  00000c68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bb4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800104  00800104  00000c6c  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00000c6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000020  00000000  00000000  00000c6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001fb  00000000  00000000  00000c8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000049a  00000000  00000000  00000e8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000015b  00000000  00000000  00001324  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000520  00000000  00000000  0000147f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  000019a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000276  00000000  00000000  00001b40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 eb       	ldi	r30, 0xB4	; 180
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 31       	cpi	r26, 0x16	; 22
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <main>
  9e:	0c 94 d8 05 	jmp	0xbb0	; 0xbb0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <delay>:
#ifndef MYDELAY_H_INCLUDED
#define MYDELAY_H_INCLUDED
#include <avr/io.h>

void delay(uint32_t ms)
{
  a6:	df 93       	push	r29
  a8:	cf 93       	push	r28
  aa:	00 d0       	rcall	.+0      	; 0xac <delay+0x6>
  ac:	00 d0       	rcall	.+0      	; 0xae <delay+0x8>
  ae:	0f 92       	push	r0
  b0:	cd b7       	in	r28, 0x3d	; 61
  b2:	de b7       	in	r29, 0x3e	; 62
  b4:	69 83       	std	Y+1, r22	; 0x01
  b6:	7a 83       	std	Y+2, r23	; 0x02
  b8:	8b 83       	std	Y+3, r24	; 0x03
  ba:	9c 83       	std	Y+4, r25	; 0x04
    ms*=371;
  bc:	89 81       	ldd	r24, Y+1	; 0x01
  be:	9a 81       	ldd	r25, Y+2	; 0x02
  c0:	ab 81       	ldd	r26, Y+3	; 0x03
  c2:	bc 81       	ldd	r27, Y+4	; 0x04
  c4:	23 e7       	ldi	r18, 0x73	; 115
  c6:	31 e0       	ldi	r19, 0x01	; 1
  c8:	40 e0       	ldi	r20, 0x00	; 0
  ca:	50 e0       	ldi	r21, 0x00	; 0
  cc:	bc 01       	movw	r22, r24
  ce:	cd 01       	movw	r24, r26
  d0:	0e 94 db 02 	call	0x5b6	; 0x5b6 <__mulsi3>
  d4:	dc 01       	movw	r26, r24
  d6:	cb 01       	movw	r24, r22
  d8:	89 83       	std	Y+1, r24	; 0x01
  da:	9a 83       	std	Y+2, r25	; 0x02
  dc:	ab 83       	std	Y+3, r26	; 0x03
  de:	bc 83       	std	Y+4, r27	; 0x04
    while(ms--);
  e0:	1d 82       	std	Y+5, r1	; 0x05
  e2:	89 81       	ldd	r24, Y+1	; 0x01
  e4:	9a 81       	ldd	r25, Y+2	; 0x02
  e6:	ab 81       	ldd	r26, Y+3	; 0x03
  e8:	bc 81       	ldd	r27, Y+4	; 0x04
  ea:	00 97       	sbiw	r24, 0x00	; 0
  ec:	a1 05       	cpc	r26, r1
  ee:	b1 05       	cpc	r27, r1
  f0:	11 f0       	breq	.+4      	; 0xf6 <delay+0x50>
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	8d 83       	std	Y+5, r24	; 0x05
  f6:	89 81       	ldd	r24, Y+1	; 0x01
  f8:	9a 81       	ldd	r25, Y+2	; 0x02
  fa:	ab 81       	ldd	r26, Y+3	; 0x03
  fc:	bc 81       	ldd	r27, Y+4	; 0x04
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	a1 09       	sbc	r26, r1
 102:	b1 09       	sbc	r27, r1
 104:	89 83       	std	Y+1, r24	; 0x01
 106:	9a 83       	std	Y+2, r25	; 0x02
 108:	ab 83       	std	Y+3, r26	; 0x03
 10a:	bc 83       	std	Y+4, r27	; 0x04
 10c:	8d 81       	ldd	r24, Y+5	; 0x05
 10e:	88 23       	and	r24, r24
 110:	39 f7       	brne	.-50     	; 0xe0 <delay+0x3a>
}
 112:	0f 90       	pop	r0
 114:	0f 90       	pop	r0
 116:	0f 90       	pop	r0
 118:	0f 90       	pop	r0
 11a:	0f 90       	pop	r0
 11c:	cf 91       	pop	r28
 11e:	df 91       	pop	r29
 120:	08 95       	ret

00000122 <lcd_command>:

static uint8_t lcd_displayparams;
static char lcd_buffer[LCD_COL_COUNT + 1];

void lcd_command(uint8_t command)
{
 122:	df 93       	push	r29
 124:	cf 93       	push	r28
 126:	0f 92       	push	r0
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 12c:	89 83       	std	Y+1, r24	; 0x01
    lcd_send(command, 0);
 12e:	89 81       	ldd	r24, Y+1	; 0x01
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	0e 94 ad 00 	call	0x15a	; 0x15a <lcd_send>
}
 136:	0f 90       	pop	r0
 138:	cf 91       	pop	r28
 13a:	df 91       	pop	r29
 13c:	08 95       	ret

0000013e <lcd_write>:

void lcd_write(uint8_t value)
{
 13e:	df 93       	push	r29
 140:	cf 93       	push	r28
 142:	0f 92       	push	r0
 144:	cd b7       	in	r28, 0x3d	; 61
 146:	de b7       	in	r29, 0x3e	; 62
 148:	89 83       	std	Y+1, r24	; 0x01
    lcd_send(value, 1);
 14a:	89 81       	ldd	r24, Y+1	; 0x01
 14c:	61 e0       	ldi	r22, 0x01	; 1
 14e:	0e 94 ad 00 	call	0x15a	; 0x15a <lcd_send>
}
 152:	0f 90       	pop	r0
 154:	cf 91       	pop	r28
 156:	df 91       	pop	r29
 158:	08 95       	ret

0000015a <lcd_send>:

void lcd_send(uint8_t value, uint8_t mode)
{
 15a:	df 93       	push	r29
 15c:	cf 93       	push	r28
 15e:	00 d0       	rcall	.+0      	; 0x160 <lcd_send+0x6>
 160:	cd b7       	in	r28, 0x3d	; 61
 162:	de b7       	in	r29, 0x3e	; 62
 164:	89 83       	std	Y+1, r24	; 0x01
 166:	6a 83       	std	Y+2, r22	; 0x02
    if (mode)
 168:	8a 81       	ldd	r24, Y+2	; 0x02
 16a:	88 23       	and	r24, r24
 16c:	41 f0       	breq	.+16     	; 0x17e <lcd_send+0x24>
    {
        LCD_PORT = LCD_PORT | (1 << LCD_RS);
 16e:	ab e2       	ldi	r26, 0x2B	; 43
 170:	b0 e0       	ldi	r27, 0x00	; 0
 172:	eb e2       	ldi	r30, 0x2B	; 43
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	80 64       	ori	r24, 0x40	; 64
 17a:	8c 93       	st	X, r24
 17c:	07 c0       	rjmp	.+14     	; 0x18c <lcd_send+0x32>
    }
    else
    {
        LCD_PORT = LCD_PORT & ~(1 << LCD_RS);
 17e:	ab e2       	ldi	r26, 0x2B	; 43
 180:	b0 e0       	ldi	r27, 0x00	; 0
 182:	eb e2       	ldi	r30, 0x2B	; 43
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	8f 7b       	andi	r24, 0xBF	; 191
 18a:	8c 93       	st	X, r24
    }

    LCD_PORT = LCD_PORT & ~(1 << LCD_RW);
 18c:	ab e2       	ldi	r26, 0x2B	; 43
 18e:	b0 e0       	ldi	r27, 0x00	; 0
 190:	eb e2       	ldi	r30, 0x2B	; 43
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	8e 7f       	andi	r24, 0xFE	; 254
 198:	8c 93       	st	X, r24

    lcd_write_nibble(value >> 4);
 19a:	89 81       	ldd	r24, Y+1	; 0x01
 19c:	82 95       	swap	r24
 19e:	8f 70       	andi	r24, 0x0F	; 15
 1a0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_write_nibble>
    lcd_write_nibble(value);
 1a4:	89 81       	ldd	r24, Y+1	; 0x01
 1a6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_write_nibble>
}
 1aa:	0f 90       	pop	r0
 1ac:	0f 90       	pop	r0
 1ae:	cf 91       	pop	r28
 1b0:	df 91       	pop	r29
 1b2:	08 95       	ret

000001b4 <lcd_write_nibble>:

void lcd_write_nibble(uint8_t nibble)
{
 1b4:	df 93       	push	r29
 1b6:	cf 93       	push	r28
 1b8:	0f 92       	push	r0
 1ba:	cd b7       	in	r28, 0x3d	; 61
 1bc:	de b7       	in	r29, 0x3e	; 62
 1be:	89 83       	std	Y+1, r24	; 0x01
    LCD_PORT = (LCD_PORT & 0xff & ~(0x0f << LCD_D0)) | ((nibble & 0x0f) << LCD_D0);
 1c0:	ab e2       	ldi	r26, 0x2B	; 43
 1c2:	b0 e0       	ldi	r27, 0x00	; 0
 1c4:	eb e2       	ldi	r30, 0x2B	; 43
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	28 2f       	mov	r18, r24
 1cc:	23 7c       	andi	r18, 0xC3	; 195
 1ce:	89 81       	ldd	r24, Y+1	; 0x01
 1d0:	88 2f       	mov	r24, r24
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	8f 70       	andi	r24, 0x0F	; 15
 1d6:	90 70       	andi	r25, 0x00	; 0
 1d8:	88 0f       	add	r24, r24
 1da:	99 1f       	adc	r25, r25
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	82 2b       	or	r24, r18
 1e2:	8c 93       	st	X, r24

    LCD_PORT = LCD_PORT & ~(1 << LCD_EN);
 1e4:	ab e2       	ldi	r26, 0x2B	; 43
 1e6:	b0 e0       	ldi	r27, 0x00	; 0
 1e8:	eb e2       	ldi	r30, 0x2B	; 43
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	8f 77       	andi	r24, 0x7F	; 127
 1f0:	8c 93       	st	X, r24
    LCD_PORT = LCD_PORT | (1 << LCD_EN);
 1f2:	ab e2       	ldi	r26, 0x2B	; 43
 1f4:	b0 e0       	ldi	r27, 0x00	; 0
 1f6:	eb e2       	ldi	r30, 0x2B	; 43
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	80 68       	ori	r24, 0x80	; 128
 1fe:	8c 93       	st	X, r24
    LCD_PORT = LCD_PORT & ~(1 << LCD_EN);
 200:	ab e2       	ldi	r26, 0x2B	; 43
 202:	b0 e0       	ldi	r27, 0x00	; 0
 204:	eb e2       	ldi	r30, 0x2B	; 43
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	80 81       	ld	r24, Z
 20a:	8f 77       	andi	r24, 0x7F	; 127
 20c:	8c 93       	st	X, r24
    delay(1);																// If delay less than this value, the data is not correctly displayed
 20e:	61 e0       	ldi	r22, 0x01	; 1
 210:	70 e0       	ldi	r23, 0x00	; 0
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 53 00 	call	0xa6	; 0xa6 <delay>
}
 21a:	0f 90       	pop	r0
 21c:	cf 91       	pop	r28
 21e:	df 91       	pop	r29
 220:	08 95       	ret

00000222 <lcd_init>:

void lcd_init(void)
{
 222:	df 93       	push	r29
 224:	cf 93       	push	r28
 226:	cd b7       	in	r28, 0x3d	; 61
 228:	de b7       	in	r29, 0x3e	; 62
    // Configure pins as output
    LCD_DDR = LCD_DDR
 22a:	aa e2       	ldi	r26, 0x2A	; 42
 22c:	b0 e0       	ldi	r27, 0x00	; 0
 22e:	ea e2       	ldi	r30, 0x2A	; 42
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	8d 6f       	ori	r24, 0xFD	; 253
 236:	8c 93       	st	X, r24
              | (1 << LCD_D1)
              | (1 << LCD_D2)
              | (1 << LCD_D3);

    // Wait for LCD to become ready (docs say 15ms+)
    delay(15);
 238:	6f e0       	ldi	r22, 0x0F	; 15
 23a:	70 e0       	ldi	r23, 0x00	; 0
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0e 94 53 00 	call	0xa6	; 0xa6 <delay>

    LCD_PORT = LCD_PORT
 244:	ab e2       	ldi	r26, 0x2B	; 43
 246:	b0 e0       	ldi	r27, 0x00	; 0
 248:	eb e2       	ldi	r30, 0x2B	; 43
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	8e 73       	andi	r24, 0x3E	; 62
 250:	8c 93       	st	X, r24
               & ~(1 << LCD_EN)
               & ~(1 << LCD_RS)
               & ~(1 << LCD_RW);

    delay(4);
 252:	64 e0       	ldi	r22, 0x04	; 4
 254:	70 e0       	ldi	r23, 0x00	; 0
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 53 00 	call	0xa6	; 0xa6 <delay>

    lcd_write_nibble(0x03); // Switch to 4 bit mode
 25e:	83 e0       	ldi	r24, 0x03	; 3
 260:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_write_nibble>
    delay(4);
 264:	64 e0       	ldi	r22, 0x04	; 4
 266:	70 e0       	ldi	r23, 0x00	; 0
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 53 00 	call	0xa6	; 0xa6 <delay>

    lcd_write_nibble(0x03); // 2nd time
 270:	83 e0       	ldi	r24, 0x03	; 3
 272:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_write_nibble>
    delay(4);
 276:	64 e0       	ldi	r22, 0x04	; 4
 278:	70 e0       	ldi	r23, 0x00	; 0
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 53 00 	call	0xa6	; 0xa6 <delay>

    lcd_write_nibble(0x03); // 3rd time
 282:	83 e0       	ldi	r24, 0x03	; 3
 284:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_write_nibble>
    delay(4);
 288:	64 e0       	ldi	r22, 0x04	; 4
 28a:	70 e0       	ldi	r23, 0x00	; 0
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 53 00 	call	0xa6	; 0xa6 <delay>

    lcd_write_nibble(0x02); // Set 8-bit mode (?)
 294:	82 e0       	ldi	r24, 0x02	; 2
 296:	0e 94 da 00 	call	0x1b4	; 0x1b4 <lcd_write_nibble>

    lcd_command(LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 29a:	88 e2       	ldi	r24, 0x28	; 40
 29c:	0e 94 91 00 	call	0x122	; 0x122 <lcd_command>

    lcd_displayparams = LCD_CURSORON | LCD_BLINKON;
 2a0:	83 e0       	ldi	r24, 0x03	; 3
 2a2:	80 93 04 01 	sts	0x0104, r24
    lcd_command(LCD_DISPLAYCONTROL | lcd_displayparams);
 2a6:	80 91 04 01 	lds	r24, 0x0104
 2aa:	88 60       	ori	r24, 0x08	; 8
 2ac:	0e 94 91 00 	call	0x122	; 0x122 <lcd_command>
}
 2b0:	cf 91       	pop	r28
 2b2:	df 91       	pop	r29
 2b4:	08 95       	ret

000002b6 <lcd_on>:

void lcd_on(void)
{
 2b6:	df 93       	push	r29
 2b8:	cf 93       	push	r28
 2ba:	cd b7       	in	r28, 0x3d	; 61
 2bc:	de b7       	in	r29, 0x3e	; 62
    lcd_displayparams |= LCD_DISPLAYON;
 2be:	80 91 04 01 	lds	r24, 0x0104
 2c2:	84 60       	ori	r24, 0x04	; 4
 2c4:	80 93 04 01 	sts	0x0104, r24
    lcd_command(LCD_DISPLAYCONTROL | lcd_displayparams);
 2c8:	80 91 04 01 	lds	r24, 0x0104
 2cc:	88 60       	ori	r24, 0x08	; 8
 2ce:	0e 94 91 00 	call	0x122	; 0x122 <lcd_command>
}
 2d2:	cf 91       	pop	r28
 2d4:	df 91       	pop	r29
 2d6:	08 95       	ret

000002d8 <lcd_off>:

void lcd_off(void)
{
 2d8:	df 93       	push	r29
 2da:	cf 93       	push	r28
 2dc:	cd b7       	in	r28, 0x3d	; 61
 2de:	de b7       	in	r29, 0x3e	; 62
    lcd_displayparams &= ~LCD_DISPLAYON;
 2e0:	80 91 04 01 	lds	r24, 0x0104
 2e4:	8b 7f       	andi	r24, 0xFB	; 251
 2e6:	80 93 04 01 	sts	0x0104, r24
    lcd_command(LCD_DISPLAYCONTROL | lcd_displayparams);
 2ea:	80 91 04 01 	lds	r24, 0x0104
 2ee:	88 60       	ori	r24, 0x08	; 8
 2f0:	0e 94 91 00 	call	0x122	; 0x122 <lcd_command>
}
 2f4:	cf 91       	pop	r28
 2f6:	df 91       	pop	r29
 2f8:	08 95       	ret

000002fa <lcd_clear>:

void lcd_clear(void)
{
 2fa:	df 93       	push	r29
 2fc:	cf 93       	push	r28
 2fe:	cd b7       	in	r28, 0x3d	; 61
 300:	de b7       	in	r29, 0x3e	; 62
    lcd_command(LCD_CLEARDISPLAY);
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	0e 94 91 00 	call	0x122	; 0x122 <lcd_command>
    delay(2);
 308:	62 e0       	ldi	r22, 0x02	; 2
 30a:	70 e0       	ldi	r23, 0x00	; 0
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	0e 94 53 00 	call	0xa6	; 0xa6 <delay>
}
 314:	cf 91       	pop	r28
 316:	df 91       	pop	r29
 318:	08 95       	ret

0000031a <lcd_return_home>:

void lcd_return_home(void)
{
 31a:	df 93       	push	r29
 31c:	cf 93       	push	r28
 31e:	cd b7       	in	r28, 0x3d	; 61
 320:	de b7       	in	r29, 0x3e	; 62
    lcd_command(LCD_RETURNHOME);
 322:	82 e0       	ldi	r24, 0x02	; 2
 324:	0e 94 91 00 	call	0x122	; 0x122 <lcd_command>
    delay(2);
 328:	62 e0       	ldi	r22, 0x02	; 2
 32a:	70 e0       	ldi	r23, 0x00	; 0
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 53 00 	call	0xa6	; 0xa6 <delay>
}
 334:	cf 91       	pop	r28
 336:	df 91       	pop	r29
 338:	08 95       	ret

0000033a <lcd_enable_blinking>:

void lcd_enable_blinking(void)
{
 33a:	df 93       	push	r29
 33c:	cf 93       	push	r28
 33e:	cd b7       	in	r28, 0x3d	; 61
 340:	de b7       	in	r29, 0x3e	; 62
    lcd_displayparams |= LCD_BLINKON;
 342:	80 91 04 01 	lds	r24, 0x0104
 346:	81 60       	ori	r24, 0x01	; 1
 348:	80 93 04 01 	sts	0x0104, r24
    lcd_command(LCD_DISPLAYCONTROL | lcd_displayparams);
 34c:	80 91 04 01 	lds	r24, 0x0104
 350:	88 60       	ori	r24, 0x08	; 8
 352:	0e 94 91 00 	call	0x122	; 0x122 <lcd_command>
}
 356:	cf 91       	pop	r28
 358:	df 91       	pop	r29
 35a:	08 95       	ret

0000035c <lcd_disable_blinking>:

void lcd_disable_blinking(void)
{
 35c:	df 93       	push	r29
 35e:	cf 93       	push	r28
 360:	cd b7       	in	r28, 0x3d	; 61
 362:	de b7       	in	r29, 0x3e	; 62
    lcd_displayparams &= ~LCD_BLINKON;
 364:	80 91 04 01 	lds	r24, 0x0104
 368:	8e 7f       	andi	r24, 0xFE	; 254
 36a:	80 93 04 01 	sts	0x0104, r24
    lcd_command(LCD_DISPLAYCONTROL | lcd_displayparams);
 36e:	80 91 04 01 	lds	r24, 0x0104
 372:	88 60       	ori	r24, 0x08	; 8
 374:	0e 94 91 00 	call	0x122	; 0x122 <lcd_command>
}
 378:	cf 91       	pop	r28
 37a:	df 91       	pop	r29
 37c:	08 95       	ret

0000037e <lcd_enable_cursor>:

void lcd_enable_cursor(void)
{
 37e:	df 93       	push	r29
 380:	cf 93       	push	r28
 382:	cd b7       	in	r28, 0x3d	; 61
 384:	de b7       	in	r29, 0x3e	; 62
    lcd_displayparams |= LCD_CURSORON;
 386:	80 91 04 01 	lds	r24, 0x0104
 38a:	82 60       	ori	r24, 0x02	; 2
 38c:	80 93 04 01 	sts	0x0104, r24
    lcd_command(LCD_DISPLAYCONTROL | lcd_displayparams);
 390:	80 91 04 01 	lds	r24, 0x0104
 394:	88 60       	ori	r24, 0x08	; 8
 396:	0e 94 91 00 	call	0x122	; 0x122 <lcd_command>
}
 39a:	cf 91       	pop	r28
 39c:	df 91       	pop	r29
 39e:	08 95       	ret

000003a0 <lcd_disable_cursor>:

void lcd_disable_cursor(void)
{
 3a0:	df 93       	push	r29
 3a2:	cf 93       	push	r28
 3a4:	cd b7       	in	r28, 0x3d	; 61
 3a6:	de b7       	in	r29, 0x3e	; 62
    lcd_displayparams &= ~LCD_CURSORON;
 3a8:	80 91 04 01 	lds	r24, 0x0104
 3ac:	8d 7f       	andi	r24, 0xFD	; 253
 3ae:	80 93 04 01 	sts	0x0104, r24
    lcd_command(LCD_DISPLAYCONTROL | lcd_displayparams);
 3b2:	80 91 04 01 	lds	r24, 0x0104
 3b6:	88 60       	ori	r24, 0x08	; 8
 3b8:	0e 94 91 00 	call	0x122	; 0x122 <lcd_command>
}
 3bc:	cf 91       	pop	r28
 3be:	df 91       	pop	r29
 3c0:	08 95       	ret

000003c2 <lcd_scroll_left>:

void lcd_scroll_left(void)
{
 3c2:	df 93       	push	r29
 3c4:	cf 93       	push	r28
 3c6:	cd b7       	in	r28, 0x3d	; 61
 3c8:	de b7       	in	r29, 0x3e	; 62
    lcd_command(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVELEFT);
 3ca:	88 e1       	ldi	r24, 0x18	; 24
 3cc:	0e 94 91 00 	call	0x122	; 0x122 <lcd_command>
}
 3d0:	cf 91       	pop	r28
 3d2:	df 91       	pop	r29
 3d4:	08 95       	ret

000003d6 <lcd_scroll_right>:

void lcd_scroll_right(void)
{
 3d6:	df 93       	push	r29
 3d8:	cf 93       	push	r28
 3da:	cd b7       	in	r28, 0x3d	; 61
 3dc:	de b7       	in	r29, 0x3e	; 62
    lcd_command(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVERIGHT);
 3de:	8c e1       	ldi	r24, 0x1C	; 28
 3e0:	0e 94 91 00 	call	0x122	; 0x122 <lcd_command>
}
 3e4:	cf 91       	pop	r28
 3e6:	df 91       	pop	r29
 3e8:	08 95       	ret

000003ea <lcd_set_left_to_right>:

void lcd_set_left_to_right(void)
{
 3ea:	df 93       	push	r29
 3ec:	cf 93       	push	r28
 3ee:	cd b7       	in	r28, 0x3d	; 61
 3f0:	de b7       	in	r29, 0x3e	; 62
    lcd_displayparams |= LCD_ENTRYLEFT;
 3f2:	80 91 04 01 	lds	r24, 0x0104
 3f6:	82 60       	ori	r24, 0x02	; 2
 3f8:	80 93 04 01 	sts	0x0104, r24
    lcd_command(LCD_ENTRYMODESET | lcd_displayparams);
 3fc:	80 91 04 01 	lds	r24, 0x0104
 400:	84 60       	ori	r24, 0x04	; 4
 402:	0e 94 91 00 	call	0x122	; 0x122 <lcd_command>
}
 406:	cf 91       	pop	r28
 408:	df 91       	pop	r29
 40a:	08 95       	ret

0000040c <lcd_set_right_to_left>:

void lcd_set_right_to_left(void)
{
 40c:	df 93       	push	r29
 40e:	cf 93       	push	r28
 410:	cd b7       	in	r28, 0x3d	; 61
 412:	de b7       	in	r29, 0x3e	; 62
    lcd_displayparams &= ~LCD_ENTRYLEFT;
 414:	80 91 04 01 	lds	r24, 0x0104
 418:	8d 7f       	andi	r24, 0xFD	; 253
 41a:	80 93 04 01 	sts	0x0104, r24
    lcd_command(LCD_ENTRYMODESET | lcd_displayparams);
 41e:	80 91 04 01 	lds	r24, 0x0104
 422:	84 60       	ori	r24, 0x04	; 4
 424:	0e 94 91 00 	call	0x122	; 0x122 <lcd_command>
}
 428:	cf 91       	pop	r28
 42a:	df 91       	pop	r29
 42c:	08 95       	ret

0000042e <lcd_enable_autoscroll>:

void lcd_enable_autoscroll(void)
{
 42e:	df 93       	push	r29
 430:	cf 93       	push	r28
 432:	cd b7       	in	r28, 0x3d	; 61
 434:	de b7       	in	r29, 0x3e	; 62
    lcd_displayparams |= LCD_ENTRYSHIFTINCREMENT;
 436:	80 91 04 01 	lds	r24, 0x0104
 43a:	81 60       	ori	r24, 0x01	; 1
 43c:	80 93 04 01 	sts	0x0104, r24
    lcd_command(LCD_ENTRYMODESET | lcd_displayparams);
 440:	80 91 04 01 	lds	r24, 0x0104
 444:	84 60       	ori	r24, 0x04	; 4
 446:	0e 94 91 00 	call	0x122	; 0x122 <lcd_command>
}
 44a:	cf 91       	pop	r28
 44c:	df 91       	pop	r29
 44e:	08 95       	ret

00000450 <lcd_disable_autoscroll>:

void lcd_disable_autoscroll(void)
{
 450:	df 93       	push	r29
 452:	cf 93       	push	r28
 454:	cd b7       	in	r28, 0x3d	; 61
 456:	de b7       	in	r29, 0x3e	; 62
    lcd_displayparams &= ~LCD_ENTRYSHIFTINCREMENT;
 458:	80 91 04 01 	lds	r24, 0x0104
 45c:	8e 7f       	andi	r24, 0xFE	; 254
 45e:	80 93 04 01 	sts	0x0104, r24
    lcd_command(LCD_ENTRYMODESET | lcd_displayparams);
 462:	80 91 04 01 	lds	r24, 0x0104
 466:	84 60       	ori	r24, 0x04	; 4
 468:	0e 94 91 00 	call	0x122	; 0x122 <lcd_command>
}
 46c:	cf 91       	pop	r28
 46e:	df 91       	pop	r29
 470:	08 95       	ret

00000472 <lcd_create_char>:

void lcd_create_char(uint8_t location, uint8_t *charmap)
{
 472:	df 93       	push	r29
 474:	cf 93       	push	r28
 476:	00 d0       	rcall	.+0      	; 0x478 <lcd_create_char+0x6>
 478:	00 d0       	rcall	.+0      	; 0x47a <lcd_create_char+0x8>
 47a:	0f 92       	push	r0
 47c:	cd b7       	in	r28, 0x3d	; 61
 47e:	de b7       	in	r29, 0x3e	; 62
 480:	8b 83       	std	Y+3, r24	; 0x03
 482:	7d 83       	std	Y+5, r23	; 0x05
 484:	6c 83       	std	Y+4, r22	; 0x04
    int i;
    lcd_command(LCD_SETCGRAMADDR | ((location & 0x7) << 3));
 486:	8b 81       	ldd	r24, Y+3	; 0x03
 488:	88 2f       	mov	r24, r24
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	87 70       	andi	r24, 0x07	; 7
 48e:	90 70       	andi	r25, 0x00	; 0
 490:	88 0f       	add	r24, r24
 492:	99 1f       	adc	r25, r25
 494:	88 0f       	add	r24, r24
 496:	99 1f       	adc	r25, r25
 498:	88 0f       	add	r24, r24
 49a:	99 1f       	adc	r25, r25
 49c:	80 64       	ori	r24, 0x40	; 64
 49e:	0e 94 91 00 	call	0x122	; 0x122 <lcd_command>
    for (i = 0; i < 8; i++)
 4a2:	1a 82       	std	Y+2, r1	; 0x02
 4a4:	19 82       	std	Y+1, r1	; 0x01
 4a6:	0f c0       	rjmp	.+30     	; 0x4c6 <lcd_create_char+0x54>
    {
        lcd_write(charmap[i]);
 4a8:	29 81       	ldd	r18, Y+1	; 0x01
 4aa:	3a 81       	ldd	r19, Y+2	; 0x02
 4ac:	8c 81       	ldd	r24, Y+4	; 0x04
 4ae:	9d 81       	ldd	r25, Y+5	; 0x05
 4b0:	fc 01       	movw	r30, r24
 4b2:	e2 0f       	add	r30, r18
 4b4:	f3 1f       	adc	r31, r19
 4b6:	80 81       	ld	r24, Z
 4b8:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_write>

void lcd_create_char(uint8_t location, uint8_t *charmap)
{
    int i;
    lcd_command(LCD_SETCGRAMADDR | ((location & 0x7) << 3));
    for (i = 0; i < 8; i++)
 4bc:	89 81       	ldd	r24, Y+1	; 0x01
 4be:	9a 81       	ldd	r25, Y+2	; 0x02
 4c0:	01 96       	adiw	r24, 0x01	; 1
 4c2:	9a 83       	std	Y+2, r25	; 0x02
 4c4:	89 83       	std	Y+1, r24	; 0x01
 4c6:	89 81       	ldd	r24, Y+1	; 0x01
 4c8:	9a 81       	ldd	r25, Y+2	; 0x02
 4ca:	88 30       	cpi	r24, 0x08	; 8
 4cc:	91 05       	cpc	r25, r1
 4ce:	64 f3       	brlt	.-40     	; 0x4a8 <lcd_create_char+0x36>
    {
        lcd_write(charmap[i]);
    }
}
 4d0:	0f 90       	pop	r0
 4d2:	0f 90       	pop	r0
 4d4:	0f 90       	pop	r0
 4d6:	0f 90       	pop	r0
 4d8:	0f 90       	pop	r0
 4da:	cf 91       	pop	r28
 4dc:	df 91       	pop	r29
 4de:	08 95       	ret

000004e0 <lcd_set_cursor>:

void lcd_set_cursor(uint8_t col, uint8_t row)
{
 4e0:	df 93       	push	r29
 4e2:	cf 93       	push	r28
 4e4:	00 d0       	rcall	.+0      	; 0x4e6 <lcd_set_cursor+0x6>
 4e6:	cd b7       	in	r28, 0x3d	; 61
 4e8:	de b7       	in	r29, 0x3e	; 62
 4ea:	89 83       	std	Y+1, r24	; 0x01
 4ec:	6a 83       	std	Y+2, r22	; 0x02
    static uint8_t offsets[] = { 0x00, 0x40, 0x14, 0x54 };

    lcd_command(LCD_SETDDRAMADDR | (col + offsets[row]));
 4ee:	8a 81       	ldd	r24, Y+2	; 0x02
 4f0:	88 2f       	mov	r24, r24
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	fc 01       	movw	r30, r24
 4f6:	e0 50       	subi	r30, 0x00	; 0
 4f8:	ff 4f       	sbci	r31, 0xFF	; 255
 4fa:	90 81       	ld	r25, Z
 4fc:	89 81       	ldd	r24, Y+1	; 0x01
 4fe:	89 0f       	add	r24, r25
 500:	80 68       	ori	r24, 0x80	; 128
 502:	0e 94 91 00 	call	0x122	; 0x122 <lcd_command>
}
 506:	0f 90       	pop	r0
 508:	0f 90       	pop	r0
 50a:	cf 91       	pop	r28
 50c:	df 91       	pop	r29
 50e:	08 95       	ret

00000510 <lcd_puts>:

void lcd_puts(char strc[])
{
 510:	df 93       	push	r29
 512:	cf 93       	push	r28
 514:	00 d0       	rcall	.+0      	; 0x516 <lcd_puts+0x6>
 516:	00 d0       	rcall	.+0      	; 0x518 <lcd_puts+0x8>
 518:	cd b7       	in	r28, 0x3d	; 61
 51a:	de b7       	in	r29, 0x3e	; 62
 51c:	9c 83       	std	Y+4, r25	; 0x04
 51e:	8b 83       	std	Y+3, r24	; 0x03
    int i;
    for (i=0; strc[i]; i++)
 520:	1a 82       	std	Y+2, r1	; 0x02
 522:	19 82       	std	Y+1, r1	; 0x01
 524:	0f c0       	rjmp	.+30     	; 0x544 <lcd_puts+0x34>
    {
        lcd_write(strc[i]);
 526:	29 81       	ldd	r18, Y+1	; 0x01
 528:	3a 81       	ldd	r19, Y+2	; 0x02
 52a:	8b 81       	ldd	r24, Y+3	; 0x03
 52c:	9c 81       	ldd	r25, Y+4	; 0x04
 52e:	fc 01       	movw	r30, r24
 530:	e2 0f       	add	r30, r18
 532:	f3 1f       	adc	r31, r19
 534:	80 81       	ld	r24, Z
 536:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_write>
}

void lcd_puts(char strc[])
{
    int i;
    for (i=0; strc[i]; i++)
 53a:	89 81       	ldd	r24, Y+1	; 0x01
 53c:	9a 81       	ldd	r25, Y+2	; 0x02
 53e:	01 96       	adiw	r24, 0x01	; 1
 540:	9a 83       	std	Y+2, r25	; 0x02
 542:	89 83       	std	Y+1, r24	; 0x01
 544:	29 81       	ldd	r18, Y+1	; 0x01
 546:	3a 81       	ldd	r19, Y+2	; 0x02
 548:	8b 81       	ldd	r24, Y+3	; 0x03
 54a:	9c 81       	ldd	r25, Y+4	; 0x04
 54c:	fc 01       	movw	r30, r24
 54e:	e2 0f       	add	r30, r18
 550:	f3 1f       	adc	r31, r19
 552:	80 81       	ld	r24, Z
 554:	88 23       	and	r24, r24
 556:	39 f7       	brne	.-50     	; 0x526 <lcd_puts+0x16>
    {
        lcd_write(strc[i]);
    }
}
 558:	0f 90       	pop	r0
 55a:	0f 90       	pop	r0
 55c:	0f 90       	pop	r0
 55e:	0f 90       	pop	r0
 560:	cf 91       	pop	r28
 562:	df 91       	pop	r29
 564:	08 95       	ret

00000566 <lcd_printf>:

void lcd_printf(char *format, ...)
{
 566:	df 93       	push	r29
 568:	cf 93       	push	r28
 56a:	00 d0       	rcall	.+0      	; 0x56c <lcd_printf+0x6>
 56c:	cd b7       	in	r28, 0x3d	; 61
 56e:	de b7       	in	r29, 0x3e	; 62
    va_list args;

    va_start(args, format);
 570:	ce 01       	movw	r24, r28
 572:	09 96       	adiw	r24, 0x09	; 9
 574:	9a 83       	std	Y+2, r25	; 0x02
 576:	89 83       	std	Y+1, r24	; 0x01
    vsnprintf(lcd_buffer, LCD_COL_COUNT + 1, format, args);
 578:	e9 81       	ldd	r30, Y+1	; 0x01
 57a:	fa 81       	ldd	r31, Y+2	; 0x02
 57c:	85 e0       	ldi	r24, 0x05	; 5
 57e:	91 e0       	ldi	r25, 0x01	; 1
 580:	2f 81       	ldd	r18, Y+7	; 0x07
 582:	38 85       	ldd	r19, Y+8	; 0x08
 584:	61 e1       	ldi	r22, 0x11	; 17
 586:	70 e0       	ldi	r23, 0x00	; 0
 588:	a9 01       	movw	r20, r18
 58a:	9f 01       	movw	r18, r30
 58c:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <vsnprintf>
    va_end(args);

    lcd_puts(lcd_buffer);
 590:	85 e0       	ldi	r24, 0x05	; 5
 592:	91 e0       	ldi	r25, 0x01	; 1
 594:	0e 94 88 02 	call	0x510	; 0x510 <lcd_puts>
}
 598:	0f 90       	pop	r0
 59a:	0f 90       	pop	r0
 59c:	cf 91       	pop	r28
 59e:	df 91       	pop	r29
 5a0:	08 95       	ret

000005a2 <main>:
#include "../Headerfunktionen/lcd.h"
#include <avr/io.h>

int main(void)
{
 5a2:	df 93       	push	r29
 5a4:	cf 93       	push	r28
 5a6:	cd b7       	in	r28, 0x3d	; 61
 5a8:	de b7       	in	r29, 0x3e	; 62
    lcd_init();
 5aa:	0e 94 11 01 	call	0x222	; 0x222 <lcd_init>
    lcd_write(5);
 5ae:	85 e0       	ldi	r24, 0x05	; 5
 5b0:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_write>
 5b4:	ff cf       	rjmp	.-2      	; 0x5b4 <main+0x12>

000005b6 <__mulsi3>:
 5b6:	62 9f       	mul	r22, r18
 5b8:	d0 01       	movw	r26, r0
 5ba:	73 9f       	mul	r23, r19
 5bc:	f0 01       	movw	r30, r0
 5be:	82 9f       	mul	r24, r18
 5c0:	e0 0d       	add	r30, r0
 5c2:	f1 1d       	adc	r31, r1
 5c4:	64 9f       	mul	r22, r20
 5c6:	e0 0d       	add	r30, r0
 5c8:	f1 1d       	adc	r31, r1
 5ca:	92 9f       	mul	r25, r18
 5cc:	f0 0d       	add	r31, r0
 5ce:	83 9f       	mul	r24, r19
 5d0:	f0 0d       	add	r31, r0
 5d2:	74 9f       	mul	r23, r20
 5d4:	f0 0d       	add	r31, r0
 5d6:	65 9f       	mul	r22, r21
 5d8:	f0 0d       	add	r31, r0
 5da:	99 27       	eor	r25, r25
 5dc:	72 9f       	mul	r23, r18
 5de:	b0 0d       	add	r27, r0
 5e0:	e1 1d       	adc	r30, r1
 5e2:	f9 1f       	adc	r31, r25
 5e4:	63 9f       	mul	r22, r19
 5e6:	b0 0d       	add	r27, r0
 5e8:	e1 1d       	adc	r30, r1
 5ea:	f9 1f       	adc	r31, r25
 5ec:	bd 01       	movw	r22, r26
 5ee:	cf 01       	movw	r24, r30
 5f0:	11 24       	eor	r1, r1
 5f2:	08 95       	ret

000005f4 <vsnprintf>:
 5f4:	ae e0       	ldi	r26, 0x0E	; 14
 5f6:	b0 e0       	ldi	r27, 0x00	; 0
 5f8:	e0 e0       	ldi	r30, 0x00	; 0
 5fa:	f3 e0       	ldi	r31, 0x03	; 3
 5fc:	0c 94 af 05 	jmp	0xb5e	; 0xb5e <__prologue_saves__+0x1c>
 600:	8c 01       	movw	r16, r24
 602:	77 ff       	sbrs	r23, 7
 604:	02 c0       	rjmp	.+4      	; 0x60a <vsnprintf+0x16>
 606:	60 e0       	ldi	r22, 0x00	; 0
 608:	70 e8       	ldi	r23, 0x80	; 128
 60a:	61 50       	subi	r22, 0x01	; 1
 60c:	70 40       	sbci	r23, 0x00	; 0
 60e:	7e 83       	std	Y+6, r23	; 0x06
 610:	6d 83       	std	Y+5, r22	; 0x05
 612:	1a 83       	std	Y+2, r17	; 0x02
 614:	09 83       	std	Y+1, r16	; 0x01
 616:	86 e0       	ldi	r24, 0x06	; 6
 618:	8c 83       	std	Y+4, r24	; 0x04
 61a:	ce 01       	movw	r24, r28
 61c:	01 96       	adiw	r24, 0x01	; 1
 61e:	ba 01       	movw	r22, r20
 620:	a9 01       	movw	r20, r18
 622:	0e 94 24 03 	call	0x648	; 0x648 <vfprintf>
 626:	2d 81       	ldd	r18, Y+5	; 0x05
 628:	3e 81       	ldd	r19, Y+6	; 0x06
 62a:	37 fd       	sbrc	r19, 7
 62c:	09 c0       	rjmp	.+18     	; 0x640 <vsnprintf+0x4c>
 62e:	ef 81       	ldd	r30, Y+7	; 0x07
 630:	f8 85       	ldd	r31, Y+8	; 0x08
 632:	2e 17       	cp	r18, r30
 634:	3f 07       	cpc	r19, r31
 636:	0c f4       	brge	.+2      	; 0x63a <vsnprintf+0x46>
 638:	f9 01       	movw	r30, r18
 63a:	e0 0f       	add	r30, r16
 63c:	f1 1f       	adc	r31, r17
 63e:	10 82       	st	Z, r1
 640:	2e 96       	adiw	r28, 0x0e	; 14
 642:	e4 e0       	ldi	r30, 0x04	; 4
 644:	0c 94 cb 05 	jmp	0xb96	; 0xb96 <__epilogue_restores__+0x1c>

00000648 <vfprintf>:
 648:	ab e0       	ldi	r26, 0x0B	; 11
 64a:	b0 e0       	ldi	r27, 0x00	; 0
 64c:	ea e2       	ldi	r30, 0x2A	; 42
 64e:	f3 e0       	ldi	r31, 0x03	; 3
 650:	0c 94 a1 05 	jmp	0xb42	; 0xb42 <__prologue_saves__>
 654:	3c 01       	movw	r6, r24
 656:	2b 01       	movw	r4, r22
 658:	5a 01       	movw	r10, r20
 65a:	fc 01       	movw	r30, r24
 65c:	17 82       	std	Z+7, r1	; 0x07
 65e:	16 82       	std	Z+6, r1	; 0x06
 660:	83 81       	ldd	r24, Z+3	; 0x03
 662:	81 fd       	sbrc	r24, 1
 664:	03 c0       	rjmp	.+6      	; 0x66c <vfprintf+0x24>
 666:	6f ef       	ldi	r22, 0xFF	; 255
 668:	7f ef       	ldi	r23, 0xFF	; 255
 66a:	c6 c1       	rjmp	.+908    	; 0x9f8 <__stack+0xf9>
 66c:	9a e0       	ldi	r25, 0x0A	; 10
 66e:	89 2e       	mov	r8, r25
 670:	1e 01       	movw	r2, r28
 672:	08 94       	sec
 674:	21 1c       	adc	r2, r1
 676:	31 1c       	adc	r3, r1
 678:	f3 01       	movw	r30, r6
 67a:	23 81       	ldd	r18, Z+3	; 0x03
 67c:	f2 01       	movw	r30, r4
 67e:	23 fd       	sbrc	r18, 3
 680:	85 91       	lpm	r24, Z+
 682:	23 ff       	sbrs	r18, 3
 684:	81 91       	ld	r24, Z+
 686:	2f 01       	movw	r4, r30
 688:	88 23       	and	r24, r24
 68a:	09 f4       	brne	.+2      	; 0x68e <vfprintf+0x46>
 68c:	b2 c1       	rjmp	.+868    	; 0x9f2 <__stack+0xf3>
 68e:	85 32       	cpi	r24, 0x25	; 37
 690:	39 f4       	brne	.+14     	; 0x6a0 <vfprintf+0x58>
 692:	23 fd       	sbrc	r18, 3
 694:	85 91       	lpm	r24, Z+
 696:	23 ff       	sbrs	r18, 3
 698:	81 91       	ld	r24, Z+
 69a:	2f 01       	movw	r4, r30
 69c:	85 32       	cpi	r24, 0x25	; 37
 69e:	29 f4       	brne	.+10     	; 0x6aa <vfprintf+0x62>
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	b3 01       	movw	r22, r6
 6a4:	0e 94 17 05 	call	0xa2e	; 0xa2e <fputc>
 6a8:	e7 cf       	rjmp	.-50     	; 0x678 <vfprintf+0x30>
 6aa:	98 2f       	mov	r25, r24
 6ac:	ff 24       	eor	r15, r15
 6ae:	ee 24       	eor	r14, r14
 6b0:	99 24       	eor	r9, r9
 6b2:	ff e1       	ldi	r31, 0x1F	; 31
 6b4:	ff 15       	cp	r31, r15
 6b6:	d0 f0       	brcs	.+52     	; 0x6ec <vfprintf+0xa4>
 6b8:	9b 32       	cpi	r25, 0x2B	; 43
 6ba:	69 f0       	breq	.+26     	; 0x6d6 <vfprintf+0x8e>
 6bc:	9c 32       	cpi	r25, 0x2C	; 44
 6be:	28 f4       	brcc	.+10     	; 0x6ca <vfprintf+0x82>
 6c0:	90 32       	cpi	r25, 0x20	; 32
 6c2:	59 f0       	breq	.+22     	; 0x6da <vfprintf+0x92>
 6c4:	93 32       	cpi	r25, 0x23	; 35
 6c6:	91 f4       	brne	.+36     	; 0x6ec <vfprintf+0xa4>
 6c8:	0e c0       	rjmp	.+28     	; 0x6e6 <vfprintf+0x9e>
 6ca:	9d 32       	cpi	r25, 0x2D	; 45
 6cc:	49 f0       	breq	.+18     	; 0x6e0 <vfprintf+0x98>
 6ce:	90 33       	cpi	r25, 0x30	; 48
 6d0:	69 f4       	brne	.+26     	; 0x6ec <vfprintf+0xa4>
 6d2:	41 e0       	ldi	r20, 0x01	; 1
 6d4:	24 c0       	rjmp	.+72     	; 0x71e <vfprintf+0xd6>
 6d6:	52 e0       	ldi	r21, 0x02	; 2
 6d8:	f5 2a       	or	r15, r21
 6da:	84 e0       	ldi	r24, 0x04	; 4
 6dc:	f8 2a       	or	r15, r24
 6de:	28 c0       	rjmp	.+80     	; 0x730 <vfprintf+0xe8>
 6e0:	98 e0       	ldi	r25, 0x08	; 8
 6e2:	f9 2a       	or	r15, r25
 6e4:	25 c0       	rjmp	.+74     	; 0x730 <vfprintf+0xe8>
 6e6:	e0 e1       	ldi	r30, 0x10	; 16
 6e8:	fe 2a       	or	r15, r30
 6ea:	22 c0       	rjmp	.+68     	; 0x730 <vfprintf+0xe8>
 6ec:	f7 fc       	sbrc	r15, 7
 6ee:	29 c0       	rjmp	.+82     	; 0x742 <vfprintf+0xfa>
 6f0:	89 2f       	mov	r24, r25
 6f2:	80 53       	subi	r24, 0x30	; 48
 6f4:	8a 30       	cpi	r24, 0x0A	; 10
 6f6:	70 f4       	brcc	.+28     	; 0x714 <vfprintf+0xcc>
 6f8:	f6 fe       	sbrs	r15, 6
 6fa:	05 c0       	rjmp	.+10     	; 0x706 <vfprintf+0xbe>
 6fc:	98 9c       	mul	r9, r8
 6fe:	90 2c       	mov	r9, r0
 700:	11 24       	eor	r1, r1
 702:	98 0e       	add	r9, r24
 704:	15 c0       	rjmp	.+42     	; 0x730 <vfprintf+0xe8>
 706:	e8 9c       	mul	r14, r8
 708:	e0 2c       	mov	r14, r0
 70a:	11 24       	eor	r1, r1
 70c:	e8 0e       	add	r14, r24
 70e:	f0 e2       	ldi	r31, 0x20	; 32
 710:	ff 2a       	or	r15, r31
 712:	0e c0       	rjmp	.+28     	; 0x730 <vfprintf+0xe8>
 714:	9e 32       	cpi	r25, 0x2E	; 46
 716:	29 f4       	brne	.+10     	; 0x722 <vfprintf+0xda>
 718:	f6 fc       	sbrc	r15, 6
 71a:	6b c1       	rjmp	.+726    	; 0x9f2 <__stack+0xf3>
 71c:	40 e4       	ldi	r20, 0x40	; 64
 71e:	f4 2a       	or	r15, r20
 720:	07 c0       	rjmp	.+14     	; 0x730 <vfprintf+0xe8>
 722:	9c 36       	cpi	r25, 0x6C	; 108
 724:	19 f4       	brne	.+6      	; 0x72c <vfprintf+0xe4>
 726:	50 e8       	ldi	r21, 0x80	; 128
 728:	f5 2a       	or	r15, r21
 72a:	02 c0       	rjmp	.+4      	; 0x730 <vfprintf+0xe8>
 72c:	98 36       	cpi	r25, 0x68	; 104
 72e:	49 f4       	brne	.+18     	; 0x742 <vfprintf+0xfa>
 730:	f2 01       	movw	r30, r4
 732:	23 fd       	sbrc	r18, 3
 734:	95 91       	lpm	r25, Z+
 736:	23 ff       	sbrs	r18, 3
 738:	91 91       	ld	r25, Z+
 73a:	2f 01       	movw	r4, r30
 73c:	99 23       	and	r25, r25
 73e:	09 f0       	breq	.+2      	; 0x742 <vfprintf+0xfa>
 740:	b8 cf       	rjmp	.-144    	; 0x6b2 <vfprintf+0x6a>
 742:	89 2f       	mov	r24, r25
 744:	85 54       	subi	r24, 0x45	; 69
 746:	83 30       	cpi	r24, 0x03	; 3
 748:	18 f0       	brcs	.+6      	; 0x750 <vfprintf+0x108>
 74a:	80 52       	subi	r24, 0x20	; 32
 74c:	83 30       	cpi	r24, 0x03	; 3
 74e:	38 f4       	brcc	.+14     	; 0x75e <vfprintf+0x116>
 750:	44 e0       	ldi	r20, 0x04	; 4
 752:	50 e0       	ldi	r21, 0x00	; 0
 754:	a4 0e       	add	r10, r20
 756:	b5 1e       	adc	r11, r21
 758:	5f e3       	ldi	r21, 0x3F	; 63
 75a:	59 83       	std	Y+1, r21	; 0x01
 75c:	0f c0       	rjmp	.+30     	; 0x77c <vfprintf+0x134>
 75e:	93 36       	cpi	r25, 0x63	; 99
 760:	31 f0       	breq	.+12     	; 0x76e <vfprintf+0x126>
 762:	93 37       	cpi	r25, 0x73	; 115
 764:	79 f0       	breq	.+30     	; 0x784 <vfprintf+0x13c>
 766:	93 35       	cpi	r25, 0x53	; 83
 768:	09 f0       	breq	.+2      	; 0x76c <vfprintf+0x124>
 76a:	56 c0       	rjmp	.+172    	; 0x818 <vfprintf+0x1d0>
 76c:	20 c0       	rjmp	.+64     	; 0x7ae <vfprintf+0x166>
 76e:	f5 01       	movw	r30, r10
 770:	80 81       	ld	r24, Z
 772:	89 83       	std	Y+1, r24	; 0x01
 774:	42 e0       	ldi	r20, 0x02	; 2
 776:	50 e0       	ldi	r21, 0x00	; 0
 778:	a4 0e       	add	r10, r20
 77a:	b5 1e       	adc	r11, r21
 77c:	61 01       	movw	r12, r2
 77e:	01 e0       	ldi	r16, 0x01	; 1
 780:	10 e0       	ldi	r17, 0x00	; 0
 782:	12 c0       	rjmp	.+36     	; 0x7a8 <vfprintf+0x160>
 784:	f5 01       	movw	r30, r10
 786:	c0 80       	ld	r12, Z
 788:	d1 80       	ldd	r13, Z+1	; 0x01
 78a:	f6 fc       	sbrc	r15, 6
 78c:	03 c0       	rjmp	.+6      	; 0x794 <vfprintf+0x14c>
 78e:	6f ef       	ldi	r22, 0xFF	; 255
 790:	7f ef       	ldi	r23, 0xFF	; 255
 792:	02 c0       	rjmp	.+4      	; 0x798 <vfprintf+0x150>
 794:	69 2d       	mov	r22, r9
 796:	70 e0       	ldi	r23, 0x00	; 0
 798:	42 e0       	ldi	r20, 0x02	; 2
 79a:	50 e0       	ldi	r21, 0x00	; 0
 79c:	a4 0e       	add	r10, r20
 79e:	b5 1e       	adc	r11, r21
 7a0:	c6 01       	movw	r24, r12
 7a2:	0e 94 0c 05 	call	0xa18	; 0xa18 <strnlen>
 7a6:	8c 01       	movw	r16, r24
 7a8:	5f e7       	ldi	r21, 0x7F	; 127
 7aa:	f5 22       	and	r15, r21
 7ac:	14 c0       	rjmp	.+40     	; 0x7d6 <vfprintf+0x18e>
 7ae:	f5 01       	movw	r30, r10
 7b0:	c0 80       	ld	r12, Z
 7b2:	d1 80       	ldd	r13, Z+1	; 0x01
 7b4:	f6 fc       	sbrc	r15, 6
 7b6:	03 c0       	rjmp	.+6      	; 0x7be <vfprintf+0x176>
 7b8:	6f ef       	ldi	r22, 0xFF	; 255
 7ba:	7f ef       	ldi	r23, 0xFF	; 255
 7bc:	02 c0       	rjmp	.+4      	; 0x7c2 <vfprintf+0x17a>
 7be:	69 2d       	mov	r22, r9
 7c0:	70 e0       	ldi	r23, 0x00	; 0
 7c2:	42 e0       	ldi	r20, 0x02	; 2
 7c4:	50 e0       	ldi	r21, 0x00	; 0
 7c6:	a4 0e       	add	r10, r20
 7c8:	b5 1e       	adc	r11, r21
 7ca:	c6 01       	movw	r24, r12
 7cc:	0e 94 01 05 	call	0xa02	; 0xa02 <strnlen_P>
 7d0:	8c 01       	movw	r16, r24
 7d2:	50 e8       	ldi	r21, 0x80	; 128
 7d4:	f5 2a       	or	r15, r21
 7d6:	f3 fe       	sbrs	r15, 3
 7d8:	07 c0       	rjmp	.+14     	; 0x7e8 <vfprintf+0x1a0>
 7da:	1a c0       	rjmp	.+52     	; 0x810 <vfprintf+0x1c8>
 7dc:	80 e2       	ldi	r24, 0x20	; 32
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	b3 01       	movw	r22, r6
 7e2:	0e 94 17 05 	call	0xa2e	; 0xa2e <fputc>
 7e6:	ea 94       	dec	r14
 7e8:	8e 2d       	mov	r24, r14
 7ea:	90 e0       	ldi	r25, 0x00	; 0
 7ec:	08 17       	cp	r16, r24
 7ee:	19 07       	cpc	r17, r25
 7f0:	a8 f3       	brcs	.-22     	; 0x7dc <vfprintf+0x194>
 7f2:	0e c0       	rjmp	.+28     	; 0x810 <vfprintf+0x1c8>
 7f4:	f6 01       	movw	r30, r12
 7f6:	f7 fc       	sbrc	r15, 7
 7f8:	85 91       	lpm	r24, Z+
 7fa:	f7 fe       	sbrs	r15, 7
 7fc:	81 91       	ld	r24, Z+
 7fe:	6f 01       	movw	r12, r30
 800:	90 e0       	ldi	r25, 0x00	; 0
 802:	b3 01       	movw	r22, r6
 804:	0e 94 17 05 	call	0xa2e	; 0xa2e <fputc>
 808:	e1 10       	cpse	r14, r1
 80a:	ea 94       	dec	r14
 80c:	01 50       	subi	r16, 0x01	; 1
 80e:	10 40       	sbci	r17, 0x00	; 0
 810:	01 15       	cp	r16, r1
 812:	11 05       	cpc	r17, r1
 814:	79 f7       	brne	.-34     	; 0x7f4 <vfprintf+0x1ac>
 816:	ea c0       	rjmp	.+468    	; 0x9ec <__stack+0xed>
 818:	94 36       	cpi	r25, 0x64	; 100
 81a:	11 f0       	breq	.+4      	; 0x820 <vfprintf+0x1d8>
 81c:	99 36       	cpi	r25, 0x69	; 105
 81e:	69 f5       	brne	.+90     	; 0x87a <vfprintf+0x232>
 820:	f7 fe       	sbrs	r15, 7
 822:	08 c0       	rjmp	.+16     	; 0x834 <vfprintf+0x1ec>
 824:	f5 01       	movw	r30, r10
 826:	20 81       	ld	r18, Z
 828:	31 81       	ldd	r19, Z+1	; 0x01
 82a:	42 81       	ldd	r20, Z+2	; 0x02
 82c:	53 81       	ldd	r21, Z+3	; 0x03
 82e:	84 e0       	ldi	r24, 0x04	; 4
 830:	90 e0       	ldi	r25, 0x00	; 0
 832:	0a c0       	rjmp	.+20     	; 0x848 <vfprintf+0x200>
 834:	f5 01       	movw	r30, r10
 836:	80 81       	ld	r24, Z
 838:	91 81       	ldd	r25, Z+1	; 0x01
 83a:	9c 01       	movw	r18, r24
 83c:	44 27       	eor	r20, r20
 83e:	37 fd       	sbrc	r19, 7
 840:	40 95       	com	r20
 842:	54 2f       	mov	r21, r20
 844:	82 e0       	ldi	r24, 0x02	; 2
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	a8 0e       	add	r10, r24
 84a:	b9 1e       	adc	r11, r25
 84c:	9f e6       	ldi	r25, 0x6F	; 111
 84e:	f9 22       	and	r15, r25
 850:	57 ff       	sbrs	r21, 7
 852:	09 c0       	rjmp	.+18     	; 0x866 <vfprintf+0x21e>
 854:	50 95       	com	r21
 856:	40 95       	com	r20
 858:	30 95       	com	r19
 85a:	21 95       	neg	r18
 85c:	3f 4f       	sbci	r19, 0xFF	; 255
 85e:	4f 4f       	sbci	r20, 0xFF	; 255
 860:	5f 4f       	sbci	r21, 0xFF	; 255
 862:	e0 e8       	ldi	r30, 0x80	; 128
 864:	fe 2a       	or	r15, r30
 866:	ca 01       	movw	r24, r20
 868:	b9 01       	movw	r22, r18
 86a:	a1 01       	movw	r20, r2
 86c:	2a e0       	ldi	r18, 0x0A	; 10
 86e:	30 e0       	ldi	r19, 0x00	; 0
 870:	0e 94 43 05 	call	0xa86	; 0xa86 <__ultoa_invert>
 874:	d8 2e       	mov	r13, r24
 876:	d2 18       	sub	r13, r2
 878:	40 c0       	rjmp	.+128    	; 0x8fa <vfprintf+0x2b2>
 87a:	95 37       	cpi	r25, 0x75	; 117
 87c:	29 f4       	brne	.+10     	; 0x888 <vfprintf+0x240>
 87e:	1f 2d       	mov	r17, r15
 880:	1f 7e       	andi	r17, 0xEF	; 239
 882:	2a e0       	ldi	r18, 0x0A	; 10
 884:	30 e0       	ldi	r19, 0x00	; 0
 886:	1d c0       	rjmp	.+58     	; 0x8c2 <vfprintf+0x27a>
 888:	1f 2d       	mov	r17, r15
 88a:	19 7f       	andi	r17, 0xF9	; 249
 88c:	9f 36       	cpi	r25, 0x6F	; 111
 88e:	61 f0       	breq	.+24     	; 0x8a8 <vfprintf+0x260>
 890:	90 37       	cpi	r25, 0x70	; 112
 892:	20 f4       	brcc	.+8      	; 0x89c <vfprintf+0x254>
 894:	98 35       	cpi	r25, 0x58	; 88
 896:	09 f0       	breq	.+2      	; 0x89a <vfprintf+0x252>
 898:	ac c0       	rjmp	.+344    	; 0x9f2 <__stack+0xf3>
 89a:	0f c0       	rjmp	.+30     	; 0x8ba <vfprintf+0x272>
 89c:	90 37       	cpi	r25, 0x70	; 112
 89e:	39 f0       	breq	.+14     	; 0x8ae <vfprintf+0x266>
 8a0:	98 37       	cpi	r25, 0x78	; 120
 8a2:	09 f0       	breq	.+2      	; 0x8a6 <vfprintf+0x25e>
 8a4:	a6 c0       	rjmp	.+332    	; 0x9f2 <__stack+0xf3>
 8a6:	04 c0       	rjmp	.+8      	; 0x8b0 <vfprintf+0x268>
 8a8:	28 e0       	ldi	r18, 0x08	; 8
 8aa:	30 e0       	ldi	r19, 0x00	; 0
 8ac:	0a c0       	rjmp	.+20     	; 0x8c2 <vfprintf+0x27a>
 8ae:	10 61       	ori	r17, 0x10	; 16
 8b0:	14 fd       	sbrc	r17, 4
 8b2:	14 60       	ori	r17, 0x04	; 4
 8b4:	20 e1       	ldi	r18, 0x10	; 16
 8b6:	30 e0       	ldi	r19, 0x00	; 0
 8b8:	04 c0       	rjmp	.+8      	; 0x8c2 <vfprintf+0x27a>
 8ba:	14 fd       	sbrc	r17, 4
 8bc:	16 60       	ori	r17, 0x06	; 6
 8be:	20 e1       	ldi	r18, 0x10	; 16
 8c0:	32 e0       	ldi	r19, 0x02	; 2
 8c2:	17 ff       	sbrs	r17, 7
 8c4:	08 c0       	rjmp	.+16     	; 0x8d6 <vfprintf+0x28e>
 8c6:	f5 01       	movw	r30, r10
 8c8:	60 81       	ld	r22, Z
 8ca:	71 81       	ldd	r23, Z+1	; 0x01
 8cc:	82 81       	ldd	r24, Z+2	; 0x02
 8ce:	93 81       	ldd	r25, Z+3	; 0x03
 8d0:	44 e0       	ldi	r20, 0x04	; 4
 8d2:	50 e0       	ldi	r21, 0x00	; 0
 8d4:	08 c0       	rjmp	.+16     	; 0x8e6 <vfprintf+0x29e>
 8d6:	f5 01       	movw	r30, r10
 8d8:	80 81       	ld	r24, Z
 8da:	91 81       	ldd	r25, Z+1	; 0x01
 8dc:	bc 01       	movw	r22, r24
 8de:	80 e0       	ldi	r24, 0x00	; 0
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	42 e0       	ldi	r20, 0x02	; 2
 8e4:	50 e0       	ldi	r21, 0x00	; 0
 8e6:	a4 0e       	add	r10, r20
 8e8:	b5 1e       	adc	r11, r21
 8ea:	a1 01       	movw	r20, r2
 8ec:	0e 94 43 05 	call	0xa86	; 0xa86 <__ultoa_invert>
 8f0:	d8 2e       	mov	r13, r24
 8f2:	d2 18       	sub	r13, r2
 8f4:	8f e7       	ldi	r24, 0x7F	; 127
 8f6:	f8 2e       	mov	r15, r24
 8f8:	f1 22       	and	r15, r17
 8fa:	f6 fe       	sbrs	r15, 6
 8fc:	0b c0       	rjmp	.+22     	; 0x914 <__stack+0x15>
 8fe:	5e ef       	ldi	r21, 0xFE	; 254
 900:	f5 22       	and	r15, r21
 902:	d9 14       	cp	r13, r9
 904:	38 f4       	brcc	.+14     	; 0x914 <__stack+0x15>
 906:	f4 fe       	sbrs	r15, 4
 908:	07 c0       	rjmp	.+14     	; 0x918 <__stack+0x19>
 90a:	f2 fc       	sbrc	r15, 2
 90c:	05 c0       	rjmp	.+10     	; 0x918 <__stack+0x19>
 90e:	8f ee       	ldi	r24, 0xEF	; 239
 910:	f8 22       	and	r15, r24
 912:	02 c0       	rjmp	.+4      	; 0x918 <__stack+0x19>
 914:	1d 2d       	mov	r17, r13
 916:	01 c0       	rjmp	.+2      	; 0x91a <__stack+0x1b>
 918:	19 2d       	mov	r17, r9
 91a:	f4 fe       	sbrs	r15, 4
 91c:	0d c0       	rjmp	.+26     	; 0x938 <__stack+0x39>
 91e:	fe 01       	movw	r30, r28
 920:	ed 0d       	add	r30, r13
 922:	f1 1d       	adc	r31, r1
 924:	80 81       	ld	r24, Z
 926:	80 33       	cpi	r24, 0x30	; 48
 928:	19 f4       	brne	.+6      	; 0x930 <__stack+0x31>
 92a:	99 ee       	ldi	r25, 0xE9	; 233
 92c:	f9 22       	and	r15, r25
 92e:	08 c0       	rjmp	.+16     	; 0x940 <__stack+0x41>
 930:	1f 5f       	subi	r17, 0xFF	; 255
 932:	f2 fe       	sbrs	r15, 2
 934:	05 c0       	rjmp	.+10     	; 0x940 <__stack+0x41>
 936:	03 c0       	rjmp	.+6      	; 0x93e <__stack+0x3f>
 938:	8f 2d       	mov	r24, r15
 93a:	86 78       	andi	r24, 0x86	; 134
 93c:	09 f0       	breq	.+2      	; 0x940 <__stack+0x41>
 93e:	1f 5f       	subi	r17, 0xFF	; 255
 940:	0f 2d       	mov	r16, r15
 942:	f3 fc       	sbrc	r15, 3
 944:	14 c0       	rjmp	.+40     	; 0x96e <__stack+0x6f>
 946:	f0 fe       	sbrs	r15, 0
 948:	0f c0       	rjmp	.+30     	; 0x968 <__stack+0x69>
 94a:	1e 15       	cp	r17, r14
 94c:	10 f0       	brcs	.+4      	; 0x952 <__stack+0x53>
 94e:	9d 2c       	mov	r9, r13
 950:	0b c0       	rjmp	.+22     	; 0x968 <__stack+0x69>
 952:	9d 2c       	mov	r9, r13
 954:	9e 0c       	add	r9, r14
 956:	91 1a       	sub	r9, r17
 958:	1e 2d       	mov	r17, r14
 95a:	06 c0       	rjmp	.+12     	; 0x968 <__stack+0x69>
 95c:	80 e2       	ldi	r24, 0x20	; 32
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	b3 01       	movw	r22, r6
 962:	0e 94 17 05 	call	0xa2e	; 0xa2e <fputc>
 966:	1f 5f       	subi	r17, 0xFF	; 255
 968:	1e 15       	cp	r17, r14
 96a:	c0 f3       	brcs	.-16     	; 0x95c <__stack+0x5d>
 96c:	04 c0       	rjmp	.+8      	; 0x976 <__stack+0x77>
 96e:	1e 15       	cp	r17, r14
 970:	10 f4       	brcc	.+4      	; 0x976 <__stack+0x77>
 972:	e1 1a       	sub	r14, r17
 974:	01 c0       	rjmp	.+2      	; 0x978 <__stack+0x79>
 976:	ee 24       	eor	r14, r14
 978:	04 ff       	sbrs	r16, 4
 97a:	0f c0       	rjmp	.+30     	; 0x99a <__stack+0x9b>
 97c:	80 e3       	ldi	r24, 0x30	; 48
 97e:	90 e0       	ldi	r25, 0x00	; 0
 980:	b3 01       	movw	r22, r6
 982:	0e 94 17 05 	call	0xa2e	; 0xa2e <fputc>
 986:	02 ff       	sbrs	r16, 2
 988:	1d c0       	rjmp	.+58     	; 0x9c4 <__stack+0xc5>
 98a:	01 fd       	sbrc	r16, 1
 98c:	03 c0       	rjmp	.+6      	; 0x994 <__stack+0x95>
 98e:	88 e7       	ldi	r24, 0x78	; 120
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	0e c0       	rjmp	.+28     	; 0x9b0 <__stack+0xb1>
 994:	88 e5       	ldi	r24, 0x58	; 88
 996:	90 e0       	ldi	r25, 0x00	; 0
 998:	0b c0       	rjmp	.+22     	; 0x9b0 <__stack+0xb1>
 99a:	80 2f       	mov	r24, r16
 99c:	86 78       	andi	r24, 0x86	; 134
 99e:	91 f0       	breq	.+36     	; 0x9c4 <__stack+0xc5>
 9a0:	01 ff       	sbrs	r16, 1
 9a2:	02 c0       	rjmp	.+4      	; 0x9a8 <__stack+0xa9>
 9a4:	8b e2       	ldi	r24, 0x2B	; 43
 9a6:	01 c0       	rjmp	.+2      	; 0x9aa <__stack+0xab>
 9a8:	80 e2       	ldi	r24, 0x20	; 32
 9aa:	f7 fc       	sbrc	r15, 7
 9ac:	8d e2       	ldi	r24, 0x2D	; 45
 9ae:	90 e0       	ldi	r25, 0x00	; 0
 9b0:	b3 01       	movw	r22, r6
 9b2:	0e 94 17 05 	call	0xa2e	; 0xa2e <fputc>
 9b6:	06 c0       	rjmp	.+12     	; 0x9c4 <__stack+0xc5>
 9b8:	80 e3       	ldi	r24, 0x30	; 48
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	b3 01       	movw	r22, r6
 9be:	0e 94 17 05 	call	0xa2e	; 0xa2e <fputc>
 9c2:	9a 94       	dec	r9
 9c4:	d9 14       	cp	r13, r9
 9c6:	c0 f3       	brcs	.-16     	; 0x9b8 <__stack+0xb9>
 9c8:	da 94       	dec	r13
 9ca:	f1 01       	movw	r30, r2
 9cc:	ed 0d       	add	r30, r13
 9ce:	f1 1d       	adc	r31, r1
 9d0:	80 81       	ld	r24, Z
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	b3 01       	movw	r22, r6
 9d6:	0e 94 17 05 	call	0xa2e	; 0xa2e <fputc>
 9da:	dd 20       	and	r13, r13
 9dc:	a9 f7       	brne	.-22     	; 0x9c8 <__stack+0xc9>
 9de:	06 c0       	rjmp	.+12     	; 0x9ec <__stack+0xed>
 9e0:	80 e2       	ldi	r24, 0x20	; 32
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	b3 01       	movw	r22, r6
 9e6:	0e 94 17 05 	call	0xa2e	; 0xa2e <fputc>
 9ea:	ea 94       	dec	r14
 9ec:	ee 20       	and	r14, r14
 9ee:	c1 f7       	brne	.-16     	; 0x9e0 <__stack+0xe1>
 9f0:	43 ce       	rjmp	.-890    	; 0x678 <vfprintf+0x30>
 9f2:	f3 01       	movw	r30, r6
 9f4:	66 81       	ldd	r22, Z+6	; 0x06
 9f6:	77 81       	ldd	r23, Z+7	; 0x07
 9f8:	cb 01       	movw	r24, r22
 9fa:	2b 96       	adiw	r28, 0x0b	; 11
 9fc:	e2 e1       	ldi	r30, 0x12	; 18
 9fe:	0c 94 bd 05 	jmp	0xb7a	; 0xb7a <__epilogue_restores__>

00000a02 <strnlen_P>:
 a02:	fc 01       	movw	r30, r24
 a04:	05 90       	lpm	r0, Z+
 a06:	61 50       	subi	r22, 0x01	; 1
 a08:	70 40       	sbci	r23, 0x00	; 0
 a0a:	01 10       	cpse	r0, r1
 a0c:	d8 f7       	brcc	.-10     	; 0xa04 <strnlen_P+0x2>
 a0e:	80 95       	com	r24
 a10:	90 95       	com	r25
 a12:	8e 0f       	add	r24, r30
 a14:	9f 1f       	adc	r25, r31
 a16:	08 95       	ret

00000a18 <strnlen>:
 a18:	fc 01       	movw	r30, r24
 a1a:	61 50       	subi	r22, 0x01	; 1
 a1c:	70 40       	sbci	r23, 0x00	; 0
 a1e:	01 90       	ld	r0, Z+
 a20:	01 10       	cpse	r0, r1
 a22:	d8 f7       	brcc	.-10     	; 0xa1a <strnlen+0x2>
 a24:	80 95       	com	r24
 a26:	90 95       	com	r25
 a28:	8e 0f       	add	r24, r30
 a2a:	9f 1f       	adc	r25, r31
 a2c:	08 95       	ret

00000a2e <fputc>:
 a2e:	0f 93       	push	r16
 a30:	1f 93       	push	r17
 a32:	cf 93       	push	r28
 a34:	df 93       	push	r29
 a36:	8c 01       	movw	r16, r24
 a38:	eb 01       	movw	r28, r22
 a3a:	8b 81       	ldd	r24, Y+3	; 0x03
 a3c:	81 ff       	sbrs	r24, 1
 a3e:	1b c0       	rjmp	.+54     	; 0xa76 <fputc+0x48>
 a40:	82 ff       	sbrs	r24, 2
 a42:	0d c0       	rjmp	.+26     	; 0xa5e <fputc+0x30>
 a44:	2e 81       	ldd	r18, Y+6	; 0x06
 a46:	3f 81       	ldd	r19, Y+7	; 0x07
 a48:	8c 81       	ldd	r24, Y+4	; 0x04
 a4a:	9d 81       	ldd	r25, Y+5	; 0x05
 a4c:	28 17       	cp	r18, r24
 a4e:	39 07       	cpc	r19, r25
 a50:	64 f4       	brge	.+24     	; 0xa6a <fputc+0x3c>
 a52:	e8 81       	ld	r30, Y
 a54:	f9 81       	ldd	r31, Y+1	; 0x01
 a56:	01 93       	st	Z+, r16
 a58:	f9 83       	std	Y+1, r31	; 0x01
 a5a:	e8 83       	st	Y, r30
 a5c:	06 c0       	rjmp	.+12     	; 0xa6a <fputc+0x3c>
 a5e:	e8 85       	ldd	r30, Y+8	; 0x08
 a60:	f9 85       	ldd	r31, Y+9	; 0x09
 a62:	80 2f       	mov	r24, r16
 a64:	09 95       	icall
 a66:	89 2b       	or	r24, r25
 a68:	31 f4       	brne	.+12     	; 0xa76 <fputc+0x48>
 a6a:	8e 81       	ldd	r24, Y+6	; 0x06
 a6c:	9f 81       	ldd	r25, Y+7	; 0x07
 a6e:	01 96       	adiw	r24, 0x01	; 1
 a70:	9f 83       	std	Y+7, r25	; 0x07
 a72:	8e 83       	std	Y+6, r24	; 0x06
 a74:	02 c0       	rjmp	.+4      	; 0xa7a <fputc+0x4c>
 a76:	0f ef       	ldi	r16, 0xFF	; 255
 a78:	1f ef       	ldi	r17, 0xFF	; 255
 a7a:	c8 01       	movw	r24, r16
 a7c:	df 91       	pop	r29
 a7e:	cf 91       	pop	r28
 a80:	1f 91       	pop	r17
 a82:	0f 91       	pop	r16
 a84:	08 95       	ret

00000a86 <__ultoa_invert>:
 a86:	fa 01       	movw	r30, r20
 a88:	aa 27       	eor	r26, r26
 a8a:	28 30       	cpi	r18, 0x08	; 8
 a8c:	51 f1       	breq	.+84     	; 0xae2 <__ultoa_invert+0x5c>
 a8e:	20 31       	cpi	r18, 0x10	; 16
 a90:	81 f1       	breq	.+96     	; 0xaf2 <__ultoa_invert+0x6c>
 a92:	e8 94       	clt
 a94:	6f 93       	push	r22
 a96:	6e 7f       	andi	r22, 0xFE	; 254
 a98:	6e 5f       	subi	r22, 0xFE	; 254
 a9a:	7f 4f       	sbci	r23, 0xFF	; 255
 a9c:	8f 4f       	sbci	r24, 0xFF	; 255
 a9e:	9f 4f       	sbci	r25, 0xFF	; 255
 aa0:	af 4f       	sbci	r26, 0xFF	; 255
 aa2:	b1 e0       	ldi	r27, 0x01	; 1
 aa4:	3e d0       	rcall	.+124    	; 0xb22 <__ultoa_invert+0x9c>
 aa6:	b4 e0       	ldi	r27, 0x04	; 4
 aa8:	3c d0       	rcall	.+120    	; 0xb22 <__ultoa_invert+0x9c>
 aaa:	67 0f       	add	r22, r23
 aac:	78 1f       	adc	r23, r24
 aae:	89 1f       	adc	r24, r25
 ab0:	9a 1f       	adc	r25, r26
 ab2:	a1 1d       	adc	r26, r1
 ab4:	68 0f       	add	r22, r24
 ab6:	79 1f       	adc	r23, r25
 ab8:	8a 1f       	adc	r24, r26
 aba:	91 1d       	adc	r25, r1
 abc:	a1 1d       	adc	r26, r1
 abe:	6a 0f       	add	r22, r26
 ac0:	71 1d       	adc	r23, r1
 ac2:	81 1d       	adc	r24, r1
 ac4:	91 1d       	adc	r25, r1
 ac6:	a1 1d       	adc	r26, r1
 ac8:	20 d0       	rcall	.+64     	; 0xb0a <__ultoa_invert+0x84>
 aca:	09 f4       	brne	.+2      	; 0xace <__ultoa_invert+0x48>
 acc:	68 94       	set
 ace:	3f 91       	pop	r19
 ad0:	2a e0       	ldi	r18, 0x0A	; 10
 ad2:	26 9f       	mul	r18, r22
 ad4:	11 24       	eor	r1, r1
 ad6:	30 19       	sub	r19, r0
 ad8:	30 5d       	subi	r19, 0xD0	; 208
 ada:	31 93       	st	Z+, r19
 adc:	de f6       	brtc	.-74     	; 0xa94 <__ultoa_invert+0xe>
 ade:	cf 01       	movw	r24, r30
 ae0:	08 95       	ret
 ae2:	46 2f       	mov	r20, r22
 ae4:	47 70       	andi	r20, 0x07	; 7
 ae6:	40 5d       	subi	r20, 0xD0	; 208
 ae8:	41 93       	st	Z+, r20
 aea:	b3 e0       	ldi	r27, 0x03	; 3
 aec:	0f d0       	rcall	.+30     	; 0xb0c <__ultoa_invert+0x86>
 aee:	c9 f7       	brne	.-14     	; 0xae2 <__ultoa_invert+0x5c>
 af0:	f6 cf       	rjmp	.-20     	; 0xade <__ultoa_invert+0x58>
 af2:	46 2f       	mov	r20, r22
 af4:	4f 70       	andi	r20, 0x0F	; 15
 af6:	40 5d       	subi	r20, 0xD0	; 208
 af8:	4a 33       	cpi	r20, 0x3A	; 58
 afa:	18 f0       	brcs	.+6      	; 0xb02 <__ultoa_invert+0x7c>
 afc:	49 5d       	subi	r20, 0xD9	; 217
 afe:	31 fd       	sbrc	r19, 1
 b00:	40 52       	subi	r20, 0x20	; 32
 b02:	41 93       	st	Z+, r20
 b04:	02 d0       	rcall	.+4      	; 0xb0a <__ultoa_invert+0x84>
 b06:	a9 f7       	brne	.-22     	; 0xaf2 <__ultoa_invert+0x6c>
 b08:	ea cf       	rjmp	.-44     	; 0xade <__ultoa_invert+0x58>
 b0a:	b4 e0       	ldi	r27, 0x04	; 4
 b0c:	a6 95       	lsr	r26
 b0e:	97 95       	ror	r25
 b10:	87 95       	ror	r24
 b12:	77 95       	ror	r23
 b14:	67 95       	ror	r22
 b16:	ba 95       	dec	r27
 b18:	c9 f7       	brne	.-14     	; 0xb0c <__ultoa_invert+0x86>
 b1a:	00 97       	sbiw	r24, 0x00	; 0
 b1c:	61 05       	cpc	r22, r1
 b1e:	71 05       	cpc	r23, r1
 b20:	08 95       	ret
 b22:	9b 01       	movw	r18, r22
 b24:	ac 01       	movw	r20, r24
 b26:	0a 2e       	mov	r0, r26
 b28:	06 94       	lsr	r0
 b2a:	57 95       	ror	r21
 b2c:	47 95       	ror	r20
 b2e:	37 95       	ror	r19
 b30:	27 95       	ror	r18
 b32:	ba 95       	dec	r27
 b34:	c9 f7       	brne	.-14     	; 0xb28 <__ultoa_invert+0xa2>
 b36:	62 0f       	add	r22, r18
 b38:	73 1f       	adc	r23, r19
 b3a:	84 1f       	adc	r24, r20
 b3c:	95 1f       	adc	r25, r21
 b3e:	a0 1d       	adc	r26, r0
 b40:	08 95       	ret

00000b42 <__prologue_saves__>:
 b42:	2f 92       	push	r2
 b44:	3f 92       	push	r3
 b46:	4f 92       	push	r4
 b48:	5f 92       	push	r5
 b4a:	6f 92       	push	r6
 b4c:	7f 92       	push	r7
 b4e:	8f 92       	push	r8
 b50:	9f 92       	push	r9
 b52:	af 92       	push	r10
 b54:	bf 92       	push	r11
 b56:	cf 92       	push	r12
 b58:	df 92       	push	r13
 b5a:	ef 92       	push	r14
 b5c:	ff 92       	push	r15
 b5e:	0f 93       	push	r16
 b60:	1f 93       	push	r17
 b62:	cf 93       	push	r28
 b64:	df 93       	push	r29
 b66:	cd b7       	in	r28, 0x3d	; 61
 b68:	de b7       	in	r29, 0x3e	; 62
 b6a:	ca 1b       	sub	r28, r26
 b6c:	db 0b       	sbc	r29, r27
 b6e:	0f b6       	in	r0, 0x3f	; 63
 b70:	f8 94       	cli
 b72:	de bf       	out	0x3e, r29	; 62
 b74:	0f be       	out	0x3f, r0	; 63
 b76:	cd bf       	out	0x3d, r28	; 61
 b78:	09 94       	ijmp

00000b7a <__epilogue_restores__>:
 b7a:	2a 88       	ldd	r2, Y+18	; 0x12
 b7c:	39 88       	ldd	r3, Y+17	; 0x11
 b7e:	48 88       	ldd	r4, Y+16	; 0x10
 b80:	5f 84       	ldd	r5, Y+15	; 0x0f
 b82:	6e 84       	ldd	r6, Y+14	; 0x0e
 b84:	7d 84       	ldd	r7, Y+13	; 0x0d
 b86:	8c 84       	ldd	r8, Y+12	; 0x0c
 b88:	9b 84       	ldd	r9, Y+11	; 0x0b
 b8a:	aa 84       	ldd	r10, Y+10	; 0x0a
 b8c:	b9 84       	ldd	r11, Y+9	; 0x09
 b8e:	c8 84       	ldd	r12, Y+8	; 0x08
 b90:	df 80       	ldd	r13, Y+7	; 0x07
 b92:	ee 80       	ldd	r14, Y+6	; 0x06
 b94:	fd 80       	ldd	r15, Y+5	; 0x05
 b96:	0c 81       	ldd	r16, Y+4	; 0x04
 b98:	1b 81       	ldd	r17, Y+3	; 0x03
 b9a:	aa 81       	ldd	r26, Y+2	; 0x02
 b9c:	b9 81       	ldd	r27, Y+1	; 0x01
 b9e:	ce 0f       	add	r28, r30
 ba0:	d1 1d       	adc	r29, r1
 ba2:	0f b6       	in	r0, 0x3f	; 63
 ba4:	f8 94       	cli
 ba6:	de bf       	out	0x3e, r29	; 62
 ba8:	0f be       	out	0x3f, r0	; 63
 baa:	cd bf       	out	0x3d, r28	; 61
 bac:	ed 01       	movw	r28, r26
 bae:	08 95       	ret

00000bb0 <_exit>:
 bb0:	f8 94       	cli

00000bb2 <__stop_program>:
 bb2:	ff cf       	rjmp	.-2      	; 0xbb2 <__stop_program>
