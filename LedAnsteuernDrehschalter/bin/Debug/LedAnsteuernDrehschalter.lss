
bin\Debug\LedAnsteuernDrehschalter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000022c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .fuse         00000003  00820000  00820000  000002a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  000002a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000004e  00000000  00000000  000002c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001a5  00000000  00000000  00000311  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000011c  00000000  00000000  000004b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001a6  00000000  00000000  000005d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  00000778  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000bf  00000000  00000000  000007b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 14 01 	jmp	0x228	; 0x228 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

void delay(uint32_t ms);
uint8_t get4bit();

int main(void)
{
  80:	0f 93       	push	r16
  82:	1f 93       	push	r17
  84:	df 93       	push	r29
  86:	cf 93       	push	r28
  88:	0f 92       	push	r0
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
    DDRD=0b00111100;
  8e:	ea e2       	ldi	r30, 0x2A	; 42
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	8c e3       	ldi	r24, 0x3C	; 60
  94:	80 83       	st	Z, r24
    DDRC=0b00000000;
  96:	e7 e2       	ldi	r30, 0x27	; 39
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	10 82       	st	Z, r1
    PORTC=0b00001111;
  9c:	e8 e2       	ldi	r30, 0x28	; 40
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	8f e0       	ldi	r24, 0x0F	; 15
  a2:	80 83       	st	Z, r24
    uint8_t led=0;
  a4:	19 82       	std	Y+1, r1	; 0x01
    while(1)
    {
        led=1<<((get4bit()%4)+2);
  a6:	0e 94 81 00 	call	0x102	; 0x102 <get4bit>
  aa:	88 2f       	mov	r24, r24
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	83 70       	andi	r24, 0x03	; 3
  b0:	90 70       	andi	r25, 0x00	; 0
  b2:	9c 01       	movw	r18, r24
  b4:	2e 5f       	subi	r18, 0xFE	; 254
  b6:	3f 4f       	sbci	r19, 0xFF	; 255
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	02 2e       	mov	r0, r18
  be:	02 c0       	rjmp	.+4      	; 0xc4 <main+0x44>
  c0:	88 0f       	add	r24, r24
  c2:	99 1f       	adc	r25, r25
  c4:	0a 94       	dec	r0
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <main+0x40>
  c8:	89 83       	std	Y+1, r24	; 0x01
        if(led!=PORTD)
  ca:	eb e2       	ldi	r30, 0x2B	; 43
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	90 81       	ld	r25, Z
  d0:	89 81       	ldd	r24, Y+1	; 0x01
  d2:	98 17       	cp	r25, r24
  d4:	41 f3       	breq	.-48     	; 0xa6 <main+0x26>
        {
            PORTD=1<<((get4bit()%4)+2);
  d6:	0b e2       	ldi	r16, 0x2B	; 43
  d8:	10 e0       	ldi	r17, 0x00	; 0
  da:	0e 94 81 00 	call	0x102	; 0x102 <get4bit>
  de:	88 2f       	mov	r24, r24
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	83 70       	andi	r24, 0x03	; 3
  e4:	90 70       	andi	r25, 0x00	; 0
  e6:	9c 01       	movw	r18, r24
  e8:	2e 5f       	subi	r18, 0xFE	; 254
  ea:	3f 4f       	sbci	r19, 0xFF	; 255
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	02 2e       	mov	r0, r18
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <main+0x78>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	0a 94       	dec	r0
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <main+0x74>
  fc:	f8 01       	movw	r30, r16
  fe:	80 83       	st	Z, r24
 100:	d2 cf       	rjmp	.-92     	; 0xa6 <main+0x26>

00000102 <get4bit>:
        }
    }
    return 0;
}
uint8_t get4bit()     //gibt Wert zwischen 0 und 15 zurück je nach Position des Schalters
{
 102:	df 93       	push	r29
 104:	cf 93       	push	r28
 106:	00 d0       	rcall	.+0      	; 0x108 <get4bit+0x6>
 108:	0f 92       	push	r0
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
    uint8_t schalter=0;
 10e:	1b 82       	std	Y+3, r1	; 0x03
    int i;
    for(i=0;i<4;i++)
 110:	1a 82       	std	Y+2, r1	; 0x02
 112:	19 82       	std	Y+1, r1	; 0x01
 114:	20 c0       	rjmp	.+64     	; 0x156 <get4bit+0x54>
    {
        if(!(PINC&1<<i))
 116:	e6 e2       	ldi	r30, 0x26	; 38
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	88 2f       	mov	r24, r24
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	09 80       	ldd	r0, Y+1	; 0x01
 122:	02 c0       	rjmp	.+4      	; 0x128 <get4bit+0x26>
 124:	95 95       	asr	r25
 126:	87 95       	ror	r24
 128:	0a 94       	dec	r0
 12a:	e2 f7       	brpl	.-8      	; 0x124 <get4bit+0x22>
 12c:	81 70       	andi	r24, 0x01	; 1
 12e:	90 70       	andi	r25, 0x00	; 0
 130:	00 97       	sbiw	r24, 0x00	; 0
 132:	61 f4       	brne	.+24     	; 0x14c <get4bit+0x4a>
            schalter+=1<<i;
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	09 80       	ldd	r0, Y+1	; 0x01
 13a:	02 c0       	rjmp	.+4      	; 0x140 <get4bit+0x3e>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	0a 94       	dec	r0
 142:	e2 f7       	brpl	.-8      	; 0x13c <get4bit+0x3a>
 144:	98 2f       	mov	r25, r24
 146:	8b 81       	ldd	r24, Y+3	; 0x03
 148:	89 0f       	add	r24, r25
 14a:	8b 83       	std	Y+3, r24	; 0x03
}
uint8_t get4bit()     //gibt Wert zwischen 0 und 15 zurück je nach Position des Schalters
{
    uint8_t schalter=0;
    int i;
    for(i=0;i<4;i++)
 14c:	89 81       	ldd	r24, Y+1	; 0x01
 14e:	9a 81       	ldd	r25, Y+2	; 0x02
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	9a 83       	std	Y+2, r25	; 0x02
 154:	89 83       	std	Y+1, r24	; 0x01
 156:	89 81       	ldd	r24, Y+1	; 0x01
 158:	9a 81       	ldd	r25, Y+2	; 0x02
 15a:	84 30       	cpi	r24, 0x04	; 4
 15c:	91 05       	cpc	r25, r1
 15e:	dc f2       	brlt	.-74     	; 0x116 <get4bit+0x14>
    {
        if(!(PINC&1<<i))
            schalter+=1<<i;
    }
    return schalter;
 160:	8b 81       	ldd	r24, Y+3	; 0x03
}
 162:	0f 90       	pop	r0
 164:	0f 90       	pop	r0
 166:	0f 90       	pop	r0
 168:	cf 91       	pop	r28
 16a:	df 91       	pop	r29
 16c:	08 95       	ret

0000016e <delay>:
void delay(uint32_t ms)
{
 16e:	df 93       	push	r29
 170:	cf 93       	push	r28
 172:	00 d0       	rcall	.+0      	; 0x174 <delay+0x6>
 174:	00 d0       	rcall	.+0      	; 0x176 <delay+0x8>
 176:	0f 92       	push	r0
 178:	cd b7       	in	r28, 0x3d	; 61
 17a:	de b7       	in	r29, 0x3e	; 62
 17c:	69 83       	std	Y+1, r22	; 0x01
 17e:	7a 83       	std	Y+2, r23	; 0x02
 180:	8b 83       	std	Y+3, r24	; 0x03
 182:	9c 83       	std	Y+4, r25	; 0x04
    ms*=371;
 184:	89 81       	ldd	r24, Y+1	; 0x01
 186:	9a 81       	ldd	r25, Y+2	; 0x02
 188:	ab 81       	ldd	r26, Y+3	; 0x03
 18a:	bc 81       	ldd	r27, Y+4	; 0x04
 18c:	23 e7       	ldi	r18, 0x73	; 115
 18e:	31 e0       	ldi	r19, 0x01	; 1
 190:	40 e0       	ldi	r20, 0x00	; 0
 192:	50 e0       	ldi	r21, 0x00	; 0
 194:	bc 01       	movw	r22, r24
 196:	cd 01       	movw	r24, r26
 198:	0e 94 f5 00 	call	0x1ea	; 0x1ea <__mulsi3>
 19c:	dc 01       	movw	r26, r24
 19e:	cb 01       	movw	r24, r22
 1a0:	89 83       	std	Y+1, r24	; 0x01
 1a2:	9a 83       	std	Y+2, r25	; 0x02
 1a4:	ab 83       	std	Y+3, r26	; 0x03
 1a6:	bc 83       	std	Y+4, r27	; 0x04
    while(ms--);
 1a8:	1d 82       	std	Y+5, r1	; 0x05
 1aa:	89 81       	ldd	r24, Y+1	; 0x01
 1ac:	9a 81       	ldd	r25, Y+2	; 0x02
 1ae:	ab 81       	ldd	r26, Y+3	; 0x03
 1b0:	bc 81       	ldd	r27, Y+4	; 0x04
 1b2:	00 97       	sbiw	r24, 0x00	; 0
 1b4:	a1 05       	cpc	r26, r1
 1b6:	b1 05       	cpc	r27, r1
 1b8:	11 f0       	breq	.+4      	; 0x1be <delay+0x50>
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	8d 83       	std	Y+5, r24	; 0x05
 1be:	89 81       	ldd	r24, Y+1	; 0x01
 1c0:	9a 81       	ldd	r25, Y+2	; 0x02
 1c2:	ab 81       	ldd	r26, Y+3	; 0x03
 1c4:	bc 81       	ldd	r27, Y+4	; 0x04
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	a1 09       	sbc	r26, r1
 1ca:	b1 09       	sbc	r27, r1
 1cc:	89 83       	std	Y+1, r24	; 0x01
 1ce:	9a 83       	std	Y+2, r25	; 0x02
 1d0:	ab 83       	std	Y+3, r26	; 0x03
 1d2:	bc 83       	std	Y+4, r27	; 0x04
 1d4:	8d 81       	ldd	r24, Y+5	; 0x05
 1d6:	88 23       	and	r24, r24
 1d8:	39 f7       	brne	.-50     	; 0x1a8 <delay+0x3a>
}
 1da:	0f 90       	pop	r0
 1dc:	0f 90       	pop	r0
 1de:	0f 90       	pop	r0
 1e0:	0f 90       	pop	r0
 1e2:	0f 90       	pop	r0
 1e4:	cf 91       	pop	r28
 1e6:	df 91       	pop	r29
 1e8:	08 95       	ret

000001ea <__mulsi3>:
 1ea:	62 9f       	mul	r22, r18
 1ec:	d0 01       	movw	r26, r0
 1ee:	73 9f       	mul	r23, r19
 1f0:	f0 01       	movw	r30, r0
 1f2:	82 9f       	mul	r24, r18
 1f4:	e0 0d       	add	r30, r0
 1f6:	f1 1d       	adc	r31, r1
 1f8:	64 9f       	mul	r22, r20
 1fa:	e0 0d       	add	r30, r0
 1fc:	f1 1d       	adc	r31, r1
 1fe:	92 9f       	mul	r25, r18
 200:	f0 0d       	add	r31, r0
 202:	83 9f       	mul	r24, r19
 204:	f0 0d       	add	r31, r0
 206:	74 9f       	mul	r23, r20
 208:	f0 0d       	add	r31, r0
 20a:	65 9f       	mul	r22, r21
 20c:	f0 0d       	add	r31, r0
 20e:	99 27       	eor	r25, r25
 210:	72 9f       	mul	r23, r18
 212:	b0 0d       	add	r27, r0
 214:	e1 1d       	adc	r30, r1
 216:	f9 1f       	adc	r31, r25
 218:	63 9f       	mul	r22, r19
 21a:	b0 0d       	add	r27, r0
 21c:	e1 1d       	adc	r30, r1
 21e:	f9 1f       	adc	r31, r25
 220:	bd 01       	movw	r22, r26
 222:	cf 01       	movw	r24, r30
 224:	11 24       	eor	r1, r1
 226:	08 95       	ret

00000228 <_exit>:
 228:	f8 94       	cli

0000022a <__stop_program>:
 22a:	ff cf       	rjmp	.-2      	; 0x22a <__stop_program>
