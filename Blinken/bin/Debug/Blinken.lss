
bin\Debug\Blinken.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .fuse         00000003  00820000  00820000  0000032c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  0000032f  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000004e  00000000  00000000  0000034f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001ae  00000000  00000000  0000039d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000011a  00000000  00000000  0000054b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001c6  00000000  00000000  00000665  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  0000082c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000bb  00000000  00000000  0000086c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
//#include <avr/delay.h>
#include <avr/io.h>
void delay(uint32_t ms);
void blinken(int PORTDdavor,int DDRDdavor,int oft,int pin);
int main(void)
{
  80:	df 93       	push	r29
  82:	cf 93       	push	r28
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
    DDRD=0b00010100;
  88:	ea e2       	ldi	r30, 0x2A	; 42
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	84 e1       	ldi	r24, 0x14	; 20
  8e:	80 83       	st	Z, r24
    PORTD=0b00010100;
  90:	eb e2       	ldi	r30, 0x2B	; 43
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	84 e1       	ldi	r24, 0x14	; 20
  96:	80 83       	st	Z, r24
    delay(1000);
  98:	68 ee       	ldi	r22, 0xE8	; 232
  9a:	73 e0       	ldi	r23, 0x03	; 3
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 fd 00 	call	0x1fa	; 0x1fa <delay>
    blinken(PORTD,DDRD,3,2);
  a4:	eb e2       	ldi	r30, 0x2B	; 43
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	48 2f       	mov	r20, r24
  ac:	50 e0       	ldi	r21, 0x00	; 0
  ae:	ea e2       	ldi	r30, 0x2A	; 42
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	28 2f       	mov	r18, r24
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	ca 01       	movw	r24, r20
  ba:	b9 01       	movw	r22, r18
  bc:	43 e0       	ldi	r20, 0x03	; 3
  be:	50 e0       	ldi	r21, 0x00	; 0
  c0:	22 e0       	ldi	r18, 0x02	; 2
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	0e 94 85 00 	call	0x10a	; 0x10a <blinken>
    PORTD=0b00010100;
  c8:	eb e2       	ldi	r30, 0x2B	; 43
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	84 e1       	ldi	r24, 0x14	; 20
  ce:	80 83       	st	Z, r24
    delay(1000);
  d0:	68 ee       	ldi	r22, 0xE8	; 232
  d2:	73 e0       	ldi	r23, 0x03	; 3
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 fd 00 	call	0x1fa	; 0x1fa <delay>
    blinken(PORTD,DDRD,3,1);
  dc:	eb e2       	ldi	r30, 0x2B	; 43
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	48 2f       	mov	r20, r24
  e4:	50 e0       	ldi	r21, 0x00	; 0
  e6:	ea e2       	ldi	r30, 0x2A	; 42
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	28 2f       	mov	r18, r24
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	ca 01       	movw	r24, r20
  f2:	b9 01       	movw	r22, r18
  f4:	43 e0       	ldi	r20, 0x03	; 3
  f6:	50 e0       	ldi	r21, 0x00	; 0
  f8:	21 e0       	ldi	r18, 0x01	; 1
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	0e 94 85 00 	call	0x10a	; 0x10a <blinken>
    PORTD=0b00010100;
 100:	eb e2       	ldi	r30, 0x2B	; 43
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	84 e1       	ldi	r24, 0x14	; 20
 106:	80 83       	st	Z, r24
 108:	ff cf       	rjmp	.-2      	; 0x108 <main+0x88>

0000010a <blinken>:
    ;

    return 0;
}
void blinken(int PORTDdavor,int DDRDdavor,int oft,int pin)
{
 10a:	df 93       	push	r29
 10c:	cf 93       	push	r28
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
 112:	2a 97       	sbiw	r28, 0x0a	; 10
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	f8 94       	cli
 118:	de bf       	out	0x3e, r29	; 62
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	cd bf       	out	0x3d, r28	; 61
 11e:	9c 83       	std	Y+4, r25	; 0x04
 120:	8b 83       	std	Y+3, r24	; 0x03
 122:	7e 83       	std	Y+6, r23	; 0x06
 124:	6d 83       	std	Y+5, r22	; 0x05
 126:	58 87       	std	Y+8, r21	; 0x08
 128:	4f 83       	std	Y+7, r20	; 0x07
 12a:	3a 87       	std	Y+10, r19	; 0x0a
 12c:	29 87       	std	Y+9, r18	; 0x09
    DDRD=1<<(pin+1);
 12e:	ea e2       	ldi	r30, 0x2A	; 42
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	89 85       	ldd	r24, Y+9	; 0x09
 134:	9a 85       	ldd	r25, Y+10	; 0x0a
 136:	9c 01       	movw	r18, r24
 138:	2f 5f       	subi	r18, 0xFF	; 255
 13a:	3f 4f       	sbci	r19, 0xFF	; 255
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	02 2e       	mov	r0, r18
 142:	02 c0       	rjmp	.+4      	; 0x148 <blinken+0x3e>
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	0a 94       	dec	r0
 14a:	e2 f7       	brpl	.-8      	; 0x144 <blinken+0x3a>
 14c:	80 83       	st	Z, r24
    int i;
    for(i=0;i<oft;i++)
 14e:	1a 82       	std	Y+2, r1	; 0x02
 150:	19 82       	std	Y+1, r1	; 0x01
 152:	3a c0       	rjmp	.+116    	; 0x1c8 <blinken+0xbe>
    {
        PORTD|=(1<<(pin+1));
 154:	ab e2       	ldi	r26, 0x2B	; 43
 156:	b0 e0       	ldi	r27, 0x00	; 0
 158:	eb e2       	ldi	r30, 0x2B	; 43
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	48 2f       	mov	r20, r24
 160:	89 85       	ldd	r24, Y+9	; 0x09
 162:	9a 85       	ldd	r25, Y+10	; 0x0a
 164:	9c 01       	movw	r18, r24
 166:	2f 5f       	subi	r18, 0xFF	; 255
 168:	3f 4f       	sbci	r19, 0xFF	; 255
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	02 c0       	rjmp	.+4      	; 0x174 <blinken+0x6a>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	2a 95       	dec	r18
 176:	e2 f7       	brpl	.-8      	; 0x170 <blinken+0x66>
 178:	84 2b       	or	r24, r20
 17a:	8c 93       	st	X, r24
        delay(500);
 17c:	64 ef       	ldi	r22, 0xF4	; 244
 17e:	71 e0       	ldi	r23, 0x01	; 1
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 fd 00 	call	0x1fa	; 0x1fa <delay>
        PORTD&=~(1<<(pin+1));
 188:	ab e2       	ldi	r26, 0x2B	; 43
 18a:	b0 e0       	ldi	r27, 0x00	; 0
 18c:	eb e2       	ldi	r30, 0x2B	; 43
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	48 2f       	mov	r20, r24
 194:	89 85       	ldd	r24, Y+9	; 0x09
 196:	9a 85       	ldd	r25, Y+10	; 0x0a
 198:	9c 01       	movw	r18, r24
 19a:	2f 5f       	subi	r18, 0xFF	; 255
 19c:	3f 4f       	sbci	r19, 0xFF	; 255
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <blinken+0x9e>
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	2a 95       	dec	r18
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <blinken+0x9a>
 1ac:	80 95       	com	r24
 1ae:	84 23       	and	r24, r20
 1b0:	8c 93       	st	X, r24
        delay(500);
 1b2:	64 ef       	ldi	r22, 0xF4	; 244
 1b4:	71 e0       	ldi	r23, 0x01	; 1
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 fd 00 	call	0x1fa	; 0x1fa <delay>
}
void blinken(int PORTDdavor,int DDRDdavor,int oft,int pin)
{
    DDRD=1<<(pin+1);
    int i;
    for(i=0;i<oft;i++)
 1be:	89 81       	ldd	r24, Y+1	; 0x01
 1c0:	9a 81       	ldd	r25, Y+2	; 0x02
 1c2:	01 96       	adiw	r24, 0x01	; 1
 1c4:	9a 83       	std	Y+2, r25	; 0x02
 1c6:	89 83       	std	Y+1, r24	; 0x01
 1c8:	29 81       	ldd	r18, Y+1	; 0x01
 1ca:	3a 81       	ldd	r19, Y+2	; 0x02
 1cc:	8f 81       	ldd	r24, Y+7	; 0x07
 1ce:	98 85       	ldd	r25, Y+8	; 0x08
 1d0:	28 17       	cp	r18, r24
 1d2:	39 07       	cpc	r19, r25
 1d4:	0c f4       	brge	.+2      	; 0x1d8 <blinken+0xce>
 1d6:	be cf       	rjmp	.-132    	; 0x154 <blinken+0x4a>
        PORTD|=(1<<(pin+1));
        delay(500);
        PORTD&=~(1<<(pin+1));
        delay(500);
    }
    DDRD=DDRDdavor;
 1d8:	ea e2       	ldi	r30, 0x2A	; 42
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	8d 81       	ldd	r24, Y+5	; 0x05
 1de:	80 83       	st	Z, r24
    PORTD=PORTDdavor;
 1e0:	eb e2       	ldi	r30, 0x2B	; 43
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	8b 81       	ldd	r24, Y+3	; 0x03
 1e6:	80 83       	st	Z, r24
}
 1e8:	2a 96       	adiw	r28, 0x0a	; 10
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	f8 94       	cli
 1ee:	de bf       	out	0x3e, r29	; 62
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	cd bf       	out	0x3d, r28	; 61
 1f4:	cf 91       	pop	r28
 1f6:	df 91       	pop	r29
 1f8:	08 95       	ret

000001fa <delay>:
void delay(uint32_t ms)
{
 1fa:	df 93       	push	r29
 1fc:	cf 93       	push	r28
 1fe:	00 d0       	rcall	.+0      	; 0x200 <delay+0x6>
 200:	00 d0       	rcall	.+0      	; 0x202 <delay+0x8>
 202:	0f 92       	push	r0
 204:	cd b7       	in	r28, 0x3d	; 61
 206:	de b7       	in	r29, 0x3e	; 62
 208:	69 83       	std	Y+1, r22	; 0x01
 20a:	7a 83       	std	Y+2, r23	; 0x02
 20c:	8b 83       	std	Y+3, r24	; 0x03
 20e:	9c 83       	std	Y+4, r25	; 0x04
    ms*=382;
 210:	89 81       	ldd	r24, Y+1	; 0x01
 212:	9a 81       	ldd	r25, Y+2	; 0x02
 214:	ab 81       	ldd	r26, Y+3	; 0x03
 216:	bc 81       	ldd	r27, Y+4	; 0x04
 218:	2e e7       	ldi	r18, 0x7E	; 126
 21a:	31 e0       	ldi	r19, 0x01	; 1
 21c:	40 e0       	ldi	r20, 0x00	; 0
 21e:	50 e0       	ldi	r21, 0x00	; 0
 220:	bc 01       	movw	r22, r24
 222:	cd 01       	movw	r24, r26
 224:	0e 94 3b 01 	call	0x276	; 0x276 <__mulsi3>
 228:	dc 01       	movw	r26, r24
 22a:	cb 01       	movw	r24, r22
 22c:	89 83       	std	Y+1, r24	; 0x01
 22e:	9a 83       	std	Y+2, r25	; 0x02
 230:	ab 83       	std	Y+3, r26	; 0x03
 232:	bc 83       	std	Y+4, r27	; 0x04
    while(ms--);
 234:	1d 82       	std	Y+5, r1	; 0x05
 236:	89 81       	ldd	r24, Y+1	; 0x01
 238:	9a 81       	ldd	r25, Y+2	; 0x02
 23a:	ab 81       	ldd	r26, Y+3	; 0x03
 23c:	bc 81       	ldd	r27, Y+4	; 0x04
 23e:	00 97       	sbiw	r24, 0x00	; 0
 240:	a1 05       	cpc	r26, r1
 242:	b1 05       	cpc	r27, r1
 244:	11 f0       	breq	.+4      	; 0x24a <delay+0x50>
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	8d 83       	std	Y+5, r24	; 0x05
 24a:	89 81       	ldd	r24, Y+1	; 0x01
 24c:	9a 81       	ldd	r25, Y+2	; 0x02
 24e:	ab 81       	ldd	r26, Y+3	; 0x03
 250:	bc 81       	ldd	r27, Y+4	; 0x04
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	a1 09       	sbc	r26, r1
 256:	b1 09       	sbc	r27, r1
 258:	89 83       	std	Y+1, r24	; 0x01
 25a:	9a 83       	std	Y+2, r25	; 0x02
 25c:	ab 83       	std	Y+3, r26	; 0x03
 25e:	bc 83       	std	Y+4, r27	; 0x04
 260:	8d 81       	ldd	r24, Y+5	; 0x05
 262:	88 23       	and	r24, r24
 264:	39 f7       	brne	.-50     	; 0x234 <delay+0x3a>
}
 266:	0f 90       	pop	r0
 268:	0f 90       	pop	r0
 26a:	0f 90       	pop	r0
 26c:	0f 90       	pop	r0
 26e:	0f 90       	pop	r0
 270:	cf 91       	pop	r28
 272:	df 91       	pop	r29
 274:	08 95       	ret

00000276 <__mulsi3>:
 276:	62 9f       	mul	r22, r18
 278:	d0 01       	movw	r26, r0
 27a:	73 9f       	mul	r23, r19
 27c:	f0 01       	movw	r30, r0
 27e:	82 9f       	mul	r24, r18
 280:	e0 0d       	add	r30, r0
 282:	f1 1d       	adc	r31, r1
 284:	64 9f       	mul	r22, r20
 286:	e0 0d       	add	r30, r0
 288:	f1 1d       	adc	r31, r1
 28a:	92 9f       	mul	r25, r18
 28c:	f0 0d       	add	r31, r0
 28e:	83 9f       	mul	r24, r19
 290:	f0 0d       	add	r31, r0
 292:	74 9f       	mul	r23, r20
 294:	f0 0d       	add	r31, r0
 296:	65 9f       	mul	r22, r21
 298:	f0 0d       	add	r31, r0
 29a:	99 27       	eor	r25, r25
 29c:	72 9f       	mul	r23, r18
 29e:	b0 0d       	add	r27, r0
 2a0:	e1 1d       	adc	r30, r1
 2a2:	f9 1f       	adc	r31, r25
 2a4:	63 9f       	mul	r22, r19
 2a6:	b0 0d       	add	r27, r0
 2a8:	e1 1d       	adc	r30, r1
 2aa:	f9 1f       	adc	r31, r25
 2ac:	bd 01       	movw	r22, r26
 2ae:	cf 01       	movw	r24, r30
 2b0:	11 24       	eor	r1, r1
 2b2:	08 95       	ret

000002b4 <_exit>:
 2b4:	f8 94       	cli

000002b6 <__stop_program>:
 2b6:	ff cf       	rjmp	.-2      	; 0x2b6 <__stop_program>
