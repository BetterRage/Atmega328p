
bin\Debug\TestHeader.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000006bc  00000750  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .fuse         00000003  00820000  00820000  00000750  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .comment      00000012  00000000  00000000  00000753  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000768  2**2
                  CONTENTS, READONLY, OCTETS
  5 .debug_aranges 00000080  00000000  00000000  000007a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_pubnames 0000001d  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   0000092f  00000000  00000000  00000845  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00000769  00000000  00000000  00001174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   000005a7  00000000  00000000  000018dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  000000b4  00000000  00000000  00001e84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    0000040a  00000000  00000000  00001f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 31 01 	call	0x262	; 0x262 <main>
  78:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <delay>:
#ifndef MYDELAY_H_INCLUDED
#define MYDELAY_H_INCLUDED
#include <avr/io.h>

void delay(uint32_t ms)
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
  88:	28 97       	sbiw	r28, 0x08	; 8
  8a:	0f b6       	in	r0, 0x3f	; 63
  8c:	f8 94       	cli
  8e:	de bf       	out	0x3e, r29	; 62
  90:	0f be       	out	0x3f, r0	; 63
  92:	cd bf       	out	0x3d, r28	; 61
  94:	69 83       	std	Y+1, r22	; 0x01
  96:	7a 83       	std	Y+2, r23	; 0x02
  98:	8b 83       	std	Y+3, r24	; 0x03
  9a:	9c 83       	std	Y+4, r25	; 0x04
    ms*=371;
  9c:	49 81       	ldd	r20, Y+1	; 0x01
  9e:	5a 81       	ldd	r21, Y+2	; 0x02
  a0:	6b 81       	ldd	r22, Y+3	; 0x03
  a2:	7c 81       	ldd	r23, Y+4	; 0x04
  a4:	83 e7       	ldi	r24, 0x73	; 115
  a6:	91 e0       	ldi	r25, 0x01	; 1
  a8:	dc 01       	movw	r26, r24
  aa:	9a 01       	movw	r18, r20
  ac:	ab 01       	movw	r20, r22
  ae:	0e 94 27 02 	call	0x44e	; 0x44e <__muluhisi3>
  b2:	6d 83       	std	Y+5, r22	; 0x05
  b4:	7e 83       	std	Y+6, r23	; 0x06
  b6:	8f 83       	std	Y+7, r24	; 0x07
  b8:	98 87       	std	Y+8, r25	; 0x08
  ba:	8d 81       	ldd	r24, Y+5	; 0x05
  bc:	9e 81       	ldd	r25, Y+6	; 0x06
  be:	af 81       	ldd	r26, Y+7	; 0x07
  c0:	b8 85       	ldd	r27, Y+8	; 0x08
  c2:	89 83       	std	Y+1, r24	; 0x01
  c4:	9a 83       	std	Y+2, r25	; 0x02
  c6:	ab 83       	std	Y+3, r26	; 0x03
  c8:	bc 83       	std	Y+4, r27	; 0x04
    while(ms--);
  ca:	00 00       	nop
  cc:	89 81       	ldd	r24, Y+1	; 0x01
  ce:	9a 81       	ldd	r25, Y+2	; 0x02
  d0:	ab 81       	ldd	r26, Y+3	; 0x03
  d2:	bc 81       	ldd	r27, Y+4	; 0x04
  d4:	ac 01       	movw	r20, r24
  d6:	bd 01       	movw	r22, r26
  d8:	41 50       	subi	r20, 0x01	; 1
  da:	51 09       	sbc	r21, r1
  dc:	61 09       	sbc	r22, r1
  de:	71 09       	sbc	r23, r1
  e0:	49 83       	std	Y+1, r20	; 0x01
  e2:	5a 83       	std	Y+2, r21	; 0x02
  e4:	6b 83       	std	Y+3, r22	; 0x03
  e6:	7c 83       	std	Y+4, r23	; 0x04
  e8:	89 2b       	or	r24, r25
  ea:	8a 2b       	or	r24, r26
  ec:	8b 2b       	or	r24, r27
  ee:	71 f7       	brne	.-36     	; 0xcc <delay+0x4c>
}
  f0:	00 00       	nop
  f2:	00 00       	nop
  f4:	28 96       	adiw	r28, 0x08	; 8
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	f8 94       	cli
  fa:	de bf       	out	0x3e, r29	; 62
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	cd bf       	out	0x3d, r28	; 61
 100:	df 91       	pop	r29
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <pinlesen>:
#ifndef PINAUSLESEN_H_INCLUDED
#define PINAUSLESEN_H_INCLUDED
#include <avr/io.h>
uint8_t pinlesen(uint8_t pin)
{
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	0f 92       	push	r0
 10c:	cd b7       	in	r28, 0x3d	; 61
 10e:	de b7       	in	r29, 0x3e	; 62
 110:	89 83       	std	Y+1, r24	; 0x01
    if(!(PINC&1<<pin))
 112:	86 e2       	ldi	r24, 0x26	; 38
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	fc 01       	movw	r30, r24
 118:	80 81       	ld	r24, Z
 11a:	88 2f       	mov	r24, r24
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	29 81       	ldd	r18, Y+1	; 0x01
 120:	22 2f       	mov	r18, r18
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <pinlesen+0x24>
 126:	95 95       	asr	r25
 128:	87 95       	ror	r24
 12a:	2a 95       	dec	r18
 12c:	e2 f7       	brpl	.-8      	; 0x126 <pinlesen+0x20>
 12e:	81 70       	andi	r24, 0x01	; 1
 130:	99 27       	eor	r25, r25
 132:	89 2b       	or	r24, r25
 134:	11 f4       	brne	.+4      	; 0x13a <pinlesen+0x34>
       return 1;
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	01 c0       	rjmp	.+2      	; 0x13c <pinlesen+0x36>
    else
        return 0;
 13a:	80 e0       	ldi	r24, 0x00	; 0
}
 13c:	0f 90       	pop	r0
 13e:	df 91       	pop	r29
 140:	cf 91       	pop	r28
 142:	08 95       	ret

00000144 <analoglesen8>:
uint8_t analoglesen8(uint8_t pin)
{
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	0f 92       	push	r0
 14a:	cd b7       	in	r28, 0x3d	; 61
 14c:	de b7       	in	r29, 0x3e	; 62
 14e:	89 83       	std	Y+1, r24	; 0x01
    ADCSRA|=0x07;
 150:	8a e7       	ldi	r24, 0x7A	; 122
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	fc 01       	movw	r30, r24
 156:	20 81       	ld	r18, Z
 158:	8a e7       	ldi	r24, 0x7A	; 122
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	27 60       	ori	r18, 0x07	; 7
 15e:	fc 01       	movw	r30, r24
 160:	20 83       	st	Z, r18
    ADCSRA|=(1<<ADEN);
 162:	8a e7       	ldi	r24, 0x7A	; 122
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	fc 01       	movw	r30, r24
 168:	20 81       	ld	r18, Z
 16a:	8a e7       	ldi	r24, 0x7A	; 122
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	20 68       	ori	r18, 0x80	; 128
 170:	fc 01       	movw	r30, r24
 172:	20 83       	st	Z, r18
    ADMUX|=0x60;
 174:	8c e7       	ldi	r24, 0x7C	; 124
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	fc 01       	movw	r30, r24
 17a:	20 81       	ld	r18, Z
 17c:	8c e7       	ldi	r24, 0x7C	; 124
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	20 66       	ori	r18, 0x60	; 96
 182:	fc 01       	movw	r30, r24
 184:	20 83       	st	Z, r18
    ADMUX|=pin;
 186:	8c e7       	ldi	r24, 0x7C	; 124
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	fc 01       	movw	r30, r24
 18c:	30 81       	ld	r19, Z
 18e:	8c e7       	ldi	r24, 0x7C	; 124
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	29 81       	ldd	r18, Y+1	; 0x01
 194:	23 2b       	or	r18, r19
 196:	fc 01       	movw	r30, r24
 198:	20 83       	st	Z, r18
    ADCSRA|=(1<<ADSC);
 19a:	8a e7       	ldi	r24, 0x7A	; 122
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	fc 01       	movw	r30, r24
 1a0:	20 81       	ld	r18, Z
 1a2:	8a e7       	ldi	r24, 0x7A	; 122
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	20 64       	ori	r18, 0x40	; 64
 1a8:	fc 01       	movw	r30, r24
 1aa:	20 83       	st	Z, r18
    while(ADCSRA&(1<<ADSC));
 1ac:	00 00       	nop
 1ae:	8a e7       	ldi	r24, 0x7A	; 122
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	fc 01       	movw	r30, r24
 1b4:	80 81       	ld	r24, Z
 1b6:	88 2f       	mov	r24, r24
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	80 74       	andi	r24, 0x40	; 64
 1bc:	99 27       	eor	r25, r25
 1be:	89 2b       	or	r24, r25
 1c0:	b1 f7       	brne	.-20     	; 0x1ae <analoglesen8+0x6a>
    return ADCH;
 1c2:	89 e7       	ldi	r24, 0x79	; 121
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	fc 01       	movw	r30, r24
 1c8:	80 81       	ld	r24, Z
}
 1ca:	0f 90       	pop	r0
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	08 95       	ret

000001d2 <analoglesen16>:
uint16_t analoglesen16(uint8_t pin)
{
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	0f 92       	push	r0
 1d8:	cd b7       	in	r28, 0x3d	; 61
 1da:	de b7       	in	r29, 0x3e	; 62
 1dc:	89 83       	std	Y+1, r24	; 0x01
    ADCSRA|=0x07;
 1de:	8a e7       	ldi	r24, 0x7A	; 122
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	fc 01       	movw	r30, r24
 1e4:	20 81       	ld	r18, Z
 1e6:	8a e7       	ldi	r24, 0x7A	; 122
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	27 60       	ori	r18, 0x07	; 7
 1ec:	fc 01       	movw	r30, r24
 1ee:	20 83       	st	Z, r18
    ADCSRA|=(1<<ADEN);
 1f0:	8a e7       	ldi	r24, 0x7A	; 122
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	fc 01       	movw	r30, r24
 1f6:	20 81       	ld	r18, Z
 1f8:	8a e7       	ldi	r24, 0x7A	; 122
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	20 68       	ori	r18, 0x80	; 128
 1fe:	fc 01       	movw	r30, r24
 200:	20 83       	st	Z, r18
    ADMUX|=0x40;
 202:	8c e7       	ldi	r24, 0x7C	; 124
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	fc 01       	movw	r30, r24
 208:	20 81       	ld	r18, Z
 20a:	8c e7       	ldi	r24, 0x7C	; 124
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	20 64       	ori	r18, 0x40	; 64
 210:	fc 01       	movw	r30, r24
 212:	20 83       	st	Z, r18
    ADMUX|=pin;
 214:	8c e7       	ldi	r24, 0x7C	; 124
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	fc 01       	movw	r30, r24
 21a:	30 81       	ld	r19, Z
 21c:	8c e7       	ldi	r24, 0x7C	; 124
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	29 81       	ldd	r18, Y+1	; 0x01
 222:	23 2b       	or	r18, r19
 224:	fc 01       	movw	r30, r24
 226:	20 83       	st	Z, r18
    ADCSRA|=(1<<ADSC);
 228:	8a e7       	ldi	r24, 0x7A	; 122
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	fc 01       	movw	r30, r24
 22e:	20 81       	ld	r18, Z
 230:	8a e7       	ldi	r24, 0x7A	; 122
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	20 64       	ori	r18, 0x40	; 64
 236:	fc 01       	movw	r30, r24
 238:	20 83       	st	Z, r18
    while(ADCSRA&(1<<ADSC));
 23a:	00 00       	nop
 23c:	8a e7       	ldi	r24, 0x7A	; 122
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	fc 01       	movw	r30, r24
 242:	80 81       	ld	r24, Z
 244:	88 2f       	mov	r24, r24
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	80 74       	andi	r24, 0x40	; 64
 24a:	99 27       	eor	r25, r25
 24c:	89 2b       	or	r24, r25
 24e:	b1 f7       	brne	.-20     	; 0x23c <analoglesen16+0x6a>
    return ADC;
 250:	88 e7       	ldi	r24, 0x78	; 120
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	fc 01       	movw	r30, r24
 256:	80 81       	ld	r24, Z
 258:	91 81       	ldd	r25, Z+1	; 0x01
}
 25a:	0f 90       	pop	r0
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	08 95       	ret

00000262 <main>:
#include "../HeaderFunktionen/pinauslesen.h"
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	cd b7       	in	r28, 0x3d	; 61
 268:	de b7       	in	r29, 0x3e	; 62
 26a:	a5 97       	sbiw	r28, 0x25	; 37
 26c:	0f b6       	in	r0, 0x3f	; 63
 26e:	f8 94       	cli
 270:	de bf       	out	0x3e, r29	; 62
 272:	0f be       	out	0x3f, r0	; 63
 274:	cd bf       	out	0x3d, r28	; 61

    DDRB|=(1<<1);
 276:	84 e2       	ldi	r24, 0x24	; 36
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	dc 01       	movw	r26, r24
 27c:	2c 91       	ld	r18, X
 27e:	84 e2       	ldi	r24, 0x24	; 36
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	22 60       	ori	r18, 0x02	; 2
 284:	fc 01       	movw	r30, r24
 286:	20 83       	st	Z, r18
    DDRC&=~1;
 288:	87 e2       	ldi	r24, 0x27	; 39
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	dc 01       	movw	r26, r24
 28e:	2c 91       	ld	r18, X
 290:	87 e2       	ldi	r24, 0x27	; 39
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	2e 7f       	andi	r18, 0xFE	; 254
 296:	fc 01       	movw	r30, r24
 298:	20 83       	st	Z, r18
    PORTC|=1;
 29a:	88 e2       	ldi	r24, 0x28	; 40
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	dc 01       	movw	r26, r24
 2a0:	2c 91       	ld	r18, X
 2a2:	88 e2       	ldi	r24, 0x28	; 40
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	21 60       	ori	r18, 0x01	; 1
 2a8:	fc 01       	movw	r30, r24
 2aa:	20 83       	st	Z, r18
    uint8_t tasterjetzt=0;
 2ac:	1b 82       	std	Y+3, r1	; 0x03
    uint8_t tasterdavor=1;
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	89 83       	std	Y+1, r24	; 0x01
    uint8_t puls=0;
 2b2:	1a 82       	std	Y+2, r1	; 0x02
    TCCR1B|=(1<<3);
 2b4:	81 e8       	ldi	r24, 0x81	; 129
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	dc 01       	movw	r26, r24
 2ba:	2c 91       	ld	r18, X
 2bc:	81 e8       	ldi	r24, 0x81	; 129
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	28 60       	ori	r18, 0x08	; 8
 2c2:	fc 01       	movw	r30, r24
 2c4:	20 83       	st	Z, r18
    OCR1A=1500;
 2c6:	88 e8       	ldi	r24, 0x88	; 136
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	2c ed       	ldi	r18, 0xDC	; 220
 2cc:	35 e0       	ldi	r19, 0x05	; 5
 2ce:	dc 01       	movw	r26, r24
 2d0:	11 96       	adiw	r26, 0x01	; 1
 2d2:	3c 93       	st	X, r19
 2d4:	2e 93       	st	-X, r18
    TCCR1A=0b01000000;
 2d6:	80 e8       	ldi	r24, 0x80	; 128
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	20 e4       	ldi	r18, 0x40	; 64
 2dc:	fc 01       	movw	r30, r24
 2de:	20 83       	st	Z, r18

    while(1)
    {

        tasterjetzt=pinlesen(0);
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	0e 94 83 00 	call	0x106	; 0x106 <pinlesen>
 2e6:	8b 83       	std	Y+3, r24	; 0x03
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	a0 ea       	ldi	r26, 0xA0	; 160
 2ee:	b0 e4       	ldi	r27, 0x40	; 64
 2f0:	8c 83       	std	Y+4, r24	; 0x04
 2f2:	9d 83       	std	Y+5, r25	; 0x05
 2f4:	ae 83       	std	Y+6, r26	; 0x06
 2f6:	bf 83       	std	Y+7, r27	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 2f8:	20 e0       	ldi	r18, 0x00	; 0
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	4a e7       	ldi	r20, 0x7A	; 122
 2fe:	55 e4       	ldi	r21, 0x45	; 69
 300:	6c 81       	ldd	r22, Y+4	; 0x04
 302:	7d 81       	ldd	r23, Y+5	; 0x05
 304:	8e 81       	ldd	r24, Y+6	; 0x06
 306:	9f 81       	ldd	r25, Y+7	; 0x07
 308:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
 30c:	6e 8b       	std	Y+22, r22	; 0x16
 30e:	7f 8b       	std	Y+23, r23	; 0x17
 310:	88 8f       	std	Y+24, r24	; 0x18
 312:	99 8f       	std	Y+25, r25	; 0x19
 314:	8e 89       	ldd	r24, Y+22	; 0x16
 316:	9f 89       	ldd	r25, Y+23	; 0x17
 318:	a8 8d       	ldd	r26, Y+24	; 0x18
 31a:	b9 8d       	ldd	r27, Y+25	; 0x19
 31c:	88 87       	std	Y+8, r24	; 0x08
 31e:	99 87       	std	Y+9, r25	; 0x09
 320:	aa 87       	std	Y+10, r26	; 0x0a
 322:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
 324:	20 e0       	ldi	r18, 0x00	; 0
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	40 e8       	ldi	r20, 0x80	; 128
 32a:	5f e3       	ldi	r21, 0x3F	; 63
 32c:	68 85       	ldd	r22, Y+8	; 0x08
 32e:	79 85       	ldd	r23, Y+9	; 0x09
 330:	8a 85       	ldd	r24, Y+10	; 0x0a
 332:	9b 85       	ldd	r25, Y+11	; 0x0b
 334:	0e 94 41 02 	call	0x482	; 0x482 <__cmpsf2>
 338:	88 23       	and	r24, r24
 33a:	2c f4       	brge	.+10     	; 0x346 <main+0xe4>
		__ticks = 1;
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	9d 87       	std	Y+13, r25	; 0x0d
 342:	8c 87       	std	Y+12, r24	; 0x0c
 344:	54 c0       	rjmp	.+168    	; 0x3ee <main+0x18c>
	else if (__tmp > 65535)
 346:	20 e0       	ldi	r18, 0x00	; 0
 348:	3f ef       	ldi	r19, 0xFF	; 255
 34a:	4f e7       	ldi	r20, 0x7F	; 127
 34c:	57 e4       	ldi	r21, 0x47	; 71
 34e:	68 85       	ldd	r22, Y+8	; 0x08
 350:	79 85       	ldd	r23, Y+9	; 0x09
 352:	8a 85       	ldd	r24, Y+10	; 0x0a
 354:	9b 85       	ldd	r25, Y+11	; 0x0b
 356:	0e 94 c2 02 	call	0x584	; 0x584 <__gesf2>
 35a:	18 16       	cp	r1, r24
 35c:	d4 f5       	brge	.+116    	; 0x3d2 <main+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 35e:	20 e0       	ldi	r18, 0x00	; 0
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	40 e2       	ldi	r20, 0x20	; 32
 364:	51 e4       	ldi	r21, 0x41	; 65
 366:	6c 81       	ldd	r22, Y+4	; 0x04
 368:	7d 81       	ldd	r23, Y+5	; 0x05
 36a:	8e 81       	ldd	r24, Y+6	; 0x06
 36c:	9f 81       	ldd	r25, Y+7	; 0x07
 36e:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
 372:	6a 8f       	std	Y+26, r22	; 0x1a
 374:	7b 8f       	std	Y+27, r23	; 0x1b
 376:	8c 8f       	std	Y+28, r24	; 0x1c
 378:	9d 8f       	std	Y+29, r25	; 0x1d
 37a:	8a 8d       	ldd	r24, Y+26	; 0x1a
 37c:	9b 8d       	ldd	r25, Y+27	; 0x1b
 37e:	ac 8d       	ldd	r26, Y+28	; 0x1c
 380:	bd 8d       	ldd	r27, Y+29	; 0x1d
 382:	8a 8b       	std	Y+18, r24	; 0x12
 384:	9b 8b       	std	Y+19, r25	; 0x13
 386:	ac 8b       	std	Y+20, r26	; 0x14
 388:	bd 8b       	std	Y+21, r27	; 0x15
 38a:	6a 89       	ldd	r22, Y+18	; 0x12
 38c:	7b 89       	ldd	r23, Y+19	; 0x13
 38e:	8c 89       	ldd	r24, Y+20	; 0x14
 390:	9d 89       	ldd	r25, Y+21	; 0x15
 392:	0e 94 46 02 	call	0x48c	; 0x48c <__fixunssfsi>
 396:	6e 8f       	std	Y+30, r22	; 0x1e
 398:	7f 8f       	std	Y+31, r23	; 0x1f
 39a:	88 a3       	std	Y+32, r24	; 0x20
 39c:	99 a3       	std	Y+33, r25	; 0x21
 39e:	ae 8d       	ldd	r26, Y+30	; 0x1e
 3a0:	bf 8d       	ldd	r27, Y+31	; 0x1f
 3a2:	bd 87       	std	Y+13, r27	; 0x0d
 3a4:	ac 87       	std	Y+12, r26	; 0x0c
		while(__ticks)
 3a6:	10 c0       	rjmp	.+32     	; 0x3c8 <main+0x166>
 3a8:	80 e9       	ldi	r24, 0x90	; 144
 3aa:	91 e0       	ldi	r25, 0x01	; 1
 3ac:	9f 87       	std	Y+15, r25	; 0x0f
 3ae:	8e 87       	std	Y+14, r24	; 0x0e
		"sbc %B0,__zero_reg__"    "\n\t"
		"brne 1b"
		: "+d" (__count)
	);
#else
	__asm__ volatile (
 3b0:	8e 85       	ldd	r24, Y+14	; 0x0e
 3b2:	9f 85       	ldd	r25, Y+15	; 0x0f
 3b4:	01 97       	sbiw	r24, 0x01	; 1
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <main+0x152>
 3b8:	9f 87       	std	Y+15, r25	; 0x0f
 3ba:	8e 87       	std	Y+14, r24	; 0x0e
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
#endif /* __AVR_TINY__ */
}
 3bc:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3be:	8c 85       	ldd	r24, Y+12	; 0x0c
 3c0:	9d 85       	ldd	r25, Y+13	; 0x0d
 3c2:	01 97       	sbiw	r24, 0x01	; 1
 3c4:	9d 87       	std	Y+13, r25	; 0x0d
 3c6:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
 3c8:	8c 85       	ldd	r24, Y+12	; 0x0c
 3ca:	9d 85       	ldd	r25, Y+13	; 0x0d
 3cc:	89 2b       	or	r24, r25
 3ce:	61 f7       	brne	.-40     	; 0x3a8 <main+0x146>
		}
		return;
 3d0:	19 c0       	rjmp	.+50     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	}
	else
		__ticks = (uint16_t)__tmp;
 3d2:	68 85       	ldd	r22, Y+8	; 0x08
 3d4:	79 85       	ldd	r23, Y+9	; 0x09
 3d6:	8a 85       	ldd	r24, Y+10	; 0x0a
 3d8:	9b 85       	ldd	r25, Y+11	; 0x0b
 3da:	0e 94 46 02 	call	0x48c	; 0x48c <__fixunssfsi>
 3de:	6a a3       	std	Y+34, r22	; 0x22
 3e0:	7b a3       	std	Y+35, r23	; 0x23
 3e2:	8c a3       	std	Y+36, r24	; 0x24
 3e4:	9d a3       	std	Y+37, r25	; 0x25
 3e6:	ea a1       	ldd	r30, Y+34	; 0x22
 3e8:	fb a1       	ldd	r31, Y+35	; 0x23
 3ea:	fd 87       	std	Y+13, r31	; 0x0d
 3ec:	ec 87       	std	Y+12, r30	; 0x0c
 3ee:	8c 85       	ldd	r24, Y+12	; 0x0c
 3f0:	9d 85       	ldd	r25, Y+13	; 0x0d
 3f2:	99 8b       	std	Y+17, r25	; 0x11
 3f4:	88 8b       	std	Y+16, r24	; 0x10
	__asm__ volatile (
 3f6:	88 89       	ldd	r24, Y+16	; 0x10
 3f8:	99 89       	ldd	r25, Y+17	; 0x11
 3fa:	01 97       	sbiw	r24, 0x01	; 1
 3fc:	f1 f7       	brne	.-4      	; 0x3fa <main+0x198>
 3fe:	99 8b       	std	Y+17, r25	; 0x11
 400:	88 8b       	std	Y+16, r24	; 0x10
}
 402:	00 00       	nop
        _delay_ms(5);
        if(tasterjetzt&&!tasterdavor)
 404:	8b 81       	ldd	r24, Y+3	; 0x03
 406:	88 23       	and	r24, r24
 408:	f9 f0       	breq	.+62     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 40a:	89 81       	ldd	r24, Y+1	; 0x01
 40c:	88 23       	and	r24, r24
 40e:	e1 f4       	brne	.+56     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
        {
            if(puls==1)
 410:	8a 81       	ldd	r24, Y+2	; 0x02
 412:	81 30       	cpi	r24, 0x01	; 1
 414:	49 f4       	brne	.+18     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
                TCCR1B|=0b101;
 416:	81 e8       	ldi	r24, 0x81	; 129
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	dc 01       	movw	r26, r24
 41c:	2c 91       	ld	r18, X
 41e:	81 e8       	ldi	r24, 0x81	; 129
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	25 60       	ori	r18, 0x05	; 5
 424:	fc 01       	movw	r30, r24
 426:	20 83       	st	Z, r18

            if(puls==0)
 428:	8a 81       	ldd	r24, Y+2	; 0x02
 42a:	88 23       	and	r24, r24
 42c:	49 f4       	brne	.+18     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
                TCCR1B&=~(0b111);
 42e:	81 e8       	ldi	r24, 0x81	; 129
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	dc 01       	movw	r26, r24
 434:	2c 91       	ld	r18, X
 436:	81 e8       	ldi	r24, 0x81	; 129
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	28 7f       	andi	r18, 0xF8	; 248
 43c:	fc 01       	movw	r30, r24
 43e:	20 83       	st	Z, r18
            puls^=1;
 440:	9a 81       	ldd	r25, Y+2	; 0x02
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	89 27       	eor	r24, r25
 446:	8a 83       	std	Y+2, r24	; 0x02
        }
        tasterdavor=tasterjetzt;
 448:	8b 81       	ldd	r24, Y+3	; 0x03
 44a:	89 83       	std	Y+1, r24	; 0x01
        tasterjetzt=pinlesen(0);
 44c:	49 cf       	rjmp	.-366    	; 0x2e0 <main+0x7e>

0000044e <__muluhisi3>:
 44e:	0e 94 32 02 	call	0x464	; 0x464 <__umulhisi3>
 452:	a5 9f       	mul	r26, r21
 454:	90 0d       	add	r25, r0
 456:	b4 9f       	mul	r27, r20
 458:	90 0d       	add	r25, r0
 45a:	a4 9f       	mul	r26, r20
 45c:	80 0d       	add	r24, r0
 45e:	91 1d       	adc	r25, r1
 460:	11 24       	eor	r1, r1
 462:	08 95       	ret

00000464 <__umulhisi3>:
 464:	a2 9f       	mul	r26, r18
 466:	b0 01       	movw	r22, r0
 468:	b3 9f       	mul	r27, r19
 46a:	c0 01       	movw	r24, r0
 46c:	a3 9f       	mul	r26, r19
 46e:	70 0d       	add	r23, r0
 470:	81 1d       	adc	r24, r1
 472:	11 24       	eor	r1, r1
 474:	91 1d       	adc	r25, r1
 476:	b2 9f       	mul	r27, r18
 478:	70 0d       	add	r23, r0
 47a:	81 1d       	adc	r24, r1
 47c:	11 24       	eor	r1, r1
 47e:	91 1d       	adc	r25, r1
 480:	08 95       	ret

00000482 <__cmpsf2>:
 482:	0e 94 75 02 	call	0x4ea	; 0x4ea <__fp_cmp>
 486:	08 f4       	brcc	.+2      	; 0x48a <__cmpsf2+0x8>
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	08 95       	ret

0000048c <__fixunssfsi>:
 48c:	0e 94 a1 02 	call	0x542	; 0x542 <__fp_splitA>
 490:	88 f0       	brcs	.+34     	; 0x4b4 <__fixunssfsi+0x28>
 492:	9f 57       	subi	r25, 0x7F	; 127
 494:	98 f0       	brcs	.+38     	; 0x4bc <__fixunssfsi+0x30>
 496:	b9 2f       	mov	r27, r25
 498:	99 27       	eor	r25, r25
 49a:	b7 51       	subi	r27, 0x17	; 23
 49c:	b0 f0       	brcs	.+44     	; 0x4ca <__fixunssfsi+0x3e>
 49e:	e1 f0       	breq	.+56     	; 0x4d8 <__fixunssfsi+0x4c>
 4a0:	66 0f       	add	r22, r22
 4a2:	77 1f       	adc	r23, r23
 4a4:	88 1f       	adc	r24, r24
 4a6:	99 1f       	adc	r25, r25
 4a8:	1a f0       	brmi	.+6      	; 0x4b0 <__fixunssfsi+0x24>
 4aa:	ba 95       	dec	r27
 4ac:	c9 f7       	brne	.-14     	; 0x4a0 <__fixunssfsi+0x14>
 4ae:	14 c0       	rjmp	.+40     	; 0x4d8 <__fixunssfsi+0x4c>
 4b0:	b1 30       	cpi	r27, 0x01	; 1
 4b2:	91 f0       	breq	.+36     	; 0x4d8 <__fixunssfsi+0x4c>
 4b4:	0e 94 bb 02 	call	0x576	; 0x576 <__fp_zero>
 4b8:	b1 e0       	ldi	r27, 0x01	; 1
 4ba:	08 95       	ret
 4bc:	0c 94 bb 02 	jmp	0x576	; 0x576 <__fp_zero>
 4c0:	67 2f       	mov	r22, r23
 4c2:	78 2f       	mov	r23, r24
 4c4:	88 27       	eor	r24, r24
 4c6:	b8 5f       	subi	r27, 0xF8	; 248
 4c8:	39 f0       	breq	.+14     	; 0x4d8 <__fixunssfsi+0x4c>
 4ca:	b9 3f       	cpi	r27, 0xF9	; 249
 4cc:	cc f3       	brlt	.-14     	; 0x4c0 <__fixunssfsi+0x34>
 4ce:	86 95       	lsr	r24
 4d0:	77 95       	ror	r23
 4d2:	67 95       	ror	r22
 4d4:	b3 95       	inc	r27
 4d6:	d9 f7       	brne	.-10     	; 0x4ce <__fixunssfsi+0x42>
 4d8:	3e f4       	brtc	.+14     	; 0x4e8 <__fixunssfsi+0x5c>
 4da:	90 95       	com	r25
 4dc:	80 95       	com	r24
 4de:	70 95       	com	r23
 4e0:	61 95       	neg	r22
 4e2:	7f 4f       	sbci	r23, 0xFF	; 255
 4e4:	8f 4f       	sbci	r24, 0xFF	; 255
 4e6:	9f 4f       	sbci	r25, 0xFF	; 255
 4e8:	08 95       	ret

000004ea <__fp_cmp>:
 4ea:	99 0f       	add	r25, r25
 4ec:	00 08       	sbc	r0, r0
 4ee:	55 0f       	add	r21, r21
 4f0:	aa 0b       	sbc	r26, r26
 4f2:	e0 e8       	ldi	r30, 0x80	; 128
 4f4:	fe ef       	ldi	r31, 0xFE	; 254
 4f6:	16 16       	cp	r1, r22
 4f8:	17 06       	cpc	r1, r23
 4fa:	e8 07       	cpc	r30, r24
 4fc:	f9 07       	cpc	r31, r25
 4fe:	c0 f0       	brcs	.+48     	; 0x530 <__fp_cmp+0x46>
 500:	12 16       	cp	r1, r18
 502:	13 06       	cpc	r1, r19
 504:	e4 07       	cpc	r30, r20
 506:	f5 07       	cpc	r31, r21
 508:	98 f0       	brcs	.+38     	; 0x530 <__fp_cmp+0x46>
 50a:	62 1b       	sub	r22, r18
 50c:	73 0b       	sbc	r23, r19
 50e:	84 0b       	sbc	r24, r20
 510:	95 0b       	sbc	r25, r21
 512:	39 f4       	brne	.+14     	; 0x522 <__fp_cmp+0x38>
 514:	0a 26       	eor	r0, r26
 516:	61 f0       	breq	.+24     	; 0x530 <__fp_cmp+0x46>
 518:	23 2b       	or	r18, r19
 51a:	24 2b       	or	r18, r20
 51c:	25 2b       	or	r18, r21
 51e:	21 f4       	brne	.+8      	; 0x528 <__fp_cmp+0x3e>
 520:	08 95       	ret
 522:	0a 26       	eor	r0, r26
 524:	09 f4       	brne	.+2      	; 0x528 <__fp_cmp+0x3e>
 526:	a1 40       	sbci	r26, 0x01	; 1
 528:	a6 95       	lsr	r26
 52a:	8f ef       	ldi	r24, 0xFF	; 255
 52c:	81 1d       	adc	r24, r1
 52e:	81 1d       	adc	r24, r1
 530:	08 95       	ret

00000532 <__fp_split3>:
 532:	57 fd       	sbrc	r21, 7
 534:	90 58       	subi	r25, 0x80	; 128
 536:	44 0f       	add	r20, r20
 538:	55 1f       	adc	r21, r21
 53a:	59 f0       	breq	.+22     	; 0x552 <__fp_splitA+0x10>
 53c:	5f 3f       	cpi	r21, 0xFF	; 255
 53e:	71 f0       	breq	.+28     	; 0x55c <__fp_splitA+0x1a>
 540:	47 95       	ror	r20

00000542 <__fp_splitA>:
 542:	88 0f       	add	r24, r24
 544:	97 fb       	bst	r25, 7
 546:	99 1f       	adc	r25, r25
 548:	61 f0       	breq	.+24     	; 0x562 <__fp_splitA+0x20>
 54a:	9f 3f       	cpi	r25, 0xFF	; 255
 54c:	79 f0       	breq	.+30     	; 0x56c <__fp_splitA+0x2a>
 54e:	87 95       	ror	r24
 550:	08 95       	ret
 552:	12 16       	cp	r1, r18
 554:	13 06       	cpc	r1, r19
 556:	14 06       	cpc	r1, r20
 558:	55 1f       	adc	r21, r21
 55a:	f2 cf       	rjmp	.-28     	; 0x540 <__fp_split3+0xe>
 55c:	46 95       	lsr	r20
 55e:	f1 df       	rcall	.-30     	; 0x542 <__fp_splitA>
 560:	08 c0       	rjmp	.+16     	; 0x572 <__fp_splitA+0x30>
 562:	16 16       	cp	r1, r22
 564:	17 06       	cpc	r1, r23
 566:	18 06       	cpc	r1, r24
 568:	99 1f       	adc	r25, r25
 56a:	f1 cf       	rjmp	.-30     	; 0x54e <__fp_splitA+0xc>
 56c:	86 95       	lsr	r24
 56e:	71 05       	cpc	r23, r1
 570:	61 05       	cpc	r22, r1
 572:	08 94       	sec
 574:	08 95       	ret

00000576 <__fp_zero>:
 576:	e8 94       	clt

00000578 <__fp_szero>:
 578:	bb 27       	eor	r27, r27
 57a:	66 27       	eor	r22, r22
 57c:	77 27       	eor	r23, r23
 57e:	cb 01       	movw	r24, r22
 580:	97 f9       	bld	r25, 7
 582:	08 95       	ret

00000584 <__gesf2>:
 584:	0e 94 75 02 	call	0x4ea	; 0x4ea <__fp_cmp>
 588:	08 f4       	brcc	.+2      	; 0x58c <__gesf2+0x8>
 58a:	8f ef       	ldi	r24, 0xFF	; 255
 58c:	08 95       	ret

0000058e <__mulsf3>:
 58e:	0e 94 da 02 	call	0x5b4	; 0x5b4 <__mulsf3x>
 592:	0c 94 4b 03 	jmp	0x696	; 0x696 <__fp_round>
 596:	0e 94 3d 03 	call	0x67a	; 0x67a <__fp_pscA>
 59a:	38 f0       	brcs	.+14     	; 0x5aa <__mulsf3+0x1c>
 59c:	0e 94 44 03 	call	0x688	; 0x688 <__fp_pscB>
 5a0:	20 f0       	brcs	.+8      	; 0x5aa <__mulsf3+0x1c>
 5a2:	95 23       	and	r25, r21
 5a4:	11 f0       	breq	.+4      	; 0x5aa <__mulsf3+0x1c>
 5a6:	0c 94 34 03 	jmp	0x668	; 0x668 <__fp_inf>
 5aa:	0c 94 3a 03 	jmp	0x674	; 0x674 <__fp_nan>
 5ae:	11 24       	eor	r1, r1
 5b0:	0c 94 bc 02 	jmp	0x578	; 0x578 <__fp_szero>

000005b4 <__mulsf3x>:
 5b4:	0e 94 99 02 	call	0x532	; 0x532 <__fp_split3>
 5b8:	70 f3       	brcs	.-36     	; 0x596 <__mulsf3+0x8>

000005ba <__mulsf3_pse>:
 5ba:	95 9f       	mul	r25, r21
 5bc:	c1 f3       	breq	.-16     	; 0x5ae <__mulsf3+0x20>
 5be:	95 0f       	add	r25, r21
 5c0:	50 e0       	ldi	r21, 0x00	; 0
 5c2:	55 1f       	adc	r21, r21
 5c4:	62 9f       	mul	r22, r18
 5c6:	f0 01       	movw	r30, r0
 5c8:	72 9f       	mul	r23, r18
 5ca:	bb 27       	eor	r27, r27
 5cc:	f0 0d       	add	r31, r0
 5ce:	b1 1d       	adc	r27, r1
 5d0:	63 9f       	mul	r22, r19
 5d2:	aa 27       	eor	r26, r26
 5d4:	f0 0d       	add	r31, r0
 5d6:	b1 1d       	adc	r27, r1
 5d8:	aa 1f       	adc	r26, r26
 5da:	64 9f       	mul	r22, r20
 5dc:	66 27       	eor	r22, r22
 5de:	b0 0d       	add	r27, r0
 5e0:	a1 1d       	adc	r26, r1
 5e2:	66 1f       	adc	r22, r22
 5e4:	82 9f       	mul	r24, r18
 5e6:	22 27       	eor	r18, r18
 5e8:	b0 0d       	add	r27, r0
 5ea:	a1 1d       	adc	r26, r1
 5ec:	62 1f       	adc	r22, r18
 5ee:	73 9f       	mul	r23, r19
 5f0:	b0 0d       	add	r27, r0
 5f2:	a1 1d       	adc	r26, r1
 5f4:	62 1f       	adc	r22, r18
 5f6:	83 9f       	mul	r24, r19
 5f8:	a0 0d       	add	r26, r0
 5fa:	61 1d       	adc	r22, r1
 5fc:	22 1f       	adc	r18, r18
 5fe:	74 9f       	mul	r23, r20
 600:	33 27       	eor	r19, r19
 602:	a0 0d       	add	r26, r0
 604:	61 1d       	adc	r22, r1
 606:	23 1f       	adc	r18, r19
 608:	84 9f       	mul	r24, r20
 60a:	60 0d       	add	r22, r0
 60c:	21 1d       	adc	r18, r1
 60e:	82 2f       	mov	r24, r18
 610:	76 2f       	mov	r23, r22
 612:	6a 2f       	mov	r22, r26
 614:	11 24       	eor	r1, r1
 616:	9f 57       	subi	r25, 0x7F	; 127
 618:	50 40       	sbci	r21, 0x00	; 0
 61a:	9a f0       	brmi	.+38     	; 0x642 <__mulsf3_pse+0x88>
 61c:	f1 f0       	breq	.+60     	; 0x65a <__mulsf3_pse+0xa0>
 61e:	88 23       	and	r24, r24
 620:	4a f0       	brmi	.+18     	; 0x634 <__mulsf3_pse+0x7a>
 622:	ee 0f       	add	r30, r30
 624:	ff 1f       	adc	r31, r31
 626:	bb 1f       	adc	r27, r27
 628:	66 1f       	adc	r22, r22
 62a:	77 1f       	adc	r23, r23
 62c:	88 1f       	adc	r24, r24
 62e:	91 50       	subi	r25, 0x01	; 1
 630:	50 40       	sbci	r21, 0x00	; 0
 632:	a9 f7       	brne	.-22     	; 0x61e <__mulsf3_pse+0x64>
 634:	9e 3f       	cpi	r25, 0xFE	; 254
 636:	51 05       	cpc	r21, r1
 638:	80 f0       	brcs	.+32     	; 0x65a <__mulsf3_pse+0xa0>
 63a:	0c 94 34 03 	jmp	0x668	; 0x668 <__fp_inf>
 63e:	0c 94 bc 02 	jmp	0x578	; 0x578 <__fp_szero>
 642:	5f 3f       	cpi	r21, 0xFF	; 255
 644:	e4 f3       	brlt	.-8      	; 0x63e <__mulsf3_pse+0x84>
 646:	98 3e       	cpi	r25, 0xE8	; 232
 648:	d4 f3       	brlt	.-12     	; 0x63e <__mulsf3_pse+0x84>
 64a:	86 95       	lsr	r24
 64c:	77 95       	ror	r23
 64e:	67 95       	ror	r22
 650:	b7 95       	ror	r27
 652:	f7 95       	ror	r31
 654:	e7 95       	ror	r30
 656:	9f 5f       	subi	r25, 0xFF	; 255
 658:	c1 f7       	brne	.-16     	; 0x64a <__mulsf3_pse+0x90>
 65a:	fe 2b       	or	r31, r30
 65c:	88 0f       	add	r24, r24
 65e:	91 1d       	adc	r25, r1
 660:	96 95       	lsr	r25
 662:	87 95       	ror	r24
 664:	97 f9       	bld	r25, 7
 666:	08 95       	ret

00000668 <__fp_inf>:
 668:	97 f9       	bld	r25, 7
 66a:	9f 67       	ori	r25, 0x7F	; 127
 66c:	80 e8       	ldi	r24, 0x80	; 128
 66e:	70 e0       	ldi	r23, 0x00	; 0
 670:	60 e0       	ldi	r22, 0x00	; 0
 672:	08 95       	ret

00000674 <__fp_nan>:
 674:	9f ef       	ldi	r25, 0xFF	; 255
 676:	80 ec       	ldi	r24, 0xC0	; 192
 678:	08 95       	ret

0000067a <__fp_pscA>:
 67a:	00 24       	eor	r0, r0
 67c:	0a 94       	dec	r0
 67e:	16 16       	cp	r1, r22
 680:	17 06       	cpc	r1, r23
 682:	18 06       	cpc	r1, r24
 684:	09 06       	cpc	r0, r25
 686:	08 95       	ret

00000688 <__fp_pscB>:
 688:	00 24       	eor	r0, r0
 68a:	0a 94       	dec	r0
 68c:	12 16       	cp	r1, r18
 68e:	13 06       	cpc	r1, r19
 690:	14 06       	cpc	r1, r20
 692:	05 06       	cpc	r0, r21
 694:	08 95       	ret

00000696 <__fp_round>:
 696:	09 2e       	mov	r0, r25
 698:	03 94       	inc	r0
 69a:	00 0c       	add	r0, r0
 69c:	11 f4       	brne	.+4      	; 0x6a2 <__fp_round+0xc>
 69e:	88 23       	and	r24, r24
 6a0:	52 f0       	brmi	.+20     	; 0x6b6 <__fp_round+0x20>
 6a2:	bb 0f       	add	r27, r27
 6a4:	40 f4       	brcc	.+16     	; 0x6b6 <__fp_round+0x20>
 6a6:	bf 2b       	or	r27, r31
 6a8:	11 f4       	brne	.+4      	; 0x6ae <__fp_round+0x18>
 6aa:	60 ff       	sbrs	r22, 0
 6ac:	04 c0       	rjmp	.+8      	; 0x6b6 <__fp_round+0x20>
 6ae:	6f 5f       	subi	r22, 0xFF	; 255
 6b0:	7f 4f       	sbci	r23, 0xFF	; 255
 6b2:	8f 4f       	sbci	r24, 0xFF	; 255
 6b4:	9f 4f       	sbci	r25, 0xFF	; 255
 6b6:	08 95       	ret

000006b8 <_exit>:
 6b8:	f8 94       	cli

000006ba <__stop_program>:
 6ba:	ff cf       	rjmp	.-2      	; 0x6ba <__stop_program>
