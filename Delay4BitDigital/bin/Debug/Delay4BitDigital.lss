
bin\Debug\Delay4BitDigital.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000023e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .fuse         00000003  00820000  00820000  000002b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  000002b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000004e  00000000  00000000  000002d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000192  00000000  00000000  00000323  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000011a  00000000  00000000  000004b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001bd  00000000  00000000  000005cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  0000078c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000c0  00000000  00000000  000007cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
  78:	0c 94 1d 01 	jmp	0x23a	; 0x23a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <delay>:
#ifndef DELAY_H
#define DELAY_H

void delay(uint32_t ms)
{
  80:	df 93       	push	r29
  82:	cf 93       	push	r28
  84:	00 d0       	rcall	.+0      	; 0x86 <delay+0x6>
  86:	00 d0       	rcall	.+0      	; 0x88 <delay+0x8>
  88:	0f 92       	push	r0
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
  8e:	69 83       	std	Y+1, r22	; 0x01
  90:	7a 83       	std	Y+2, r23	; 0x02
  92:	8b 83       	std	Y+3, r24	; 0x03
  94:	9c 83       	std	Y+4, r25	; 0x04
    ms*=371;
  96:	89 81       	ldd	r24, Y+1	; 0x01
  98:	9a 81       	ldd	r25, Y+2	; 0x02
  9a:	ab 81       	ldd	r26, Y+3	; 0x03
  9c:	bc 81       	ldd	r27, Y+4	; 0x04
  9e:	23 e7       	ldi	r18, 0x73	; 115
  a0:	31 e0       	ldi	r19, 0x01	; 1
  a2:	40 e0       	ldi	r20, 0x00	; 0
  a4:	50 e0       	ldi	r21, 0x00	; 0
  a6:	bc 01       	movw	r22, r24
  a8:	cd 01       	movw	r24, r26
  aa:	0e 94 fe 00 	call	0x1fc	; 0x1fc <__mulsi3>
  ae:	dc 01       	movw	r26, r24
  b0:	cb 01       	movw	r24, r22
  b2:	89 83       	std	Y+1, r24	; 0x01
  b4:	9a 83       	std	Y+2, r25	; 0x02
  b6:	ab 83       	std	Y+3, r26	; 0x03
  b8:	bc 83       	std	Y+4, r27	; 0x04
    while(ms--);
  ba:	1d 82       	std	Y+5, r1	; 0x05
  bc:	89 81       	ldd	r24, Y+1	; 0x01
  be:	9a 81       	ldd	r25, Y+2	; 0x02
  c0:	ab 81       	ldd	r26, Y+3	; 0x03
  c2:	bc 81       	ldd	r27, Y+4	; 0x04
  c4:	00 97       	sbiw	r24, 0x00	; 0
  c6:	a1 05       	cpc	r26, r1
  c8:	b1 05       	cpc	r27, r1
  ca:	11 f0       	breq	.+4      	; 0xd0 <delay+0x50>
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	8d 83       	std	Y+5, r24	; 0x05
  d0:	89 81       	ldd	r24, Y+1	; 0x01
  d2:	9a 81       	ldd	r25, Y+2	; 0x02
  d4:	ab 81       	ldd	r26, Y+3	; 0x03
  d6:	bc 81       	ldd	r27, Y+4	; 0x04
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	a1 09       	sbc	r26, r1
  dc:	b1 09       	sbc	r27, r1
  de:	89 83       	std	Y+1, r24	; 0x01
  e0:	9a 83       	std	Y+2, r25	; 0x02
  e2:	ab 83       	std	Y+3, r26	; 0x03
  e4:	bc 83       	std	Y+4, r27	; 0x04
  e6:	8d 81       	ldd	r24, Y+5	; 0x05
  e8:	88 23       	and	r24, r24
  ea:	39 f7       	brne	.-50     	; 0xba <delay+0x3a>
}
  ec:	0f 90       	pop	r0
  ee:	0f 90       	pop	r0
  f0:	0f 90       	pop	r0
  f2:	0f 90       	pop	r0
  f4:	0f 90       	pop	r0
  f6:	cf 91       	pop	r28
  f8:	df 91       	pop	r29
  fa:	08 95       	ret

000000fc <main>:

uint8_t get4bit();
void delay(uint32_t ms);

int main(void)
{
  fc:	df 93       	push	r29
  fe:	cf 93       	push	r28
 100:	cd b7       	in	r28, 0x3d	; 61
 102:	de b7       	in	r29, 0x3e	; 62
    DDRD=1<<PD2;
 104:	ea e2       	ldi	r30, 0x2A	; 42
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	84 e0       	ldi	r24, 0x04	; 4
 10a:	80 83       	st	Z, r24
    DDRC=0b00000000;        //A0 bis A3 auf Eingang
 10c:	e7 e2       	ldi	r30, 0x27	; 39
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	10 82       	st	Z, r1
    PORTC=0b00001111;       //A0 bis A3 auf HIGH um PU Widerstand einzuschalten
 112:	e8 e2       	ldi	r30, 0x28	; 40
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	8f e0       	ldi	r24, 0x0F	; 15
 118:	80 83       	st	Z, r24
    while(1)
    {
        PORTD|=1<<PD2;
 11a:	ab e2       	ldi	r26, 0x2B	; 43
 11c:	b0 e0       	ldi	r27, 0x00	; 0
 11e:	eb e2       	ldi	r30, 0x2B	; 43
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	84 60       	ori	r24, 0x04	; 4
 126:	8c 93       	st	X, r24
        delay(get4bit()*67);
 128:	0e 94 c8 00 	call	0x190	; 0x190 <get4bit>
 12c:	28 2f       	mov	r18, r24
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	83 e4       	ldi	r24, 0x43	; 67
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	ac 01       	movw	r20, r24
 136:	24 9f       	mul	r18, r20
 138:	c0 01       	movw	r24, r0
 13a:	25 9f       	mul	r18, r21
 13c:	90 0d       	add	r25, r0
 13e:	34 9f       	mul	r19, r20
 140:	90 0d       	add	r25, r0
 142:	11 24       	eor	r1, r1
 144:	aa 27       	eor	r26, r26
 146:	97 fd       	sbrc	r25, 7
 148:	a0 95       	com	r26
 14a:	ba 2f       	mov	r27, r26
 14c:	bc 01       	movw	r22, r24
 14e:	cd 01       	movw	r24, r26
 150:	0e 94 40 00 	call	0x80	; 0x80 <delay>
        PORTD&=~1<<PD2;
 154:	ab e2       	ldi	r26, 0x2B	; 43
 156:	b0 e0       	ldi	r27, 0x00	; 0
 158:	eb e2       	ldi	r30, 0x2B	; 43
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	88 7f       	andi	r24, 0xF8	; 248
 160:	8c 93       	st	X, r24
        delay(get4bit()*67);
 162:	0e 94 c8 00 	call	0x190	; 0x190 <get4bit>
 166:	28 2f       	mov	r18, r24
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	83 e4       	ldi	r24, 0x43	; 67
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	ac 01       	movw	r20, r24
 170:	24 9f       	mul	r18, r20
 172:	c0 01       	movw	r24, r0
 174:	25 9f       	mul	r18, r21
 176:	90 0d       	add	r25, r0
 178:	34 9f       	mul	r19, r20
 17a:	90 0d       	add	r25, r0
 17c:	11 24       	eor	r1, r1
 17e:	aa 27       	eor	r26, r26
 180:	97 fd       	sbrc	r25, 7
 182:	a0 95       	com	r26
 184:	ba 2f       	mov	r27, r26
 186:	bc 01       	movw	r22, r24
 188:	cd 01       	movw	r24, r26
 18a:	0e 94 40 00 	call	0x80	; 0x80 <delay>
 18e:	c5 cf       	rjmp	.-118    	; 0x11a <main+0x1e>

00000190 <get4bit>:
    }
    return 0;
}

uint8_t get4bit()     //gibt Wert zwischen 0 und 15 zurück je nach Position des Schalters
{
 190:	df 93       	push	r29
 192:	cf 93       	push	r28
 194:	00 d0       	rcall	.+0      	; 0x196 <get4bit+0x6>
 196:	0f 92       	push	r0
 198:	cd b7       	in	r28, 0x3d	; 61
 19a:	de b7       	in	r29, 0x3e	; 62
    uint8_t schalter=0;
 19c:	1b 82       	std	Y+3, r1	; 0x03
    int i;
    for(i=0;i<4;i++)
 19e:	1a 82       	std	Y+2, r1	; 0x02
 1a0:	19 82       	std	Y+1, r1	; 0x01
 1a2:	20 c0       	rjmp	.+64     	; 0x1e4 <get4bit+0x54>
    {
        if(!(PINC&1<<i))
 1a4:	e6 e2       	ldi	r30, 0x26	; 38
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	88 2f       	mov	r24, r24
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	09 80       	ldd	r0, Y+1	; 0x01
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <get4bit+0x26>
 1b2:	95 95       	asr	r25
 1b4:	87 95       	ror	r24
 1b6:	0a 94       	dec	r0
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <get4bit+0x22>
 1ba:	81 70       	andi	r24, 0x01	; 1
 1bc:	90 70       	andi	r25, 0x00	; 0
 1be:	00 97       	sbiw	r24, 0x00	; 0
 1c0:	61 f4       	brne	.+24     	; 0x1da <get4bit+0x4a>
            schalter+=1<<i;
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	09 80       	ldd	r0, Y+1	; 0x01
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <get4bit+0x3e>
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	0a 94       	dec	r0
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <get4bit+0x3a>
 1d2:	98 2f       	mov	r25, r24
 1d4:	8b 81       	ldd	r24, Y+3	; 0x03
 1d6:	89 0f       	add	r24, r25
 1d8:	8b 83       	std	Y+3, r24	; 0x03

uint8_t get4bit()     //gibt Wert zwischen 0 und 15 zurück je nach Position des Schalters
{
    uint8_t schalter=0;
    int i;
    for(i=0;i<4;i++)
 1da:	89 81       	ldd	r24, Y+1	; 0x01
 1dc:	9a 81       	ldd	r25, Y+2	; 0x02
 1de:	01 96       	adiw	r24, 0x01	; 1
 1e0:	9a 83       	std	Y+2, r25	; 0x02
 1e2:	89 83       	std	Y+1, r24	; 0x01
 1e4:	89 81       	ldd	r24, Y+1	; 0x01
 1e6:	9a 81       	ldd	r25, Y+2	; 0x02
 1e8:	84 30       	cpi	r24, 0x04	; 4
 1ea:	91 05       	cpc	r25, r1
 1ec:	dc f2       	brlt	.-74     	; 0x1a4 <get4bit+0x14>
    {
        if(!(PINC&1<<i))
            schalter+=1<<i;
    }
    return schalter;
 1ee:	8b 81       	ldd	r24, Y+3	; 0x03
}
 1f0:	0f 90       	pop	r0
 1f2:	0f 90       	pop	r0
 1f4:	0f 90       	pop	r0
 1f6:	cf 91       	pop	r28
 1f8:	df 91       	pop	r29
 1fa:	08 95       	ret

000001fc <__mulsi3>:
 1fc:	62 9f       	mul	r22, r18
 1fe:	d0 01       	movw	r26, r0
 200:	73 9f       	mul	r23, r19
 202:	f0 01       	movw	r30, r0
 204:	82 9f       	mul	r24, r18
 206:	e0 0d       	add	r30, r0
 208:	f1 1d       	adc	r31, r1
 20a:	64 9f       	mul	r22, r20
 20c:	e0 0d       	add	r30, r0
 20e:	f1 1d       	adc	r31, r1
 210:	92 9f       	mul	r25, r18
 212:	f0 0d       	add	r31, r0
 214:	83 9f       	mul	r24, r19
 216:	f0 0d       	add	r31, r0
 218:	74 9f       	mul	r23, r20
 21a:	f0 0d       	add	r31, r0
 21c:	65 9f       	mul	r22, r21
 21e:	f0 0d       	add	r31, r0
 220:	99 27       	eor	r25, r25
 222:	72 9f       	mul	r23, r18
 224:	b0 0d       	add	r27, r0
 226:	e1 1d       	adc	r30, r1
 228:	f9 1f       	adc	r31, r25
 22a:	63 9f       	mul	r22, r19
 22c:	b0 0d       	add	r27, r0
 22e:	e1 1d       	adc	r30, r1
 230:	f9 1f       	adc	r31, r25
 232:	bd 01       	movw	r22, r26
 234:	cf 01       	movw	r24, r30
 236:	11 24       	eor	r1, r1
 238:	08 95       	ret

0000023a <_exit>:
 23a:	f8 94       	cli

0000023c <__stop_program>:
 23c:	ff cf       	rjmp	.-2      	; 0x23c <__stop_program>
