
bin\Debug\Allgemeine_Kommunikation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000059e  00000652  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000059e  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080010c  0080010c  0000065e  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  0000065e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  00000661  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000674  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 000000c0  00000000  00000000  000006b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_pubnames 0000001d  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_info   00000948  00000000  00000000  00000795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 000007c6  00000000  00000000  000010dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_line   00000771  00000000  00000000  000018a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_frame  00000188  00000000  00000000  00002014  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_str    00000422  00000000  00000000  0000219c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 0a 02 	jmp	0x414	; 0x414 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e9       	ldi	r30, 0x9E	; 158
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 31       	cpi	r26, 0x12	; 18
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <main>
  9e:	0c 94 cd 02 	jmp	0x59a	; 0x59a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <init_usart>:
#ifndef UART_H_INCLUDED
#define UART_H_INCLUDED
#include <avr/io.h>

void init_usart(uint32_t baud)
{
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
  b2:	28 97       	sbiw	r28, 0x08	; 8
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	f8 94       	cli
  b8:	de bf       	out	0x3e, r29	; 62
  ba:	0f be       	out	0x3f, r0	; 63
  bc:	cd bf       	out	0x3d, r28	; 61
  be:	69 83       	std	Y+1, r22	; 0x01
  c0:	7a 83       	std	Y+2, r23	; 0x02
  c2:	8b 83       	std	Y+3, r24	; 0x03
  c4:	9c 83       	std	Y+4, r25	; 0x04
    UBRR0L = (16000000ul/(16ul*baud))-1;
  c6:	89 81       	ldd	r24, Y+1	; 0x01
  c8:	9a 81       	ldd	r25, Y+2	; 0x02
  ca:	ab 81       	ldd	r26, Y+3	; 0x03
  cc:	bc 81       	ldd	r27, Y+4	; 0x04
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	aa 1f       	adc	r26, r26
  d4:	bb 1f       	adc	r27, r27
  d6:	88 0f       	add	r24, r24
  d8:	99 1f       	adc	r25, r25
  da:	aa 1f       	adc	r26, r26
  dc:	bb 1f       	adc	r27, r27
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	aa 1f       	adc	r26, r26
  e4:	bb 1f       	adc	r27, r27
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	aa 1f       	adc	r26, r26
  ec:	bb 1f       	adc	r27, r27
  ee:	8c 01       	movw	r16, r24
  f0:	9d 01       	movw	r18, r26
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	94 e2       	ldi	r25, 0x24	; 36
  f6:	a4 ef       	ldi	r26, 0xF4	; 244
  f8:	b0 e0       	ldi	r27, 0x00	; 0
  fa:	8d 83       	std	Y+5, r24	; 0x05
  fc:	9e 83       	std	Y+6, r25	; 0x06
  fe:	af 83       	std	Y+7, r26	; 0x07
 100:	b8 87       	std	Y+8, r27	; 0x08
 102:	6d 81       	ldd	r22, Y+5	; 0x05
 104:	7e 81       	ldd	r23, Y+6	; 0x06
 106:	8f 81       	ldd	r24, Y+7	; 0x07
 108:	98 85       	ldd	r25, Y+8	; 0x08
 10a:	a9 01       	movw	r20, r18
 10c:	98 01       	movw	r18, r16
 10e:	0e 94 93 02 	call	0x526	; 0x526 <__udivmodsi4>
 112:	da 01       	movw	r26, r20
 114:	c9 01       	movw	r24, r18
 116:	28 2f       	mov	r18, r24
 118:	84 ec       	ldi	r24, 0xC4	; 196
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	dc 01       	movw	r26, r24
 120:	2c 93       	st	X, r18
    UBRR0H = 0;
 122:	85 ec       	ldi	r24, 0xC5	; 197
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	fc 01       	movw	r30, r24
 128:	10 82       	st	Z, r1
    UCSR0B |= (1<<TXEN0) | (1<<RXEN0)|(1<<RXCIE0);           // Sender und Empfänger aktivieren
 12a:	81 ec       	ldi	r24, 0xC1	; 193
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	dc 01       	movw	r26, r24
 130:	2c 91       	ld	r18, X
 132:	81 ec       	ldi	r24, 0xC1	; 193
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	28 69       	ori	r18, 0x98	; 152
 138:	fc 01       	movw	r30, r24
 13a:	20 83       	st	Z, r18
    UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);         // 8-Bit Übertragung
 13c:	82 ec       	ldi	r24, 0xC2	; 194
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	26 e0       	ldi	r18, 0x06	; 6
 142:	dc 01       	movw	r26, r24
 144:	2c 93       	st	X, r18
 // Asynchrone Übertragung (UMSEL00=0 und UMSEL01=0)
}
 146:	00 00       	nop
 148:	28 96       	adiw	r28, 0x08	; 8
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	f8 94       	cli
 14e:	de bf       	out	0x3e, r29	; 62
 150:	0f be       	out	0x3f, r0	; 63
 152:	cd bf       	out	0x3d, r28	; 61
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	1f 91       	pop	r17
 15a:	0f 91       	pop	r16
 15c:	08 95       	ret

0000015e <_putch>:
void _putch(char ch)
{
 15e:	cf 93       	push	r28
 160:	df 93       	push	r29
 162:	0f 92       	push	r0
 164:	cd b7       	in	r28, 0x3d	; 61
 166:	de b7       	in	r29, 0x3e	; 62
 168:	89 83       	std	Y+1, r24	; 0x01
    while(!(UCSR0A & (1<<UDRE0)));
 16a:	00 00       	nop
 16c:	80 ec       	ldi	r24, 0xC0	; 192
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	fc 01       	movw	r30, r24
 172:	80 81       	ld	r24, Z
 174:	88 2f       	mov	r24, r24
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	80 72       	andi	r24, 0x20	; 32
 17a:	99 27       	eor	r25, r25
 17c:	89 2b       	or	r24, r25
 17e:	b1 f3       	breq	.-20     	; 0x16c <_putch+0xe>
    UDR0 = ch;
 180:	86 ec       	ldi	r24, 0xC6	; 198
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	29 81       	ldd	r18, Y+1	; 0x01
 186:	fc 01       	movw	r30, r24
 188:	20 83       	st	Z, r18
}
 18a:	00 00       	nop
 18c:	0f 90       	pop	r0
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	08 95       	ret

00000194 <_puts>:
void _puts(char st[])
{
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	00 d0       	rcall	.+0      	; 0x19a <_puts+0x6>
 19a:	0f 92       	push	r0
 19c:	cd b7       	in	r28, 0x3d	; 61
 19e:	de b7       	in	r29, 0x3e	; 62
 1a0:	9b 83       	std	Y+3, r25	; 0x03
 1a2:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t i=0;
 1a4:	19 82       	std	Y+1, r1	; 0x01
    while(st[i])
 1a6:	0e c0       	rjmp	.+28     	; 0x1c4 <_puts+0x30>
        _putch(st[i++]);
 1a8:	89 81       	ldd	r24, Y+1	; 0x01
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	98 0f       	add	r25, r24
 1ae:	99 83       	std	Y+1, r25	; 0x01
 1b0:	88 2f       	mov	r24, r24
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	2a 81       	ldd	r18, Y+2	; 0x02
 1b6:	3b 81       	ldd	r19, Y+3	; 0x03
 1b8:	82 0f       	add	r24, r18
 1ba:	93 1f       	adc	r25, r19
 1bc:	fc 01       	movw	r30, r24
 1be:	80 81       	ld	r24, Z
 1c0:	0e 94 af 00 	call	0x15e	; 0x15e <_putch>
    while(st[i])
 1c4:	89 81       	ldd	r24, Y+1	; 0x01
 1c6:	88 2f       	mov	r24, r24
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	2a 81       	ldd	r18, Y+2	; 0x02
 1cc:	3b 81       	ldd	r19, Y+3	; 0x03
 1ce:	82 0f       	add	r24, r18
 1d0:	93 1f       	adc	r25, r19
 1d2:	fc 01       	movw	r30, r24
 1d4:	80 81       	ld	r24, Z
 1d6:	88 23       	and	r24, r24
 1d8:	39 f7       	brne	.-50     	; 0x1a8 <_puts+0x14>
    _putch(32);
 1da:	80 e2       	ldi	r24, 0x20	; 32
 1dc:	0e 94 af 00 	call	0x15e	; 0x15e <_putch>
}
 1e0:	00 00       	nop
 1e2:	0f 90       	pop	r0
 1e4:	0f 90       	pop	r0
 1e6:	0f 90       	pop	r0
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	08 95       	ret

000001ee <_getch>:
char _getch(void)
{
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	cd b7       	in	r28, 0x3d	; 61
 1f4:	de b7       	in	r29, 0x3e	; 62
    while(!(UCSR0A & (1<<RXC0)));
 1f6:	00 00       	nop
 1f8:	80 ec       	ldi	r24, 0xC0	; 192
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	fc 01       	movw	r30, r24
 1fe:	80 81       	ld	r24, Z
 200:	88 23       	and	r24, r24
 202:	d4 f7       	brge	.-12     	; 0x1f8 <_getch+0xa>
    return UDR0;
 204:	86 ec       	ldi	r24, 0xC6	; 198
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	fc 01       	movw	r30, r24
 20a:	80 81       	ld	r24, Z
}
 20c:	df 91       	pop	r29
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <_gets>:

void _gets(char* st)
{
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	00 d0       	rcall	.+0      	; 0x218 <_gets+0x6>
 218:	cd b7       	in	r28, 0x3d	; 61
 21a:	de b7       	in	r29, 0x3e	; 62
 21c:	9a 83       	std	Y+2, r25	; 0x02
 21e:	89 83       	std	Y+1, r24	; 0x01
    do
    {
        *st=_getch();
 220:	0e 94 f7 00 	call	0x1ee	; 0x1ee <_getch>
 224:	28 2f       	mov	r18, r24
 226:	89 81       	ldd	r24, Y+1	; 0x01
 228:	9a 81       	ldd	r25, Y+2	; 0x02
 22a:	fc 01       	movw	r30, r24
 22c:	20 83       	st	Z, r18
    } while (*st++!=10);  // die Funktion WriteLine von C# schickt einen String,
 22e:	89 81       	ldd	r24, Y+1	; 0x01
 230:	9a 81       	ldd	r25, Y+2	; 0x02
 232:	9c 01       	movw	r18, r24
 234:	2f 5f       	subi	r18, 0xFF	; 255
 236:	3f 4f       	sbci	r19, 0xFF	; 255
 238:	3a 83       	std	Y+2, r19	; 0x02
 23a:	29 83       	std	Y+1, r18	; 0x01
 23c:	fc 01       	movw	r30, r24
 23e:	80 81       	ld	r24, Z
 240:	8a 30       	cpi	r24, 0x0A	; 10
 242:	71 f7       	brne	.-36     	; 0x220 <_gets+0xe>
    *--st=0;			  // der mit New Line (\n, ASCII: 10) abschlossen ist.
 244:	89 81       	ldd	r24, Y+1	; 0x01
 246:	9a 81       	ldd	r25, Y+2	; 0x02
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	9a 83       	std	Y+2, r25	; 0x02
 24c:	89 83       	std	Y+1, r24	; 0x01
 24e:	89 81       	ldd	r24, Y+1	; 0x01
 250:	9a 81       	ldd	r25, Y+2	; 0x02
 252:	fc 01       	movw	r30, r24
 254:	10 82       	st	Z, r1
}
 256:	00 00       	nop
 258:	0f 90       	pop	r0
 25a:	0f 90       	pop	r0
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	08 95       	ret

00000262 <_newline>:
void _newline()
{
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	cd b7       	in	r28, 0x3d	; 61
 268:	de b7       	in	r29, 0x3e	; 62
    _putch(13);   // CR
 26a:	8d e0       	ldi	r24, 0x0D	; 13
 26c:	0e 94 af 00 	call	0x15e	; 0x15e <_putch>
    _putch(10);   // LF
 270:	8a e0       	ldi	r24, 0x0A	; 10
 272:	0e 94 af 00 	call	0x15e	; 0x15e <_putch>
}
 276:	00 00       	nop
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	08 95       	ret

0000027e <itoa8>:
void itoa8(uint16_t val,char *stringa)
{
 27e:	cf 93       	push	r28
 280:	df 93       	push	r29
 282:	00 d0       	rcall	.+0      	; 0x284 <itoa8+0x6>
 284:	00 d0       	rcall	.+0      	; 0x286 <itoa8+0x8>
 286:	cd b7       	in	r28, 0x3d	; 61
 288:	de b7       	in	r29, 0x3e	; 62
 28a:	9a 83       	std	Y+2, r25	; 0x02
 28c:	89 83       	std	Y+1, r24	; 0x01
 28e:	7c 83       	std	Y+4, r23	; 0x04
 290:	6b 83       	std	Y+3, r22	; 0x03
    stringa[0]=(val%10000)/1000+48;
 292:	49 81       	ldd	r20, Y+1	; 0x01
 294:	5a 81       	ldd	r21, Y+2	; 0x02
 296:	ca 01       	movw	r24, r20
 298:	92 95       	swap	r25
 29a:	82 95       	swap	r24
 29c:	8f 70       	andi	r24, 0x0F	; 15
 29e:	89 27       	eor	r24, r25
 2a0:	9f 70       	andi	r25, 0x0F	; 15
 2a2:	89 27       	eor	r24, r25
 2a4:	9c 01       	movw	r18, r24
 2a6:	a7 e4       	ldi	r26, 0x47	; 71
 2a8:	b3 e0       	ldi	r27, 0x03	; 3
 2aa:	0e 94 b5 02 	call	0x56a	; 0x56a <__umulhisi3>
 2ae:	96 95       	lsr	r25
 2b0:	87 95       	ror	r24
 2b2:	96 95       	lsr	r25
 2b4:	87 95       	ror	r24
 2b6:	96 95       	lsr	r25
 2b8:	87 95       	ror	r24
 2ba:	60 e1       	ldi	r22, 0x10	; 16
 2bc:	77 e2       	ldi	r23, 0x27	; 39
 2be:	86 9f       	mul	r24, r22
 2c0:	90 01       	movw	r18, r0
 2c2:	87 9f       	mul	r24, r23
 2c4:	30 0d       	add	r19, r0
 2c6:	96 9f       	mul	r25, r22
 2c8:	30 0d       	add	r19, r0
 2ca:	11 24       	eor	r1, r1
 2cc:	ca 01       	movw	r24, r20
 2ce:	82 1b       	sub	r24, r18
 2d0:	93 0b       	sbc	r25, r19
 2d2:	96 95       	lsr	r25
 2d4:	87 95       	ror	r24
 2d6:	96 95       	lsr	r25
 2d8:	87 95       	ror	r24
 2da:	96 95       	lsr	r25
 2dc:	87 95       	ror	r24
 2de:	9c 01       	movw	r18, r24
 2e0:	a5 ec       	ldi	r26, 0xC5	; 197
 2e2:	b0 e2       	ldi	r27, 0x20	; 32
 2e4:	0e 94 b5 02 	call	0x56a	; 0x56a <__umulhisi3>
 2e8:	92 95       	swap	r25
 2ea:	82 95       	swap	r24
 2ec:	8f 70       	andi	r24, 0x0F	; 15
 2ee:	89 27       	eor	r24, r25
 2f0:	9f 70       	andi	r25, 0x0F	; 15
 2f2:	89 27       	eor	r24, r25
 2f4:	80 5d       	subi	r24, 0xD0	; 208
 2f6:	28 2f       	mov	r18, r24
 2f8:	8b 81       	ldd	r24, Y+3	; 0x03
 2fa:	9c 81       	ldd	r25, Y+4	; 0x04
 2fc:	fc 01       	movw	r30, r24
 2fe:	20 83       	st	Z, r18
    stringa[1]=(val%1000)/100+48;
 300:	49 81       	ldd	r20, Y+1	; 0x01
 302:	5a 81       	ldd	r21, Y+2	; 0x02
 304:	ca 01       	movw	r24, r20
 306:	96 95       	lsr	r25
 308:	87 95       	ror	r24
 30a:	96 95       	lsr	r25
 30c:	87 95       	ror	r24
 30e:	96 95       	lsr	r25
 310:	87 95       	ror	r24
 312:	9c 01       	movw	r18, r24
 314:	a5 ec       	ldi	r26, 0xC5	; 197
 316:	b0 e2       	ldi	r27, 0x20	; 32
 318:	0e 94 b5 02 	call	0x56a	; 0x56a <__umulhisi3>
 31c:	92 95       	swap	r25
 31e:	82 95       	swap	r24
 320:	8f 70       	andi	r24, 0x0F	; 15
 322:	89 27       	eor	r24, r25
 324:	9f 70       	andi	r25, 0x0F	; 15
 326:	89 27       	eor	r24, r25
 328:	68 ee       	ldi	r22, 0xE8	; 232
 32a:	73 e0       	ldi	r23, 0x03	; 3
 32c:	86 9f       	mul	r24, r22
 32e:	90 01       	movw	r18, r0
 330:	87 9f       	mul	r24, r23
 332:	30 0d       	add	r19, r0
 334:	96 9f       	mul	r25, r22
 336:	30 0d       	add	r19, r0
 338:	11 24       	eor	r1, r1
 33a:	ca 01       	movw	r24, r20
 33c:	82 1b       	sub	r24, r18
 33e:	93 0b       	sbc	r25, r19
 340:	96 95       	lsr	r25
 342:	87 95       	ror	r24
 344:	96 95       	lsr	r25
 346:	87 95       	ror	r24
 348:	9c 01       	movw	r18, r24
 34a:	ab e7       	ldi	r26, 0x7B	; 123
 34c:	b4 e1       	ldi	r27, 0x14	; 20
 34e:	0e 94 b5 02 	call	0x56a	; 0x56a <__umulhisi3>
 352:	96 95       	lsr	r25
 354:	87 95       	ror	r24
 356:	20 e3       	ldi	r18, 0x30	; 48
 358:	28 0f       	add	r18, r24
 35a:	8b 81       	ldd	r24, Y+3	; 0x03
 35c:	9c 81       	ldd	r25, Y+4	; 0x04
 35e:	01 96       	adiw	r24, 0x01	; 1
 360:	fc 01       	movw	r30, r24
 362:	20 83       	st	Z, r18
    stringa[2]=(val%100)/10+48;
 364:	49 81       	ldd	r20, Y+1	; 0x01
 366:	5a 81       	ldd	r21, Y+2	; 0x02
 368:	ca 01       	movw	r24, r20
 36a:	96 95       	lsr	r25
 36c:	87 95       	ror	r24
 36e:	96 95       	lsr	r25
 370:	87 95       	ror	r24
 372:	9c 01       	movw	r18, r24
 374:	ab e7       	ldi	r26, 0x7B	; 123
 376:	b4 e1       	ldi	r27, 0x14	; 20
 378:	0e 94 b5 02 	call	0x56a	; 0x56a <__umulhisi3>
 37c:	96 95       	lsr	r25
 37e:	87 95       	ror	r24
 380:	64 e6       	ldi	r22, 0x64	; 100
 382:	68 9f       	mul	r22, r24
 384:	90 01       	movw	r18, r0
 386:	69 9f       	mul	r22, r25
 388:	30 0d       	add	r19, r0
 38a:	11 24       	eor	r1, r1
 38c:	ca 01       	movw	r24, r20
 38e:	82 1b       	sub	r24, r18
 390:	93 0b       	sbc	r25, r19
 392:	9c 01       	movw	r18, r24
 394:	ad ec       	ldi	r26, 0xCD	; 205
 396:	bc ec       	ldi	r27, 0xCC	; 204
 398:	0e 94 b5 02 	call	0x56a	; 0x56a <__umulhisi3>
 39c:	96 95       	lsr	r25
 39e:	87 95       	ror	r24
 3a0:	96 95       	lsr	r25
 3a2:	87 95       	ror	r24
 3a4:	96 95       	lsr	r25
 3a6:	87 95       	ror	r24
 3a8:	20 e3       	ldi	r18, 0x30	; 48
 3aa:	28 0f       	add	r18, r24
 3ac:	8b 81       	ldd	r24, Y+3	; 0x03
 3ae:	9c 81       	ldd	r25, Y+4	; 0x04
 3b0:	02 96       	adiw	r24, 0x02	; 2
 3b2:	fc 01       	movw	r30, r24
 3b4:	20 83       	st	Z, r18
    stringa[3]=(val%10)+48;
 3b6:	49 81       	ldd	r20, Y+1	; 0x01
 3b8:	5a 81       	ldd	r21, Y+2	; 0x02
 3ba:	9a 01       	movw	r18, r20
 3bc:	ad ec       	ldi	r26, 0xCD	; 205
 3be:	bc ec       	ldi	r27, 0xCC	; 204
 3c0:	0e 94 b5 02 	call	0x56a	; 0x56a <__umulhisi3>
 3c4:	9c 01       	movw	r18, r24
 3c6:	36 95       	lsr	r19
 3c8:	27 95       	ror	r18
 3ca:	36 95       	lsr	r19
 3cc:	27 95       	ror	r18
 3ce:	36 95       	lsr	r19
 3d0:	27 95       	ror	r18
 3d2:	c9 01       	movw	r24, r18
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	88 0f       	add	r24, r24
 3da:	99 1f       	adc	r25, r25
 3dc:	82 0f       	add	r24, r18
 3de:	93 1f       	adc	r25, r19
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	9a 01       	movw	r18, r20
 3e6:	28 1b       	sub	r18, r24
 3e8:	39 0b       	sbc	r19, r25
 3ea:	82 2f       	mov	r24, r18
 3ec:	20 e3       	ldi	r18, 0x30	; 48
 3ee:	28 0f       	add	r18, r24
 3f0:	8b 81       	ldd	r24, Y+3	; 0x03
 3f2:	9c 81       	ldd	r25, Y+4	; 0x04
 3f4:	03 96       	adiw	r24, 0x03	; 3
 3f6:	fc 01       	movw	r30, r24
 3f8:	20 83       	st	Z, r18
    stringa[4]=0;
 3fa:	8b 81       	ldd	r24, Y+3	; 0x03
 3fc:	9c 81       	ldd	r25, Y+4	; 0x04
 3fe:	04 96       	adiw	r24, 0x04	; 4
 400:	fc 01       	movw	r30, r24
 402:	10 82       	st	Z, r1
}
 404:	00 00       	nop
 406:	0f 90       	pop	r0
 408:	0f 90       	pop	r0
 40a:	0f 90       	pop	r0
 40c:	0f 90       	pop	r0
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	08 95       	ret

00000414 <__vector_18>:
char strcmd[6];

//LED PB5

ISR(USART_RX_vect)
{
 414:	1f 92       	push	r1
 416:	0f 92       	push	r0
 418:	0f b6       	in	r0, 0x3f	; 63
 41a:	0f 92       	push	r0
 41c:	11 24       	eor	r1, r1
 41e:	2f 93       	push	r18
 420:	3f 93       	push	r19
 422:	4f 93       	push	r20
 424:	5f 93       	push	r21
 426:	6f 93       	push	r22
 428:	7f 93       	push	r23
 42a:	8f 93       	push	r24
 42c:	9f 93       	push	r25
 42e:	af 93       	push	r26
 430:	bf 93       	push	r27
 432:	ef 93       	push	r30
 434:	ff 93       	push	r31
 436:	cf 93       	push	r28
 438:	df 93       	push	r29
 43a:	0f 92       	push	r0
 43c:	cd b7       	in	r28, 0x3d	; 61
 43e:	de b7       	in	r29, 0x3e	; 62
    uint8_t sreg = SREG;
 440:	8f e5       	ldi	r24, 0x5F	; 95
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	fc 01       	movw	r30, r24
 446:	80 81       	ld	r24, Z
 448:	89 83       	std	Y+1, r24	; 0x01
    SREG&=~(1<<7);
 44a:	8f e5       	ldi	r24, 0x5F	; 95
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	fc 01       	movw	r30, r24
 450:	20 81       	ld	r18, Z
 452:	8f e5       	ldi	r24, 0x5F	; 95
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	2f 77       	andi	r18, 0x7F	; 127
 458:	fc 01       	movw	r30, r24
 45a:	20 83       	st	Z, r18
    _gets(strcmd);
 45c:	8c e0       	ldi	r24, 0x0C	; 12
 45e:	91 e0       	ldi	r25, 0x01	; 1
 460:	0e 94 09 01 	call	0x212	; 0x212 <_gets>
    if(strcmp("PD2=1",strcmd)==0)
 464:	6c e0       	ldi	r22, 0x0C	; 12
 466:	71 e0       	ldi	r23, 0x01	; 1
 468:	80 e0       	ldi	r24, 0x00	; 0
 46a:	91 e0       	ldi	r25, 0x01	; 1
 46c:	0e 94 c4 02 	call	0x588	; 0x588 <strcmp>
 470:	89 2b       	or	r24, r25
 472:	79 f4       	brne	.+30     	; 0x492 <__vector_18+0x7e>
    {
        PORTD |= (1<<2);
 474:	8b e2       	ldi	r24, 0x2B	; 43
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	fc 01       	movw	r30, r24
 47a:	20 81       	ld	r18, Z
 47c:	8b e2       	ldi	r24, 0x2B	; 43
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	24 60       	ori	r18, 0x04	; 4
 482:	fc 01       	movw	r30, r24
 484:	20 83       	st	Z, r18
        _puts(strcmd);
 486:	8c e0       	ldi	r24, 0x0C	; 12
 488:	91 e0       	ldi	r25, 0x01	; 1
 48a:	0e 94 ca 00 	call	0x194	; 0x194 <_puts>
        _newline();
 48e:	0e 94 31 01 	call	0x262	; 0x262 <_newline>
    }
    if(strcmp("PD2=0",strcmd)==0)
 492:	6c e0       	ldi	r22, 0x0C	; 12
 494:	71 e0       	ldi	r23, 0x01	; 1
 496:	86 e0       	ldi	r24, 0x06	; 6
 498:	91 e0       	ldi	r25, 0x01	; 1
 49a:	0e 94 c4 02 	call	0x588	; 0x588 <strcmp>
 49e:	89 2b       	or	r24, r25
 4a0:	79 f4       	brne	.+30     	; 0x4c0 <__vector_18+0xac>
    {
        PORTD &= ~(1<<2);
 4a2:	8b e2       	ldi	r24, 0x2B	; 43
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	fc 01       	movw	r30, r24
 4a8:	20 81       	ld	r18, Z
 4aa:	8b e2       	ldi	r24, 0x2B	; 43
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	2b 7f       	andi	r18, 0xFB	; 251
 4b0:	fc 01       	movw	r30, r24
 4b2:	20 83       	st	Z, r18
        _puts(strcmd);
 4b4:	8c e0       	ldi	r24, 0x0C	; 12
 4b6:	91 e0       	ldi	r25, 0x01	; 1
 4b8:	0e 94 ca 00 	call	0x194	; 0x194 <_puts>
        _newline();
 4bc:	0e 94 31 01 	call	0x262	; 0x262 <_newline>
    }
    SREG = sreg;
 4c0:	8f e5       	ldi	r24, 0x5F	; 95
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	29 81       	ldd	r18, Y+1	; 0x01
 4c6:	fc 01       	movw	r30, r24
 4c8:	20 83       	st	Z, r18
}
 4ca:	00 00       	nop
 4cc:	0f 90       	pop	r0
 4ce:	df 91       	pop	r29
 4d0:	cf 91       	pop	r28
 4d2:	ff 91       	pop	r31
 4d4:	ef 91       	pop	r30
 4d6:	bf 91       	pop	r27
 4d8:	af 91       	pop	r26
 4da:	9f 91       	pop	r25
 4dc:	8f 91       	pop	r24
 4de:	7f 91       	pop	r23
 4e0:	6f 91       	pop	r22
 4e2:	5f 91       	pop	r21
 4e4:	4f 91       	pop	r20
 4e6:	3f 91       	pop	r19
 4e8:	2f 91       	pop	r18
 4ea:	0f 90       	pop	r0
 4ec:	0f be       	out	0x3f, r0	; 63
 4ee:	0f 90       	pop	r0
 4f0:	1f 90       	pop	r1
 4f2:	18 95       	reti

000004f4 <main>:
int main(void)
{
 4f4:	cf 93       	push	r28
 4f6:	df 93       	push	r29
 4f8:	cd b7       	in	r28, 0x3d	; 61
 4fa:	de b7       	in	r29, 0x3e	; 62
    DDRD =0b00000100;
 4fc:	8a e2       	ldi	r24, 0x2A	; 42
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	24 e0       	ldi	r18, 0x04	; 4
 502:	fc 01       	movw	r30, r24
 504:	20 83       	st	Z, r18
    init_usart(9600);
 506:	60 e8       	ldi	r22, 0x80	; 128
 508:	75 e2       	ldi	r23, 0x25	; 37
 50a:	80 e0       	ldi	r24, 0x00	; 0
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	0e 94 53 00 	call	0xa6	; 0xa6 <init_usart>
    SREG|=(1<<7);
 512:	8f e5       	ldi	r24, 0x5F	; 95
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	fc 01       	movw	r30, r24
 518:	20 81       	ld	r18, Z
 51a:	8f e5       	ldi	r24, 0x5F	; 95
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	20 68       	ori	r18, 0x80	; 128
 520:	fc 01       	movw	r30, r24
 522:	20 83       	st	Z, r18
    while(1)
 524:	ff cf       	rjmp	.-2      	; 0x524 <main+0x30>

00000526 <__udivmodsi4>:
 526:	a1 e2       	ldi	r26, 0x21	; 33
 528:	1a 2e       	mov	r1, r26
 52a:	aa 1b       	sub	r26, r26
 52c:	bb 1b       	sub	r27, r27
 52e:	fd 01       	movw	r30, r26
 530:	0d c0       	rjmp	.+26     	; 0x54c <__udivmodsi4_ep>

00000532 <__udivmodsi4_loop>:
 532:	aa 1f       	adc	r26, r26
 534:	bb 1f       	adc	r27, r27
 536:	ee 1f       	adc	r30, r30
 538:	ff 1f       	adc	r31, r31
 53a:	a2 17       	cp	r26, r18
 53c:	b3 07       	cpc	r27, r19
 53e:	e4 07       	cpc	r30, r20
 540:	f5 07       	cpc	r31, r21
 542:	20 f0       	brcs	.+8      	; 0x54c <__udivmodsi4_ep>
 544:	a2 1b       	sub	r26, r18
 546:	b3 0b       	sbc	r27, r19
 548:	e4 0b       	sbc	r30, r20
 54a:	f5 0b       	sbc	r31, r21

0000054c <__udivmodsi4_ep>:
 54c:	66 1f       	adc	r22, r22
 54e:	77 1f       	adc	r23, r23
 550:	88 1f       	adc	r24, r24
 552:	99 1f       	adc	r25, r25
 554:	1a 94       	dec	r1
 556:	69 f7       	brne	.-38     	; 0x532 <__udivmodsi4_loop>
 558:	60 95       	com	r22
 55a:	70 95       	com	r23
 55c:	80 95       	com	r24
 55e:	90 95       	com	r25
 560:	9b 01       	movw	r18, r22
 562:	ac 01       	movw	r20, r24
 564:	bd 01       	movw	r22, r26
 566:	cf 01       	movw	r24, r30
 568:	08 95       	ret

0000056a <__umulhisi3>:
 56a:	a2 9f       	mul	r26, r18
 56c:	b0 01       	movw	r22, r0
 56e:	b3 9f       	mul	r27, r19
 570:	c0 01       	movw	r24, r0
 572:	a3 9f       	mul	r26, r19
 574:	70 0d       	add	r23, r0
 576:	81 1d       	adc	r24, r1
 578:	11 24       	eor	r1, r1
 57a:	91 1d       	adc	r25, r1
 57c:	b2 9f       	mul	r27, r18
 57e:	70 0d       	add	r23, r0
 580:	81 1d       	adc	r24, r1
 582:	11 24       	eor	r1, r1
 584:	91 1d       	adc	r25, r1
 586:	08 95       	ret

00000588 <strcmp>:
 588:	fb 01       	movw	r30, r22
 58a:	dc 01       	movw	r26, r24
 58c:	8d 91       	ld	r24, X+
 58e:	01 90       	ld	r0, Z+
 590:	80 19       	sub	r24, r0
 592:	01 10       	cpse	r0, r1
 594:	d9 f3       	breq	.-10     	; 0x58c <strcmp+0x4>
 596:	99 0b       	sbc	r25, r25
 598:	08 95       	ret

0000059a <_exit>:
 59a:	f8 94       	cli

0000059c <__stop_program>:
 59c:	ff cf       	rjmp	.-2      	; 0x59c <__stop_program>
