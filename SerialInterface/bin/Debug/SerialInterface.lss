
bin\Debug\SerialInterface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000368  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .fuse         00000003  00820000  00820000  000003dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000080  00000000  00000000  000003df  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000a8  00000000  00000000  0000045f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000359  00000000  00000000  00000507  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000022f  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000395  00000000  00000000  00000a8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a0  00000000  00000000  00000e24  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000f7  00000000  00000000  00000ec4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 76 00 	call	0xec	; 0xec <main>
  78:	0c 94 b2 01 	jmp	0x364	; 0x364 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <get4bit>:
#include <avr/io.h>
uint8_t get4bit()     //gibt Wert zwischen 0 und 15 zurück je nach Position des Schalters
{
  80:	df 93       	push	r29
  82:	cf 93       	push	r28
  84:	00 d0       	rcall	.+0      	; 0x86 <get4bit+0x6>
  86:	0f 92       	push	r0
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
    uint8_t schalter=0;
  8c:	1b 82       	std	Y+3, r1	; 0x03
    int i;
    for(i=0;i<4;i++)
  8e:	1a 82       	std	Y+2, r1	; 0x02
  90:	19 82       	std	Y+1, r1	; 0x01
  92:	20 c0       	rjmp	.+64     	; 0xd4 <get4bit+0x54>
    {
        if(!(PINC&1<<i))
  94:	e6 e2       	ldi	r30, 0x26	; 38
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	88 2f       	mov	r24, r24
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	09 80       	ldd	r0, Y+1	; 0x01
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <get4bit+0x26>
  a2:	95 95       	asr	r25
  a4:	87 95       	ror	r24
  a6:	0a 94       	dec	r0
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <get4bit+0x22>
  aa:	81 70       	andi	r24, 0x01	; 1
  ac:	90 70       	andi	r25, 0x00	; 0
  ae:	00 97       	sbiw	r24, 0x00	; 0
  b0:	61 f4       	brne	.+24     	; 0xca <get4bit+0x4a>
            schalter+=1<<i;
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	09 80       	ldd	r0, Y+1	; 0x01
  b8:	02 c0       	rjmp	.+4      	; 0xbe <get4bit+0x3e>
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	0a 94       	dec	r0
  c0:	e2 f7       	brpl	.-8      	; 0xba <get4bit+0x3a>
  c2:	98 2f       	mov	r25, r24
  c4:	8b 81       	ldd	r24, Y+3	; 0x03
  c6:	89 0f       	add	r24, r25
  c8:	8b 83       	std	Y+3, r24	; 0x03
#include <avr/io.h>
uint8_t get4bit()     //gibt Wert zwischen 0 und 15 zurück je nach Position des Schalters
{
    uint8_t schalter=0;
    int i;
    for(i=0;i<4;i++)
  ca:	89 81       	ldd	r24, Y+1	; 0x01
  cc:	9a 81       	ldd	r25, Y+2	; 0x02
  ce:	01 96       	adiw	r24, 0x01	; 1
  d0:	9a 83       	std	Y+2, r25	; 0x02
  d2:	89 83       	std	Y+1, r24	; 0x01
  d4:	89 81       	ldd	r24, Y+1	; 0x01
  d6:	9a 81       	ldd	r25, Y+2	; 0x02
  d8:	84 30       	cpi	r24, 0x04	; 4
  da:	91 05       	cpc	r25, r1
  dc:	dc f2       	brlt	.-74     	; 0x94 <get4bit+0x14>
    {
        if(!(PINC&1<<i))
            schalter+=1<<i;
    }
    return schalter;
  de:	8b 81       	ldd	r24, Y+3	; 0x03
}
  e0:	0f 90       	pop	r0
  e2:	0f 90       	pop	r0
  e4:	0f 90       	pop	r0
  e6:	cf 91       	pop	r28
  e8:	df 91       	pop	r29
  ea:	08 95       	ret

000000ec <main>:
#include "../Header/drehschalter.h"
#include "../Header/UART.h"
#include "../Header/mydelay.h"

int main(void)
{
  ec:	df 93       	push	r29
  ee:	cf 93       	push	r28
  f0:	00 d0       	rcall	.+0      	; 0xf2 <main+0x6>
  f2:	0f 92       	push	r0
  f4:	cd b7       	in	r28, 0x3d	; 61
  f6:	de b7       	in	r29, 0x3e	; 62
    DDRD = 0b00000000;
  f8:	ea e2       	ldi	r30, 0x2A	; 42
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	10 82       	st	Z, r1
    PORTD = 0b11111111;
  fe:	eb e2       	ldi	r30, 0x2B	; 43
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	8f ef       	ldi	r24, 0xFF	; 255
 104:	80 83       	st	Z, r24
    DDRC = 0b00000000;
 106:	e7 e2       	ldi	r30, 0x27	; 39
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	10 82       	st	Z, r1
    PORTC = 0b00101111;
 10c:	e8 e2       	ldi	r30, 0x28	; 40
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	8f e2       	ldi	r24, 0x2F	; 47
 112:	80 83       	st	Z, r24
    char str[3];
    init_usart();
 114:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <init_usart>
    while(1)
    {
        if(PINC & (1<<PC5))
 118:	e6 e2       	ldi	r30, 0x26	; 38
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	88 2f       	mov	r24, r24
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	80 72       	andi	r24, 0x20	; 32
 124:	90 70       	andi	r25, 0x00	; 0
 126:	00 97       	sbiw	r24, 0x00	; 0
 128:	b9 f3       	breq	.-18     	; 0x118 <main+0x2c>
        {
            itoa(get4bit(),str,10);
 12a:	0e 94 40 00 	call	0x80	; 0x80 <get4bit>
 12e:	88 2f       	mov	r24, r24
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	9e 01       	movw	r18, r28
 134:	2f 5f       	subi	r18, 0xFF	; 255
 136:	3f 4f       	sbci	r19, 0xFF	; 255
 138:	b9 01       	movw	r22, r18
 13a:	4a e0       	ldi	r20, 0x0A	; 10
 13c:	50 e0       	ldi	r21, 0x00	; 0
 13e:	0e 94 6d 01 	call	0x2da	; 0x2da <itoa>
            _puts(str);
 142:	ce 01       	movw	r24, r28
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	0e 94 1d 01 	call	0x23a	; 0x23a <_puts>
            delay(100);
 14a:	64 e6       	ldi	r22, 0x64	; 100
 14c:	70 e0       	ldi	r23, 0x00	; 0
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 ac 00 	call	0x158	; 0x158 <delay>
 156:	e0 cf       	rjmp	.-64     	; 0x118 <main+0x2c>

00000158 <delay>:
#include <avr/io.h>

void delay(uint32_t ms)
{
 158:	df 93       	push	r29
 15a:	cf 93       	push	r28
 15c:	00 d0       	rcall	.+0      	; 0x15e <delay+0x6>
 15e:	00 d0       	rcall	.+0      	; 0x160 <delay+0x8>
 160:	0f 92       	push	r0
 162:	cd b7       	in	r28, 0x3d	; 61
 164:	de b7       	in	r29, 0x3e	; 62
 166:	69 83       	std	Y+1, r22	; 0x01
 168:	7a 83       	std	Y+2, r23	; 0x02
 16a:	8b 83       	std	Y+3, r24	; 0x03
 16c:	9c 83       	std	Y+4, r25	; 0x04
    ms*=371;
 16e:	89 81       	ldd	r24, Y+1	; 0x01
 170:	9a 81       	ldd	r25, Y+2	; 0x02
 172:	ab 81       	ldd	r26, Y+3	; 0x03
 174:	bc 81       	ldd	r27, Y+4	; 0x04
 176:	23 e7       	ldi	r18, 0x73	; 115
 178:	31 e0       	ldi	r19, 0x01	; 1
 17a:	40 e0       	ldi	r20, 0x00	; 0
 17c:	50 e0       	ldi	r21, 0x00	; 0
 17e:	bc 01       	movw	r22, r24
 180:	cd 01       	movw	r24, r26
 182:	0e 94 4e 01 	call	0x29c	; 0x29c <__mulsi3>
 186:	dc 01       	movw	r26, r24
 188:	cb 01       	movw	r24, r22
 18a:	89 83       	std	Y+1, r24	; 0x01
 18c:	9a 83       	std	Y+2, r25	; 0x02
 18e:	ab 83       	std	Y+3, r26	; 0x03
 190:	bc 83       	std	Y+4, r27	; 0x04
    while(ms--);
 192:	1d 82       	std	Y+5, r1	; 0x05
 194:	89 81       	ldd	r24, Y+1	; 0x01
 196:	9a 81       	ldd	r25, Y+2	; 0x02
 198:	ab 81       	ldd	r26, Y+3	; 0x03
 19a:	bc 81       	ldd	r27, Y+4	; 0x04
 19c:	00 97       	sbiw	r24, 0x00	; 0
 19e:	a1 05       	cpc	r26, r1
 1a0:	b1 05       	cpc	r27, r1
 1a2:	11 f0       	breq	.+4      	; 0x1a8 <delay+0x50>
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	8d 83       	std	Y+5, r24	; 0x05
 1a8:	89 81       	ldd	r24, Y+1	; 0x01
 1aa:	9a 81       	ldd	r25, Y+2	; 0x02
 1ac:	ab 81       	ldd	r26, Y+3	; 0x03
 1ae:	bc 81       	ldd	r27, Y+4	; 0x04
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	a1 09       	sbc	r26, r1
 1b4:	b1 09       	sbc	r27, r1
 1b6:	89 83       	std	Y+1, r24	; 0x01
 1b8:	9a 83       	std	Y+2, r25	; 0x02
 1ba:	ab 83       	std	Y+3, r26	; 0x03
 1bc:	bc 83       	std	Y+4, r27	; 0x04
 1be:	8d 81       	ldd	r24, Y+5	; 0x05
 1c0:	88 23       	and	r24, r24
 1c2:	39 f7       	brne	.-50     	; 0x192 <delay+0x3a>
}
 1c4:	0f 90       	pop	r0
 1c6:	0f 90       	pop	r0
 1c8:	0f 90       	pop	r0
 1ca:	0f 90       	pop	r0
 1cc:	0f 90       	pop	r0
 1ce:	cf 91       	pop	r28
 1d0:	df 91       	pop	r29
 1d2:	08 95       	ret

000001d4 <init_usart>:
 #include <avr/io.h>

void init_usart(void)
{
 1d4:	df 93       	push	r29
 1d6:	cf 93       	push	r28
 1d8:	cd b7       	in	r28, 0x3d	; 61
 1da:	de b7       	in	r29, 0x3e	; 62
    UBRR0L = 103;                                //(16000000ul/(16ul*9600ul))-1;       //Baudrate 9600
 1dc:	e4 ec       	ldi	r30, 0xC4	; 196
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	87 e6       	ldi	r24, 0x67	; 103
 1e2:	80 83       	st	Z, r24
    UBRR0H = 0;
 1e4:	e5 ec       	ldi	r30, 0xC5	; 197
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	10 82       	st	Z, r1
    UCSR0B |= (1<<TXEN0) | (1<<RXEN0);           // Sender und Empfänger aktivieren
 1ea:	a1 ec       	ldi	r26, 0xC1	; 193
 1ec:	b0 e0       	ldi	r27, 0x00	; 0
 1ee:	e1 ec       	ldi	r30, 0xC1	; 193
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	88 61       	ori	r24, 0x18	; 24
 1f6:	8c 93       	st	X, r24
    UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);         // 8-Bit Übertragung
 1f8:	a2 ec       	ldi	r26, 0xC2	; 194
 1fa:	b0 e0       	ldi	r27, 0x00	; 0
 1fc:	e2 ec       	ldi	r30, 0xC2	; 194
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	86 60       	ori	r24, 0x06	; 6
 204:	8c 93       	st	X, r24
 // Asynchrone Übertragung (UMSEL00=0 und UMSEL01=0);
}
 206:	cf 91       	pop	r28
 208:	df 91       	pop	r29
 20a:	08 95       	ret

0000020c <_putch>:
void _putch(unsigned char ch)
{
 20c:	df 93       	push	r29
 20e:	cf 93       	push	r28
 210:	0f 92       	push	r0
 212:	cd b7       	in	r28, 0x3d	; 61
 214:	de b7       	in	r29, 0x3e	; 62
 216:	89 83       	std	Y+1, r24	; 0x01
    while(!(UCSR0A & (1<<UDRE0)));
 218:	e0 ec       	ldi	r30, 0xC0	; 192
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	88 2f       	mov	r24, r24
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	80 72       	andi	r24, 0x20	; 32
 224:	90 70       	andi	r25, 0x00	; 0
 226:	00 97       	sbiw	r24, 0x00	; 0
 228:	b9 f3       	breq	.-18     	; 0x218 <_putch+0xc>
    UDR0 = ch;
 22a:	e6 ec       	ldi	r30, 0xC6	; 198
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	89 81       	ldd	r24, Y+1	; 0x01
 230:	80 83       	st	Z, r24
}
 232:	0f 90       	pop	r0
 234:	cf 91       	pop	r28
 236:	df 91       	pop	r29
 238:	08 95       	ret

0000023a <_puts>:
void _puts(char st[])
{
 23a:	df 93       	push	r29
 23c:	cf 93       	push	r28
 23e:	00 d0       	rcall	.+0      	; 0x240 <_puts+0x6>
 240:	0f 92       	push	r0
 242:	cd b7       	in	r28, 0x3d	; 61
 244:	de b7       	in	r29, 0x3e	; 62
 246:	9b 83       	std	Y+3, r25	; 0x03
 248:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t i=0;
 24a:	19 82       	std	Y+1, r1	; 0x01
 24c:	10 c0       	rjmp	.+32     	; 0x26e <_puts+0x34>
    while(st[i])
        _putch(st[i++]);
 24e:	89 81       	ldd	r24, Y+1	; 0x01
 250:	28 2f       	mov	r18, r24
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	8a 81       	ldd	r24, Y+2	; 0x02
 256:	9b 81       	ldd	r25, Y+3	; 0x03
 258:	fc 01       	movw	r30, r24
 25a:	e2 0f       	add	r30, r18
 25c:	f3 1f       	adc	r31, r19
 25e:	80 81       	ld	r24, Z
 260:	98 2f       	mov	r25, r24
 262:	89 81       	ldd	r24, Y+1	; 0x01
 264:	8f 5f       	subi	r24, 0xFF	; 255
 266:	89 83       	std	Y+1, r24	; 0x01
 268:	89 2f       	mov	r24, r25
 26a:	0e 94 06 01 	call	0x20c	; 0x20c <_putch>
    UDR0 = ch;
}
void _puts(char st[])
{
    uint8_t i=0;
    while(st[i])
 26e:	89 81       	ldd	r24, Y+1	; 0x01
 270:	28 2f       	mov	r18, r24
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	8a 81       	ldd	r24, Y+2	; 0x02
 276:	9b 81       	ldd	r25, Y+3	; 0x03
 278:	fc 01       	movw	r30, r24
 27a:	e2 0f       	add	r30, r18
 27c:	f3 1f       	adc	r31, r19
 27e:	80 81       	ld	r24, Z
 280:	88 23       	and	r24, r24
 282:	29 f7       	brne	.-54     	; 0x24e <_puts+0x14>
        _putch(st[i++]);
    _putch(13);   // CR
 284:	8d e0       	ldi	r24, 0x0D	; 13
 286:	0e 94 06 01 	call	0x20c	; 0x20c <_putch>
    _putch(10);   // NL/LF
 28a:	8a e0       	ldi	r24, 0x0A	; 10
 28c:	0e 94 06 01 	call	0x20c	; 0x20c <_putch>
}
 290:	0f 90       	pop	r0
 292:	0f 90       	pop	r0
 294:	0f 90       	pop	r0
 296:	cf 91       	pop	r28
 298:	df 91       	pop	r29
 29a:	08 95       	ret

0000029c <__mulsi3>:
 29c:	62 9f       	mul	r22, r18
 29e:	d0 01       	movw	r26, r0
 2a0:	73 9f       	mul	r23, r19
 2a2:	f0 01       	movw	r30, r0
 2a4:	82 9f       	mul	r24, r18
 2a6:	e0 0d       	add	r30, r0
 2a8:	f1 1d       	adc	r31, r1
 2aa:	64 9f       	mul	r22, r20
 2ac:	e0 0d       	add	r30, r0
 2ae:	f1 1d       	adc	r31, r1
 2b0:	92 9f       	mul	r25, r18
 2b2:	f0 0d       	add	r31, r0
 2b4:	83 9f       	mul	r24, r19
 2b6:	f0 0d       	add	r31, r0
 2b8:	74 9f       	mul	r23, r20
 2ba:	f0 0d       	add	r31, r0
 2bc:	65 9f       	mul	r22, r21
 2be:	f0 0d       	add	r31, r0
 2c0:	99 27       	eor	r25, r25
 2c2:	72 9f       	mul	r23, r18
 2c4:	b0 0d       	add	r27, r0
 2c6:	e1 1d       	adc	r30, r1
 2c8:	f9 1f       	adc	r31, r25
 2ca:	63 9f       	mul	r22, r19
 2cc:	b0 0d       	add	r27, r0
 2ce:	e1 1d       	adc	r30, r1
 2d0:	f9 1f       	adc	r31, r25
 2d2:	bd 01       	movw	r22, r26
 2d4:	cf 01       	movw	r24, r30
 2d6:	11 24       	eor	r1, r1
 2d8:	08 95       	ret

000002da <itoa>:
 2da:	fb 01       	movw	r30, r22
 2dc:	9f 01       	movw	r18, r30
 2de:	e8 94       	clt
 2e0:	42 30       	cpi	r20, 0x02	; 2
 2e2:	c4 f0       	brlt	.+48     	; 0x314 <itoa+0x3a>
 2e4:	45 32       	cpi	r20, 0x25	; 37
 2e6:	b4 f4       	brge	.+44     	; 0x314 <itoa+0x3a>
 2e8:	4a 30       	cpi	r20, 0x0A	; 10
 2ea:	29 f4       	brne	.+10     	; 0x2f6 <itoa+0x1c>
 2ec:	97 fb       	bst	r25, 7
 2ee:	1e f4       	brtc	.+6      	; 0x2f6 <itoa+0x1c>
 2f0:	90 95       	com	r25
 2f2:	81 95       	neg	r24
 2f4:	9f 4f       	sbci	r25, 0xFF	; 255
 2f6:	64 2f       	mov	r22, r20
 2f8:	77 27       	eor	r23, r23
 2fa:	0e 94 9e 01 	call	0x33c	; 0x33c <__udivmodhi4>
 2fe:	80 5d       	subi	r24, 0xD0	; 208
 300:	8a 33       	cpi	r24, 0x3A	; 58
 302:	0c f0       	brlt	.+2      	; 0x306 <itoa+0x2c>
 304:	89 5d       	subi	r24, 0xD9	; 217
 306:	81 93       	st	Z+, r24
 308:	cb 01       	movw	r24, r22
 30a:	00 97       	sbiw	r24, 0x00	; 0
 30c:	a1 f7       	brne	.-24     	; 0x2f6 <itoa+0x1c>
 30e:	16 f4       	brtc	.+4      	; 0x314 <itoa+0x3a>
 310:	5d e2       	ldi	r21, 0x2D	; 45
 312:	51 93       	st	Z+, r21
 314:	10 82       	st	Z, r1
 316:	c9 01       	movw	r24, r18
 318:	0c 94 8e 01 	jmp	0x31c	; 0x31c <strrev>

0000031c <strrev>:
 31c:	dc 01       	movw	r26, r24
 31e:	fc 01       	movw	r30, r24
 320:	67 2f       	mov	r22, r23
 322:	71 91       	ld	r23, Z+
 324:	77 23       	and	r23, r23
 326:	e1 f7       	brne	.-8      	; 0x320 <strrev+0x4>
 328:	32 97       	sbiw	r30, 0x02	; 2
 32a:	04 c0       	rjmp	.+8      	; 0x334 <strrev+0x18>
 32c:	7c 91       	ld	r23, X
 32e:	6d 93       	st	X+, r22
 330:	70 83       	st	Z, r23
 332:	62 91       	ld	r22, -Z
 334:	ae 17       	cp	r26, r30
 336:	bf 07       	cpc	r27, r31
 338:	c8 f3       	brcs	.-14     	; 0x32c <strrev+0x10>
 33a:	08 95       	ret

0000033c <__udivmodhi4>:
 33c:	aa 1b       	sub	r26, r26
 33e:	bb 1b       	sub	r27, r27
 340:	51 e1       	ldi	r21, 0x11	; 17
 342:	07 c0       	rjmp	.+14     	; 0x352 <__udivmodhi4_ep>

00000344 <__udivmodhi4_loop>:
 344:	aa 1f       	adc	r26, r26
 346:	bb 1f       	adc	r27, r27
 348:	a6 17       	cp	r26, r22
 34a:	b7 07       	cpc	r27, r23
 34c:	10 f0       	brcs	.+4      	; 0x352 <__udivmodhi4_ep>
 34e:	a6 1b       	sub	r26, r22
 350:	b7 0b       	sbc	r27, r23

00000352 <__udivmodhi4_ep>:
 352:	88 1f       	adc	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	5a 95       	dec	r21
 358:	a9 f7       	brne	.-22     	; 0x344 <__udivmodhi4_loop>
 35a:	80 95       	com	r24
 35c:	90 95       	com	r25
 35e:	bc 01       	movw	r22, r24
 360:	cd 01       	movw	r24, r26
 362:	08 95       	ret

00000364 <_exit>:
 364:	f8 94       	cli

00000366 <__stop_program>:
 366:	ff cf       	rjmp	.-2      	; 0x366 <__stop_program>
