
bin\Debug\ÜbungFürTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .fuse         00000003  00820000  00820000  00000350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000353  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000007d  00000000  00000000  00000373  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000021d  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000013c  00000000  00000000  0000060d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000267  00000000  00000000  00000749  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  000009b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000db  00000000  00000000  00000a30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <main>
  78:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <delay>:
#ifndef MYDELAY_H_INCLUDED
#define MYDELAY_H_INCLUDED
#include <avr/io.h>

void delay(uint32_t ms)
{
  80:	df 93       	push	r29
  82:	cf 93       	push	r28
  84:	00 d0       	rcall	.+0      	; 0x86 <delay+0x6>
  86:	00 d0       	rcall	.+0      	; 0x88 <delay+0x8>
  88:	0f 92       	push	r0
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
  8e:	69 83       	std	Y+1, r22	; 0x01
  90:	7a 83       	std	Y+2, r23	; 0x02
  92:	8b 83       	std	Y+3, r24	; 0x03
  94:	9c 83       	std	Y+4, r25	; 0x04
    ms*=371;
  96:	89 81       	ldd	r24, Y+1	; 0x01
  98:	9a 81       	ldd	r25, Y+2	; 0x02
  9a:	ab 81       	ldd	r26, Y+3	; 0x03
  9c:	bc 81       	ldd	r27, Y+4	; 0x04
  9e:	23 e7       	ldi	r18, 0x73	; 115
  a0:	31 e0       	ldi	r19, 0x01	; 1
  a2:	40 e0       	ldi	r20, 0x00	; 0
  a4:	50 e0       	ldi	r21, 0x00	; 0
  a6:	bc 01       	movw	r22, r24
  a8:	cd 01       	movw	r24, r26
  aa:	0e 94 4d 01 	call	0x29a	; 0x29a <__mulsi3>
  ae:	dc 01       	movw	r26, r24
  b0:	cb 01       	movw	r24, r22
  b2:	89 83       	std	Y+1, r24	; 0x01
  b4:	9a 83       	std	Y+2, r25	; 0x02
  b6:	ab 83       	std	Y+3, r26	; 0x03
  b8:	bc 83       	std	Y+4, r27	; 0x04
    while(ms--);
  ba:	1d 82       	std	Y+5, r1	; 0x05
  bc:	89 81       	ldd	r24, Y+1	; 0x01
  be:	9a 81       	ldd	r25, Y+2	; 0x02
  c0:	ab 81       	ldd	r26, Y+3	; 0x03
  c2:	bc 81       	ldd	r27, Y+4	; 0x04
  c4:	00 97       	sbiw	r24, 0x00	; 0
  c6:	a1 05       	cpc	r26, r1
  c8:	b1 05       	cpc	r27, r1
  ca:	11 f0       	breq	.+4      	; 0xd0 <delay+0x50>
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	8d 83       	std	Y+5, r24	; 0x05
  d0:	89 81       	ldd	r24, Y+1	; 0x01
  d2:	9a 81       	ldd	r25, Y+2	; 0x02
  d4:	ab 81       	ldd	r26, Y+3	; 0x03
  d6:	bc 81       	ldd	r27, Y+4	; 0x04
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	a1 09       	sbc	r26, r1
  dc:	b1 09       	sbc	r27, r1
  de:	89 83       	std	Y+1, r24	; 0x01
  e0:	9a 83       	std	Y+2, r25	; 0x02
  e2:	ab 83       	std	Y+3, r26	; 0x03
  e4:	bc 83       	std	Y+4, r27	; 0x04
  e6:	8d 81       	ldd	r24, Y+5	; 0x05
  e8:	88 23       	and	r24, r24
  ea:	39 f7       	brne	.-50     	; 0xba <delay+0x3a>
}
  ec:	0f 90       	pop	r0
  ee:	0f 90       	pop	r0
  f0:	0f 90       	pop	r0
  f2:	0f 90       	pop	r0
  f4:	0f 90       	pop	r0
  f6:	cf 91       	pop	r28
  f8:	df 91       	pop	r29
  fa:	08 95       	ret

000000fc <init_usart>:
#ifndef UART_H_INCLUDED
#define UART_H_INCLUDED
#include <avr/io.h>

void init_usart(void)
{
  fc:	df 93       	push	r29
  fe:	cf 93       	push	r28
 100:	cd b7       	in	r28, 0x3d	; 61
 102:	de b7       	in	r29, 0x3e	; 62
    UBRR0L = 103;                                //(16000000ul/(16ul*9600ul))-1;       //Baudrate 9600
 104:	e4 ec       	ldi	r30, 0xC4	; 196
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	87 e6       	ldi	r24, 0x67	; 103
 10a:	80 83       	st	Z, r24
    UBRR0H = 0;
 10c:	e5 ec       	ldi	r30, 0xC5	; 197
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	10 82       	st	Z, r1
    UCSR0B |= (1<<TXEN0) | (1<<RXEN0);           // Sender und EmpfÃ¤nger aktivieren
 112:	a1 ec       	ldi	r26, 0xC1	; 193
 114:	b0 e0       	ldi	r27, 0x00	; 0
 116:	e1 ec       	ldi	r30, 0xC1	; 193
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	88 61       	ori	r24, 0x18	; 24
 11e:	8c 93       	st	X, r24
    UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);         // 8-Bit Ãœbertragung
 120:	e2 ec       	ldi	r30, 0xC2	; 194
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	86 e0       	ldi	r24, 0x06	; 6
 126:	80 83       	st	Z, r24
 // Asynchrone Ãœbertragung (UMSEL00=0 und UMSEL01=0);
}
 128:	cf 91       	pop	r28
 12a:	df 91       	pop	r29
 12c:	08 95       	ret

0000012e <_putch>:
void _putch(unsigned char ch)
{
 12e:	df 93       	push	r29
 130:	cf 93       	push	r28
 132:	0f 92       	push	r0
 134:	cd b7       	in	r28, 0x3d	; 61
 136:	de b7       	in	r29, 0x3e	; 62
 138:	89 83       	std	Y+1, r24	; 0x01
    while(!(UCSR0A & (1<<UDRE0)));
 13a:	e0 ec       	ldi	r30, 0xC0	; 192
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	88 2f       	mov	r24, r24
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	80 72       	andi	r24, 0x20	; 32
 146:	90 70       	andi	r25, 0x00	; 0
 148:	00 97       	sbiw	r24, 0x00	; 0
 14a:	b9 f3       	breq	.-18     	; 0x13a <_putch+0xc>
    UDR0 = ch;
 14c:	e6 ec       	ldi	r30, 0xC6	; 198
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	89 81       	ldd	r24, Y+1	; 0x01
 152:	80 83       	st	Z, r24
}
 154:	0f 90       	pop	r0
 156:	cf 91       	pop	r28
 158:	df 91       	pop	r29
 15a:	08 95       	ret

0000015c <_puts>:
void _puts(char st[])
{
 15c:	df 93       	push	r29
 15e:	cf 93       	push	r28
 160:	00 d0       	rcall	.+0      	; 0x162 <_puts+0x6>
 162:	0f 92       	push	r0
 164:	cd b7       	in	r28, 0x3d	; 61
 166:	de b7       	in	r29, 0x3e	; 62
 168:	9b 83       	std	Y+3, r25	; 0x03
 16a:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t i=0;
 16c:	19 82       	std	Y+1, r1	; 0x01
 16e:	10 c0       	rjmp	.+32     	; 0x190 <_puts+0x34>
    while(st[i])
        _putch(st[i++]);
 170:	89 81       	ldd	r24, Y+1	; 0x01
 172:	28 2f       	mov	r18, r24
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	8a 81       	ldd	r24, Y+2	; 0x02
 178:	9b 81       	ldd	r25, Y+3	; 0x03
 17a:	fc 01       	movw	r30, r24
 17c:	e2 0f       	add	r30, r18
 17e:	f3 1f       	adc	r31, r19
 180:	80 81       	ld	r24, Z
 182:	98 2f       	mov	r25, r24
 184:	89 81       	ldd	r24, Y+1	; 0x01
 186:	8f 5f       	subi	r24, 0xFF	; 255
 188:	89 83       	std	Y+1, r24	; 0x01
 18a:	89 2f       	mov	r24, r25
 18c:	0e 94 97 00 	call	0x12e	; 0x12e <_putch>
    UDR0 = ch;
}
void _puts(char st[])
{
    uint8_t i=0;
    while(st[i])
 190:	89 81       	ldd	r24, Y+1	; 0x01
 192:	28 2f       	mov	r18, r24
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	8a 81       	ldd	r24, Y+2	; 0x02
 198:	9b 81       	ldd	r25, Y+3	; 0x03
 19a:	fc 01       	movw	r30, r24
 19c:	e2 0f       	add	r30, r18
 19e:	f3 1f       	adc	r31, r19
 1a0:	80 81       	ld	r24, Z
 1a2:	88 23       	and	r24, r24
 1a4:	29 f7       	brne	.-54     	; 0x170 <_puts+0x14>
        _putch(st[i++]);
    _putch(32);
 1a6:	80 e2       	ldi	r24, 0x20	; 32
 1a8:	0e 94 97 00 	call	0x12e	; 0x12e <_putch>
}
 1ac:	0f 90       	pop	r0
 1ae:	0f 90       	pop	r0
 1b0:	0f 90       	pop	r0
 1b2:	cf 91       	pop	r28
 1b4:	df 91       	pop	r29
 1b6:	08 95       	ret

000001b8 <_getc>:
uint8_t _getc()
{
 1b8:	df 93       	push	r29
 1ba:	cf 93       	push	r28
 1bc:	cd b7       	in	r28, 0x3d	; 61
 1be:	de b7       	in	r29, 0x3e	; 62
    while(!(UCSR0A & (1 << RXC0)));
 1c0:	e0 ec       	ldi	r30, 0xC0	; 192
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	88 23       	and	r24, r24
 1c8:	dc f7       	brge	.-10     	; 0x1c0 <_getc+0x8>
    return UDR0;
 1ca:	e6 ec       	ldi	r30, 0xC6	; 198
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
}
 1d0:	cf 91       	pop	r28
 1d2:	df 91       	pop	r29
 1d4:	08 95       	ret

000001d6 <_newline>:
void _newline()
{
 1d6:	df 93       	push	r29
 1d8:	cf 93       	push	r28
 1da:	cd b7       	in	r28, 0x3d	; 61
 1dc:	de b7       	in	r29, 0x3e	; 62
    _putch(13);   // CR
 1de:	8d e0       	ldi	r24, 0x0D	; 13
 1e0:	0e 94 97 00 	call	0x12e	; 0x12e <_putch>
    _putch(10);   // LF
 1e4:	8a e0       	ldi	r24, 0x0A	; 10
 1e6:	0e 94 97 00 	call	0x12e	; 0x12e <_putch>
}
 1ea:	cf 91       	pop	r28
 1ec:	df 91       	pop	r29
 1ee:	08 95       	ret

000001f0 <main>:
#include <avr/io.h>
#include <stdlib.h>
#define uint uint8_t

int main(void)
{
 1f0:	df 93       	push	r29
 1f2:	cf 93       	push	r28
 1f4:	00 d0       	rcall	.+0      	; 0x1f6 <main+0x6>
 1f6:	0f 92       	push	r0
 1f8:	cd b7       	in	r28, 0x3d	; 61
 1fa:	de b7       	in	r29, 0x3e	; 62
    ADMUX=0x40;
 1fc:	ec e7       	ldi	r30, 0x7C	; 124
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 e4       	ldi	r24, 0x40	; 64
 202:	80 83       	st	Z, r24
    ADCSRA|=0x07;
 204:	aa e7       	ldi	r26, 0x7A	; 122
 206:	b0 e0       	ldi	r27, 0x00	; 0
 208:	ea e7       	ldi	r30, 0x7A	; 122
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	87 60       	ori	r24, 0x07	; 7
 210:	8c 93       	st	X, r24
    ADCSRA|=1<<ADEN;
 212:	aa e7       	ldi	r26, 0x7A	; 122
 214:	b0 e0       	ldi	r27, 0x00	; 0
 216:	ea e7       	ldi	r30, 0x7A	; 122
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z
 21c:	80 68       	ori	r24, 0x80	; 128
 21e:	8c 93       	st	X, r24
    DDRD=1<<2;
 220:	ea e2       	ldi	r30, 0x2A	; 42
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	84 e0       	ldi	r24, 0x04	; 4
 226:	80 83       	st	Z, r24

    uint16_t spg;
    while(1)
    {
        ADCSRA|=(1<<ADSC);
 228:	aa e7       	ldi	r26, 0x7A	; 122
 22a:	b0 e0       	ldi	r27, 0x00	; 0
 22c:	ea e7       	ldi	r30, 0x7A	; 122
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	80 64       	ori	r24, 0x40	; 64
 234:	8c 93       	st	X, r24
        while(ADCSRA&(1<<ADSC));
 236:	ea e7       	ldi	r30, 0x7A	; 122
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	80 81       	ld	r24, Z
 23c:	88 2f       	mov	r24, r24
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	80 74       	andi	r24, 0x40	; 64
 242:	90 70       	andi	r25, 0x00	; 0
 244:	00 97       	sbiw	r24, 0x00	; 0
 246:	b9 f7       	brne	.-18     	; 0x236 <main+0x46>
        spg=ADC;
 248:	e8 e7       	ldi	r30, 0x78	; 120
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	91 81       	ldd	r25, Z+1	; 0x01
 250:	9a 83       	std	Y+2, r25	; 0x02
 252:	89 83       	std	Y+1, r24	; 0x01
        delay(50);
 254:	62 e3       	ldi	r22, 0x32	; 50
 256:	70 e0       	ldi	r23, 0x00	; 0
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 40 00 	call	0x80	; 0x80 <delay>
        (spg>907)?(PORTD=1<<2):(spg<680)?(PORTD=0):(PORTD=PORTD);
 260:	89 81       	ldd	r24, Y+1	; 0x01
 262:	9a 81       	ldd	r25, Y+2	; 0x02
 264:	23 e0       	ldi	r18, 0x03	; 3
 266:	8c 38       	cpi	r24, 0x8C	; 140
 268:	92 07       	cpc	r25, r18
 26a:	28 f0       	brcs	.+10     	; 0x276 <main+0x86>
 26c:	eb e2       	ldi	r30, 0x2B	; 43
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	84 e0       	ldi	r24, 0x04	; 4
 272:	80 83       	st	Z, r24
 274:	d9 cf       	rjmp	.-78     	; 0x228 <main+0x38>
 276:	89 81       	ldd	r24, Y+1	; 0x01
 278:	9a 81       	ldd	r25, Y+2	; 0x02
 27a:	22 e0       	ldi	r18, 0x02	; 2
 27c:	88 3a       	cpi	r24, 0xA8	; 168
 27e:	92 07       	cpc	r25, r18
 280:	20 f4       	brcc	.+8      	; 0x28a <main+0x9a>
 282:	eb e2       	ldi	r30, 0x2B	; 43
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	10 82       	st	Z, r1
 288:	cf cf       	rjmp	.-98     	; 0x228 <main+0x38>
 28a:	eb e2       	ldi	r30, 0x2B	; 43
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	ab e2       	ldi	r26, 0x2B	; 43
 290:	b0 e0       	ldi	r27, 0x00	; 0
 292:	8c 91       	ld	r24, X
 294:	80 83       	st	Z, r24
 296:	80 81       	ld	r24, Z
 298:	c7 cf       	rjmp	.-114    	; 0x228 <main+0x38>

0000029a <__mulsi3>:
 29a:	62 9f       	mul	r22, r18
 29c:	d0 01       	movw	r26, r0
 29e:	73 9f       	mul	r23, r19
 2a0:	f0 01       	movw	r30, r0
 2a2:	82 9f       	mul	r24, r18
 2a4:	e0 0d       	add	r30, r0
 2a6:	f1 1d       	adc	r31, r1
 2a8:	64 9f       	mul	r22, r20
 2aa:	e0 0d       	add	r30, r0
 2ac:	f1 1d       	adc	r31, r1
 2ae:	92 9f       	mul	r25, r18
 2b0:	f0 0d       	add	r31, r0
 2b2:	83 9f       	mul	r24, r19
 2b4:	f0 0d       	add	r31, r0
 2b6:	74 9f       	mul	r23, r20
 2b8:	f0 0d       	add	r31, r0
 2ba:	65 9f       	mul	r22, r21
 2bc:	f0 0d       	add	r31, r0
 2be:	99 27       	eor	r25, r25
 2c0:	72 9f       	mul	r23, r18
 2c2:	b0 0d       	add	r27, r0
 2c4:	e1 1d       	adc	r30, r1
 2c6:	f9 1f       	adc	r31, r25
 2c8:	63 9f       	mul	r22, r19
 2ca:	b0 0d       	add	r27, r0
 2cc:	e1 1d       	adc	r30, r1
 2ce:	f9 1f       	adc	r31, r25
 2d0:	bd 01       	movw	r22, r26
 2d2:	cf 01       	movw	r24, r30
 2d4:	11 24       	eor	r1, r1
 2d6:	08 95       	ret

000002d8 <_exit>:
 2d8:	f8 94       	cli

000002da <__stop_program>:
 2da:	ff cf       	rjmp	.-2      	; 0x2da <__stop_program>
