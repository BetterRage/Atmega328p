
bin\Debug\PWM_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .fuse         00000003  00820000  00820000  00000242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000245  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000042  00000000  00000000  00000265  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000016d  00000000  00000000  000002a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000f6  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000019a  00000000  00000000  0000050a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000030  00000000  00000000  000006a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000bd  00000000  00000000  000006d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
  78:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <delay>:
#ifndef MYDELAY_H_INCLUDED
#define MYDELAY_H_INCLUDED
#include <avr/io.h>

void delay(uint32_t ms)
{
  80:	df 93       	push	r29
  82:	cf 93       	push	r28
  84:	00 d0       	rcall	.+0      	; 0x86 <delay+0x6>
  86:	00 d0       	rcall	.+0      	; 0x88 <delay+0x8>
  88:	0f 92       	push	r0
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
  8e:	69 83       	std	Y+1, r22	; 0x01
  90:	7a 83       	std	Y+2, r23	; 0x02
  92:	8b 83       	std	Y+3, r24	; 0x03
  94:	9c 83       	std	Y+4, r25	; 0x04
    ms*=371;
  96:	89 81       	ldd	r24, Y+1	; 0x01
  98:	9a 81       	ldd	r25, Y+2	; 0x02
  9a:	ab 81       	ldd	r26, Y+3	; 0x03
  9c:	bc 81       	ldd	r27, Y+4	; 0x04
  9e:	23 e7       	ldi	r18, 0x73	; 115
  a0:	31 e0       	ldi	r19, 0x01	; 1
  a2:	40 e0       	ldi	r20, 0x00	; 0
  a4:	50 e0       	ldi	r21, 0x00	; 0
  a6:	bc 01       	movw	r22, r24
  a8:	cd 01       	movw	r24, r26
  aa:	0e 94 c6 00 	call	0x18c	; 0x18c <__mulsi3>
  ae:	dc 01       	movw	r26, r24
  b0:	cb 01       	movw	r24, r22
  b2:	89 83       	std	Y+1, r24	; 0x01
  b4:	9a 83       	std	Y+2, r25	; 0x02
  b6:	ab 83       	std	Y+3, r26	; 0x03
  b8:	bc 83       	std	Y+4, r27	; 0x04
    while(ms--);
  ba:	1d 82       	std	Y+5, r1	; 0x05
  bc:	89 81       	ldd	r24, Y+1	; 0x01
  be:	9a 81       	ldd	r25, Y+2	; 0x02
  c0:	ab 81       	ldd	r26, Y+3	; 0x03
  c2:	bc 81       	ldd	r27, Y+4	; 0x04
  c4:	00 97       	sbiw	r24, 0x00	; 0
  c6:	a1 05       	cpc	r26, r1
  c8:	b1 05       	cpc	r27, r1
  ca:	11 f0       	breq	.+4      	; 0xd0 <delay+0x50>
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	8d 83       	std	Y+5, r24	; 0x05
  d0:	89 81       	ldd	r24, Y+1	; 0x01
  d2:	9a 81       	ldd	r25, Y+2	; 0x02
  d4:	ab 81       	ldd	r26, Y+3	; 0x03
  d6:	bc 81       	ldd	r27, Y+4	; 0x04
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	a1 09       	sbc	r26, r1
  dc:	b1 09       	sbc	r27, r1
  de:	89 83       	std	Y+1, r24	; 0x01
  e0:	9a 83       	std	Y+2, r25	; 0x02
  e2:	ab 83       	std	Y+3, r26	; 0x03
  e4:	bc 83       	std	Y+4, r27	; 0x04
  e6:	8d 81       	ldd	r24, Y+5	; 0x05
  e8:	88 23       	and	r24, r24
  ea:	39 f7       	brne	.-50     	; 0xba <delay+0x3a>
}
  ec:	0f 90       	pop	r0
  ee:	0f 90       	pop	r0
  f0:	0f 90       	pop	r0
  f2:	0f 90       	pop	r0
  f4:	0f 90       	pop	r0
  f6:	cf 91       	pop	r28
  f8:	df 91       	pop	r29
  fa:	08 95       	ret

000000fc <main>:
#include "../Headerfunktionen/mydelay.h"
#include <avr/io.h>
#include <avr/interrupt.h>

int main(void)
{
  fc:	df 93       	push	r29
  fe:	cf 93       	push	r28
 100:	0f 92       	push	r0
 102:	cd b7       	in	r28, 0x3d	; 61
 104:	de b7       	in	r29, 0x3e	; 62
    ADCSRA|=0x07; //Freque
 106:	aa e7       	ldi	r26, 0x7A	; 122
 108:	b0 e0       	ldi	r27, 0x00	; 0
 10a:	ea e7       	ldi	r30, 0x7A	; 122
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	87 60       	ori	r24, 0x07	; 7
 112:	8c 93       	st	X, r24
    ADCSRA|=(1<<ADEN);
 114:	aa e7       	ldi	r26, 0x7A	; 122
 116:	b0 e0       	ldi	r27, 0x00	; 0
 118:	ea e7       	ldi	r30, 0x7A	; 122
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	80 68       	ori	r24, 0x80	; 128
 120:	8c 93       	st	X, r24
    ADMUX=0x60;
 122:	ec e7       	ldi	r30, 0x7C	; 124
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 e6       	ldi	r24, 0x60	; 96
 128:	80 83       	st	Z, r24
    uint8_t x;
    DDRD|=0b11111100;
 12a:	aa e2       	ldi	r26, 0x2A	; 42
 12c:	b0 e0       	ldi	r27, 0x00	; 0
 12e:	ea e2       	ldi	r30, 0x2A	; 42
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	8c 6f       	ori	r24, 0xFC	; 252
 136:	8c 93       	st	X, r24
    TCCR0A=0x83;
 138:	e4 e4       	ldi	r30, 0x44	; 68
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	83 e8       	ldi	r24, 0x83	; 131
 13e:	80 83       	st	Z, r24
    TIMSK0|=(1<<OCIE0A);
 140:	ae e6       	ldi	r26, 0x6E	; 110
 142:	b0 e0       	ldi	r27, 0x00	; 0
 144:	ee e6       	ldi	r30, 0x6E	; 110
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	82 60       	ori	r24, 0x02	; 2
 14c:	8c 93       	st	X, r24
    OCR0A=30;
 14e:	e7 e4       	ldi	r30, 0x47	; 71
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	8e e1       	ldi	r24, 0x1E	; 30
 154:	80 83       	st	Z, r24
    TCCR0B=0x01;
 156:	e5 e4       	ldi	r30, 0x45	; 69
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	80 83       	st	Z, r24
    while(1)
    {
        ADCSRA|=(1<<ADSC);
 15e:	aa e7       	ldi	r26, 0x7A	; 122
 160:	b0 e0       	ldi	r27, 0x00	; 0
 162:	ea e7       	ldi	r30, 0x7A	; 122
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	80 64       	ori	r24, 0x40	; 64
 16a:	8c 93       	st	X, r24
        while(ADCSRA&(1<<ADSC));
 16c:	ea e7       	ldi	r30, 0x7A	; 122
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	88 2f       	mov	r24, r24
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	80 74       	andi	r24, 0x40	; 64
 178:	90 70       	andi	r25, 0x00	; 0
 17a:	00 97       	sbiw	r24, 0x00	; 0
 17c:	b9 f7       	brne	.-18     	; 0x16c <main+0x70>
        OCR0A=ADCH;
 17e:	e7 e4       	ldi	r30, 0x47	; 71
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	a9 e7       	ldi	r26, 0x79	; 121
 184:	b0 e0       	ldi	r27, 0x00	; 0
 186:	8c 91       	ld	r24, X
 188:	80 83       	st	Z, r24
 18a:	e9 cf       	rjmp	.-46     	; 0x15e <main+0x62>

0000018c <__mulsi3>:
 18c:	62 9f       	mul	r22, r18
 18e:	d0 01       	movw	r26, r0
 190:	73 9f       	mul	r23, r19
 192:	f0 01       	movw	r30, r0
 194:	82 9f       	mul	r24, r18
 196:	e0 0d       	add	r30, r0
 198:	f1 1d       	adc	r31, r1
 19a:	64 9f       	mul	r22, r20
 19c:	e0 0d       	add	r30, r0
 19e:	f1 1d       	adc	r31, r1
 1a0:	92 9f       	mul	r25, r18
 1a2:	f0 0d       	add	r31, r0
 1a4:	83 9f       	mul	r24, r19
 1a6:	f0 0d       	add	r31, r0
 1a8:	74 9f       	mul	r23, r20
 1aa:	f0 0d       	add	r31, r0
 1ac:	65 9f       	mul	r22, r21
 1ae:	f0 0d       	add	r31, r0
 1b0:	99 27       	eor	r25, r25
 1b2:	72 9f       	mul	r23, r18
 1b4:	b0 0d       	add	r27, r0
 1b6:	e1 1d       	adc	r30, r1
 1b8:	f9 1f       	adc	r31, r25
 1ba:	63 9f       	mul	r22, r19
 1bc:	b0 0d       	add	r27, r0
 1be:	e1 1d       	adc	r30, r1
 1c0:	f9 1f       	adc	r31, r25
 1c2:	bd 01       	movw	r22, r26
 1c4:	cf 01       	movw	r24, r30
 1c6:	11 24       	eor	r1, r1
 1c8:	08 95       	ret

000001ca <_exit>:
 1ca:	f8 94       	cli

000001cc <__stop_program>:
 1cc:	ff cf       	rjmp	.-2      	; 0x1cc <__stop_program>
