
bin\Debug\Würfel7Segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000226  000002ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000226  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .fuse         00000003  00820000  00820000  000002c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .debug_aranges 00000040  00000000  00000000  000002c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000054  00000000  00000000  00000307  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001fc  00000000  00000000  0000035b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000148  00000000  00000000  00000557  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f8  00000000  00000000  0000069f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  00000898  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000e9  00000000  00000000  000008d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e2       	ldi	r30, 0x26	; 38
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
  8a:	0e 94 89 00 	call	0x112	; 0x112 <main>
  8e:	0c 94 11 01 	jmp	0x222	; 0x222 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <delay>:
#include <avr/io.h>

void delay(uint32_t ms)
{
  96:	df 93       	push	r29
  98:	cf 93       	push	r28
  9a:	00 d0       	rcall	.+0      	; 0x9c <delay+0x6>
  9c:	00 d0       	rcall	.+0      	; 0x9e <delay+0x8>
  9e:	0f 92       	push	r0
  a0:	cd b7       	in	r28, 0x3d	; 61
  a2:	de b7       	in	r29, 0x3e	; 62
  a4:	69 83       	std	Y+1, r22	; 0x01
  a6:	7a 83       	std	Y+2, r23	; 0x02
  a8:	8b 83       	std	Y+3, r24	; 0x03
  aa:	9c 83       	std	Y+4, r25	; 0x04
    ms*=371;
  ac:	89 81       	ldd	r24, Y+1	; 0x01
  ae:	9a 81       	ldd	r25, Y+2	; 0x02
  b0:	ab 81       	ldd	r26, Y+3	; 0x03
  b2:	bc 81       	ldd	r27, Y+4	; 0x04
  b4:	23 e7       	ldi	r18, 0x73	; 115
  b6:	31 e0       	ldi	r19, 0x01	; 1
  b8:	40 e0       	ldi	r20, 0x00	; 0
  ba:	50 e0       	ldi	r21, 0x00	; 0
  bc:	bc 01       	movw	r22, r24
  be:	cd 01       	movw	r24, r26
  c0:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <__mulsi3>
  c4:	dc 01       	movw	r26, r24
  c6:	cb 01       	movw	r24, r22
  c8:	89 83       	std	Y+1, r24	; 0x01
  ca:	9a 83       	std	Y+2, r25	; 0x02
  cc:	ab 83       	std	Y+3, r26	; 0x03
  ce:	bc 83       	std	Y+4, r27	; 0x04
    while(ms--);
  d0:	1d 82       	std	Y+5, r1	; 0x05
  d2:	89 81       	ldd	r24, Y+1	; 0x01
  d4:	9a 81       	ldd	r25, Y+2	; 0x02
  d6:	ab 81       	ldd	r26, Y+3	; 0x03
  d8:	bc 81       	ldd	r27, Y+4	; 0x04
  da:	00 97       	sbiw	r24, 0x00	; 0
  dc:	a1 05       	cpc	r26, r1
  de:	b1 05       	cpc	r27, r1
  e0:	11 f0       	breq	.+4      	; 0xe6 <delay+0x50>
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	8d 83       	std	Y+5, r24	; 0x05
  e6:	89 81       	ldd	r24, Y+1	; 0x01
  e8:	9a 81       	ldd	r25, Y+2	; 0x02
  ea:	ab 81       	ldd	r26, Y+3	; 0x03
  ec:	bc 81       	ldd	r27, Y+4	; 0x04
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	a1 09       	sbc	r26, r1
  f2:	b1 09       	sbc	r27, r1
  f4:	89 83       	std	Y+1, r24	; 0x01
  f6:	9a 83       	std	Y+2, r25	; 0x02
  f8:	ab 83       	std	Y+3, r26	; 0x03
  fa:	bc 83       	std	Y+4, r27	; 0x04
  fc:	8d 81       	ldd	r24, Y+5	; 0x05
  fe:	88 23       	and	r24, r24
 100:	39 f7       	brne	.-50     	; 0xd0 <delay+0x3a>
}
 102:	0f 90       	pop	r0
 104:	0f 90       	pop	r0
 106:	0f 90       	pop	r0
 108:	0f 90       	pop	r0
 10a:	0f 90       	pop	r0
 10c:	cf 91       	pop	r28
 10e:	df 91       	pop	r29
 110:	08 95       	ret

00000112 <main>:

uint8_t get4bit();
void delay(uint32_t ms);

int main(void)
{
 112:	df 93       	push	r29
 114:	cf 93       	push	r28
 116:	cd b7       	in	r28, 0x3d	; 61
 118:	de b7       	in	r29, 0x3e	; 62
 11a:	61 97       	sbiw	r28, 0x11	; 17
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	f8 94       	cli
 120:	de bf       	out	0x3e, r29	; 62
 122:	0f be       	out	0x3f, r0	; 63
 124:	cd bf       	out	0x3d, r28	; 61
    DDRD=0xFF;
 126:	ea e2       	ldi	r30, 0x2A	; 42
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	80 83       	st	Z, r24
    DDRC=0x00;        //A0 bis A3 auf Eingang
 12e:	e7 e2       	ldi	r30, 0x27	; 39
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	10 82       	st	Z, r1
    PORTC=0x0F;       //A0 bis A3 auf HIGH um PU Widerstand einzuschalten
 134:	e8 e2       	ldi	r30, 0x28	; 40
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	8f e0       	ldi	r24, 0x0F	; 15
 13a:	80 83       	st	Z, r24
    uint8_t ziffern[10]={0b11110111,0b10100100,0b11011101,0b11101101,0b10101110,0b11101011,0b11111011,0b10100111,0b11111111,0b11101111};
 13c:	ce 01       	movw	r24, r28
 13e:	03 96       	adiw	r24, 0x03	; 3
 140:	9e 87       	std	Y+14, r25	; 0x0e
 142:	8d 87       	std	Y+13, r24	; 0x0d
 144:	e0 e0       	ldi	r30, 0x00	; 0
 146:	f1 e0       	ldi	r31, 0x01	; 1
 148:	f8 8b       	std	Y+16, r31	; 0x10
 14a:	ef 87       	std	Y+15, r30	; 0x0f
 14c:	fa e0       	ldi	r31, 0x0A	; 10
 14e:	f9 8b       	std	Y+17, r31	; 0x11
 150:	ef 85       	ldd	r30, Y+15	; 0x0f
 152:	f8 89       	ldd	r31, Y+16	; 0x10
 154:	00 80       	ld	r0, Z
 156:	8f 85       	ldd	r24, Y+15	; 0x0f
 158:	98 89       	ldd	r25, Y+16	; 0x10
 15a:	01 96       	adiw	r24, 0x01	; 1
 15c:	98 8b       	std	Y+16, r25	; 0x10
 15e:	8f 87       	std	Y+15, r24	; 0x0f
 160:	ed 85       	ldd	r30, Y+13	; 0x0d
 162:	fe 85       	ldd	r31, Y+14	; 0x0e
 164:	00 82       	st	Z, r0
 166:	8d 85       	ldd	r24, Y+13	; 0x0d
 168:	9e 85       	ldd	r25, Y+14	; 0x0e
 16a:	01 96       	adiw	r24, 0x01	; 1
 16c:	9e 87       	std	Y+14, r25	; 0x0e
 16e:	8d 87       	std	Y+13, r24	; 0x0d
 170:	99 89       	ldd	r25, Y+17	; 0x11
 172:	91 50       	subi	r25, 0x01	; 1
 174:	99 8b       	std	Y+17, r25	; 0x11
 176:	e9 89       	ldd	r30, Y+17	; 0x11
 178:	ee 23       	and	r30, r30
 17a:	51 f7       	brne	.-44     	; 0x150 <main+0x3e>
    uint8_t zahl=0;
 17c:	1a 82       	std	Y+2, r1	; 0x02
    uint8_t wuerfelstopp=0;
 17e:	19 82       	std	Y+1, r1	; 0x01
    PORTD=0x00;
 180:	eb e2       	ldi	r30, 0x2B	; 43
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	10 82       	st	Z, r1
    while(1)
    {
        if(PINC&1)
 186:	e6 e2       	ldi	r30, 0x26	; 38
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	88 2f       	mov	r24, r24
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	81 70       	andi	r24, 0x01	; 1
 192:	90 70       	andi	r25, 0x00	; 0
 194:	88 23       	and	r24, r24
 196:	99 f0       	breq	.+38     	; 0x1be <main+0xac>
        {
            delay(35);
 198:	63 e2       	ldi	r22, 0x23	; 35
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 4b 00 	call	0x96	; 0x96 <delay>
            while(PINC&1);
 1a4:	e6 e2       	ldi	r30, 0x26	; 38
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	88 2f       	mov	r24, r24
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	81 70       	andi	r24, 0x01	; 1
 1b0:	90 70       	andi	r25, 0x00	; 0
 1b2:	88 23       	and	r24, r24
 1b4:	b9 f7       	brne	.-18     	; 0x1a4 <main+0x92>
            wuerfelstopp^=1;
 1b6:	89 81       	ldd	r24, Y+1	; 0x01
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	89 27       	eor	r24, r25
 1bc:	89 83       	std	Y+1, r24	; 0x01
        }
        if(wuerfelstopp)
 1be:	89 81       	ldd	r24, Y+1	; 0x01
 1c0:	88 23       	and	r24, r24
 1c2:	09 f3       	breq	.-62     	; 0x186 <main+0x74>
            PORTD=ziffern[zahl++];
 1c4:	ab e2       	ldi	r26, 0x2B	; 43
 1c6:	b0 e0       	ldi	r27, 0x00	; 0
 1c8:	8a 81       	ldd	r24, Y+2	; 0x02
 1ca:	28 2f       	mov	r18, r24
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	ce 01       	movw	r24, r28
 1d0:	03 96       	adiw	r24, 0x03	; 3
 1d2:	fc 01       	movw	r30, r24
 1d4:	e2 0f       	add	r30, r18
 1d6:	f3 1f       	adc	r31, r19
 1d8:	80 81       	ld	r24, Z
 1da:	8c 93       	st	X, r24
 1dc:	8a 81       	ldd	r24, Y+2	; 0x02
 1de:	8f 5f       	subi	r24, 0xFF	; 255
 1e0:	8a 83       	std	Y+2, r24	; 0x02
 1e2:	d1 cf       	rjmp	.-94     	; 0x186 <main+0x74>

000001e4 <__mulsi3>:
 1e4:	62 9f       	mul	r22, r18
 1e6:	d0 01       	movw	r26, r0
 1e8:	73 9f       	mul	r23, r19
 1ea:	f0 01       	movw	r30, r0
 1ec:	82 9f       	mul	r24, r18
 1ee:	e0 0d       	add	r30, r0
 1f0:	f1 1d       	adc	r31, r1
 1f2:	64 9f       	mul	r22, r20
 1f4:	e0 0d       	add	r30, r0
 1f6:	f1 1d       	adc	r31, r1
 1f8:	92 9f       	mul	r25, r18
 1fa:	f0 0d       	add	r31, r0
 1fc:	83 9f       	mul	r24, r19
 1fe:	f0 0d       	add	r31, r0
 200:	74 9f       	mul	r23, r20
 202:	f0 0d       	add	r31, r0
 204:	65 9f       	mul	r22, r21
 206:	f0 0d       	add	r31, r0
 208:	99 27       	eor	r25, r25
 20a:	72 9f       	mul	r23, r18
 20c:	b0 0d       	add	r27, r0
 20e:	e1 1d       	adc	r30, r1
 210:	f9 1f       	adc	r31, r25
 212:	63 9f       	mul	r22, r19
 214:	b0 0d       	add	r27, r0
 216:	e1 1d       	adc	r30, r1
 218:	f9 1f       	adc	r31, r25
 21a:	bd 01       	movw	r22, r26
 21c:	cf 01       	movw	r24, r30
 21e:	11 24       	eor	r1, r1
 220:	08 95       	ret

00000222 <_exit>:
 222:	f8 94       	cli

00000224 <__stop_program>:
 224:	ff cf       	rjmp	.-2      	; 0x224 <__stop_program>
