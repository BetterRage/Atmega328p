
bin\Debug\TemperaturRegelung.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000009ee  00000aa2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009ee  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  00000aa2  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00000aa2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  00000aa5  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ab8  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 000000b8  00000000  00000000  00000af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   00000988  00000000  00000000  00000bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 000007c1  00000000  00000000  00001538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   00000849  00000000  00000000  00001cf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  000001f0  00000000  00000000  00002544  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    000003dc  00000000  00000000  00002734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 ff 01 	jmp	0x3fe	; 0x3fe <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 47 02 	jmp	0x48e	; 0x48e <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 9a 02 	call	0x534	; 0x534 <main>
  88:	0c 94 f5 04 	jmp	0x9ea	; 0x9ea <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init_usart>:
#ifndef UART_H_INCLUDED
#define UART_H_INCLUDED
#include <avr/io.h>

void init_usart(uint32_t baud)
{
  90:	0f 93       	push	r16
  92:	1f 93       	push	r17
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
  9c:	28 97       	sbiw	r28, 0x08	; 8
  9e:	0f b6       	in	r0, 0x3f	; 63
  a0:	f8 94       	cli
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	0f be       	out	0x3f, r0	; 63
  a6:	cd bf       	out	0x3d, r28	; 61
  a8:	69 83       	std	Y+1, r22	; 0x01
  aa:	7a 83       	std	Y+2, r23	; 0x02
  ac:	8b 83       	std	Y+3, r24	; 0x03
  ae:	9c 83       	std	Y+4, r25	; 0x04
    UBRR0L = (16000000ul/(16ul*baud))-1;
  b0:	89 81       	ldd	r24, Y+1	; 0x01
  b2:	9a 81       	ldd	r25, Y+2	; 0x02
  b4:	ab 81       	ldd	r26, Y+3	; 0x03
  b6:	bc 81       	ldd	r27, Y+4	; 0x04
  b8:	88 0f       	add	r24, r24
  ba:	99 1f       	adc	r25, r25
  bc:	aa 1f       	adc	r26, r26
  be:	bb 1f       	adc	r27, r27
  c0:	88 0f       	add	r24, r24
  c2:	99 1f       	adc	r25, r25
  c4:	aa 1f       	adc	r26, r26
  c6:	bb 1f       	adc	r27, r27
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	aa 1f       	adc	r26, r26
  ce:	bb 1f       	adc	r27, r27
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	aa 1f       	adc	r26, r26
  d6:	bb 1f       	adc	r27, r27
  d8:	8c 01       	movw	r16, r24
  da:	9d 01       	movw	r18, r26
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	94 e2       	ldi	r25, 0x24	; 36
  e0:	a4 ef       	ldi	r26, 0xF4	; 244
  e2:	b0 e0       	ldi	r27, 0x00	; 0
  e4:	8d 83       	std	Y+5, r24	; 0x05
  e6:	9e 83       	std	Y+6, r25	; 0x06
  e8:	af 83       	std	Y+7, r26	; 0x07
  ea:	b8 87       	std	Y+8, r27	; 0x08
  ec:	6d 81       	ldd	r22, Y+5	; 0x05
  ee:	7e 81       	ldd	r23, Y+6	; 0x06
  f0:	8f 81       	ldd	r24, Y+7	; 0x07
  f2:	98 85       	ldd	r25, Y+8	; 0x08
  f4:	a9 01       	movw	r20, r18
  f6:	98 01       	movw	r18, r16
  f8:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <__udivmodsi4>
  fc:	da 01       	movw	r26, r20
  fe:	c9 01       	movw	r24, r18
 100:	28 2f       	mov	r18, r24
 102:	84 ec       	ldi	r24, 0xC4	; 196
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	21 50       	subi	r18, 0x01	; 1
 108:	dc 01       	movw	r26, r24
 10a:	2c 93       	st	X, r18
    UBRR0H = 0;
 10c:	85 ec       	ldi	r24, 0xC5	; 197
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	fc 01       	movw	r30, r24
 112:	10 82       	st	Z, r1
    UCSR0B |= (1<<TXEN0) | (1<<RXEN0)|(1<<RXCIE0);           // Sender und Empfänger aktivieren
 114:	81 ec       	ldi	r24, 0xC1	; 193
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	dc 01       	movw	r26, r24
 11a:	2c 91       	ld	r18, X
 11c:	81 ec       	ldi	r24, 0xC1	; 193
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	28 69       	ori	r18, 0x98	; 152
 122:	fc 01       	movw	r30, r24
 124:	20 83       	st	Z, r18
    UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);         // 8-Bit Übertragung
 126:	82 ec       	ldi	r24, 0xC2	; 194
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	26 e0       	ldi	r18, 0x06	; 6
 12c:	dc 01       	movw	r26, r24
 12e:	2c 93       	st	X, r18
 // Asynchrone Übertragung (UMSEL00=0 und UMSEL01=0)
}
 130:	00 00       	nop
 132:	28 96       	adiw	r28, 0x08	; 8
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	f8 94       	cli
 138:	de bf       	out	0x3e, r29	; 62
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	cd bf       	out	0x3d, r28	; 61
 13e:	df 91       	pop	r29
 140:	cf 91       	pop	r28
 142:	1f 91       	pop	r17
 144:	0f 91       	pop	r16
 146:	08 95       	ret

00000148 <_putch>:
void _putch(char ch)
{
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	0f 92       	push	r0
 14e:	cd b7       	in	r28, 0x3d	; 61
 150:	de b7       	in	r29, 0x3e	; 62
 152:	89 83       	std	Y+1, r24	; 0x01
    while(!(UCSR0A & (1<<UDRE0)));
 154:	00 00       	nop
 156:	80 ec       	ldi	r24, 0xC0	; 192
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	fc 01       	movw	r30, r24
 15c:	80 81       	ld	r24, Z
 15e:	88 2f       	mov	r24, r24
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	80 72       	andi	r24, 0x20	; 32
 164:	99 27       	eor	r25, r25
 166:	89 2b       	or	r24, r25
 168:	b1 f3       	breq	.-20     	; 0x156 <_putch+0xe>
    UDR0 = ch;
 16a:	86 ec       	ldi	r24, 0xC6	; 198
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	29 81       	ldd	r18, Y+1	; 0x01
 170:	fc 01       	movw	r30, r24
 172:	20 83       	st	Z, r18
}
 174:	00 00       	nop
 176:	0f 90       	pop	r0
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <_puts>:
void _puts(char st[])
{
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
 182:	00 d0       	rcall	.+0      	; 0x184 <_puts+0x6>
 184:	0f 92       	push	r0
 186:	cd b7       	in	r28, 0x3d	; 61
 188:	de b7       	in	r29, 0x3e	; 62
 18a:	9b 83       	std	Y+3, r25	; 0x03
 18c:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t i=0;
 18e:	19 82       	std	Y+1, r1	; 0x01
    while(st[i])
 190:	0e c0       	rjmp	.+28     	; 0x1ae <_puts+0x30>
        _putch(st[i++]);
 192:	89 81       	ldd	r24, Y+1	; 0x01
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	98 0f       	add	r25, r24
 198:	99 83       	std	Y+1, r25	; 0x01
 19a:	88 2f       	mov	r24, r24
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	2a 81       	ldd	r18, Y+2	; 0x02
 1a0:	3b 81       	ldd	r19, Y+3	; 0x03
 1a2:	82 0f       	add	r24, r18
 1a4:	93 1f       	adc	r25, r19
 1a6:	fc 01       	movw	r30, r24
 1a8:	80 81       	ld	r24, Z
 1aa:	0e 94 a4 00 	call	0x148	; 0x148 <_putch>
    while(st[i])
 1ae:	89 81       	ldd	r24, Y+1	; 0x01
 1b0:	88 2f       	mov	r24, r24
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	2a 81       	ldd	r18, Y+2	; 0x02
 1b6:	3b 81       	ldd	r19, Y+3	; 0x03
 1b8:	82 0f       	add	r24, r18
 1ba:	93 1f       	adc	r25, r19
 1bc:	fc 01       	movw	r30, r24
 1be:	80 81       	ld	r24, Z
 1c0:	88 23       	and	r24, r24
 1c2:	39 f7       	brne	.-50     	; 0x192 <_puts+0x14>
    _putch(32);
 1c4:	80 e2       	ldi	r24, 0x20	; 32
 1c6:	0e 94 a4 00 	call	0x148	; 0x148 <_putch>
}
 1ca:	00 00       	nop
 1cc:	0f 90       	pop	r0
 1ce:	0f 90       	pop	r0
 1d0:	0f 90       	pop	r0
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	08 95       	ret

000001d8 <_getch>:
char _getch(void)
{
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	cd b7       	in	r28, 0x3d	; 61
 1de:	de b7       	in	r29, 0x3e	; 62
    while(!(UCSR0A & (1<<RXC0)));
 1e0:	00 00       	nop
 1e2:	80 ec       	ldi	r24, 0xC0	; 192
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	fc 01       	movw	r30, r24
 1e8:	80 81       	ld	r24, Z
 1ea:	88 23       	and	r24, r24
 1ec:	d4 f7       	brge	.-12     	; 0x1e2 <_getch+0xa>
    return UDR0;
 1ee:	86 ec       	ldi	r24, 0xC6	; 198
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	fc 01       	movw	r30, r24
 1f4:	80 81       	ld	r24, Z
}
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	08 95       	ret

000001fc <_gets>:

void _gets(char* st)
{
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	00 d0       	rcall	.+0      	; 0x202 <_gets+0x6>
 202:	cd b7       	in	r28, 0x3d	; 61
 204:	de b7       	in	r29, 0x3e	; 62
 206:	9a 83       	std	Y+2, r25	; 0x02
 208:	89 83       	std	Y+1, r24	; 0x01
    do
    {
        *st=_getch();
 20a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <_getch>
 20e:	28 2f       	mov	r18, r24
 210:	89 81       	ldd	r24, Y+1	; 0x01
 212:	9a 81       	ldd	r25, Y+2	; 0x02
 214:	fc 01       	movw	r30, r24
 216:	20 83       	st	Z, r18
    } while (*st++!=10);  // die Funktion WriteLine von C# schickt einen String,
 218:	89 81       	ldd	r24, Y+1	; 0x01
 21a:	9a 81       	ldd	r25, Y+2	; 0x02
 21c:	9c 01       	movw	r18, r24
 21e:	2f 5f       	subi	r18, 0xFF	; 255
 220:	3f 4f       	sbci	r19, 0xFF	; 255
 222:	3a 83       	std	Y+2, r19	; 0x02
 224:	29 83       	std	Y+1, r18	; 0x01
 226:	fc 01       	movw	r30, r24
 228:	80 81       	ld	r24, Z
 22a:	8a 30       	cpi	r24, 0x0A	; 10
 22c:	71 f7       	brne	.-36     	; 0x20a <_gets+0xe>
    *--st=0;			  // der mit New Line (\n, ASCII: 10) abschlossen ist.
 22e:	89 81       	ldd	r24, Y+1	; 0x01
 230:	9a 81       	ldd	r25, Y+2	; 0x02
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	9a 83       	std	Y+2, r25	; 0x02
 236:	89 83       	std	Y+1, r24	; 0x01
 238:	89 81       	ldd	r24, Y+1	; 0x01
 23a:	9a 81       	ldd	r25, Y+2	; 0x02
 23c:	fc 01       	movw	r30, r24
 23e:	10 82       	st	Z, r1
}
 240:	00 00       	nop
 242:	0f 90       	pop	r0
 244:	0f 90       	pop	r0
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	08 95       	ret

0000024c <_newline>:
void _newline()
{
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	cd b7       	in	r28, 0x3d	; 61
 252:	de b7       	in	r29, 0x3e	; 62
    _putch(13);   // CR
 254:	8d e0       	ldi	r24, 0x0D	; 13
 256:	0e 94 a4 00 	call	0x148	; 0x148 <_putch>
    _putch(10);   // LF
 25a:	8a e0       	ldi	r24, 0x0A	; 10
 25c:	0e 94 a4 00 	call	0x148	; 0x148 <_putch>
}
 260:	00 00       	nop
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	08 95       	ret

00000268 <itoa8>:
void itoa8(uint16_t val,char *stringa)
{
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	00 d0       	rcall	.+0      	; 0x26e <itoa8+0x6>
 26e:	00 d0       	rcall	.+0      	; 0x270 <itoa8+0x8>
 270:	cd b7       	in	r28, 0x3d	; 61
 272:	de b7       	in	r29, 0x3e	; 62
 274:	9a 83       	std	Y+2, r25	; 0x02
 276:	89 83       	std	Y+1, r24	; 0x01
 278:	7c 83       	std	Y+4, r23	; 0x04
 27a:	6b 83       	std	Y+3, r22	; 0x03
    stringa[0]=(val%10000)/1000+48;
 27c:	49 81       	ldd	r20, Y+1	; 0x01
 27e:	5a 81       	ldd	r21, Y+2	; 0x02
 280:	ca 01       	movw	r24, r20
 282:	92 95       	swap	r25
 284:	82 95       	swap	r24
 286:	8f 70       	andi	r24, 0x0F	; 15
 288:	89 27       	eor	r24, r25
 28a:	9f 70       	andi	r25, 0x0F	; 15
 28c:	89 27       	eor	r24, r25
 28e:	9c 01       	movw	r18, r24
 290:	a7 e4       	ldi	r26, 0x47	; 71
 292:	b3 e0       	ldi	r27, 0x03	; 3
 294:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <__umulhisi3>
 298:	96 95       	lsr	r25
 29a:	87 95       	ror	r24
 29c:	96 95       	lsr	r25
 29e:	87 95       	ror	r24
 2a0:	96 95       	lsr	r25
 2a2:	87 95       	ror	r24
 2a4:	60 e1       	ldi	r22, 0x10	; 16
 2a6:	77 e2       	ldi	r23, 0x27	; 39
 2a8:	86 9f       	mul	r24, r22
 2aa:	90 01       	movw	r18, r0
 2ac:	87 9f       	mul	r24, r23
 2ae:	30 0d       	add	r19, r0
 2b0:	96 9f       	mul	r25, r22
 2b2:	30 0d       	add	r19, r0
 2b4:	11 24       	eor	r1, r1
 2b6:	ca 01       	movw	r24, r20
 2b8:	82 1b       	sub	r24, r18
 2ba:	93 0b       	sbc	r25, r19
 2bc:	96 95       	lsr	r25
 2be:	87 95       	ror	r24
 2c0:	96 95       	lsr	r25
 2c2:	87 95       	ror	r24
 2c4:	96 95       	lsr	r25
 2c6:	87 95       	ror	r24
 2c8:	9c 01       	movw	r18, r24
 2ca:	a5 ec       	ldi	r26, 0xC5	; 197
 2cc:	b0 e2       	ldi	r27, 0x20	; 32
 2ce:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <__umulhisi3>
 2d2:	92 95       	swap	r25
 2d4:	82 95       	swap	r24
 2d6:	8f 70       	andi	r24, 0x0F	; 15
 2d8:	89 27       	eor	r24, r25
 2da:	9f 70       	andi	r25, 0x0F	; 15
 2dc:	89 27       	eor	r24, r25
 2de:	80 5d       	subi	r24, 0xD0	; 208
 2e0:	28 2f       	mov	r18, r24
 2e2:	8b 81       	ldd	r24, Y+3	; 0x03
 2e4:	9c 81       	ldd	r25, Y+4	; 0x04
 2e6:	fc 01       	movw	r30, r24
 2e8:	20 83       	st	Z, r18
    stringa[1]=(val%1000)/100+48;
 2ea:	49 81       	ldd	r20, Y+1	; 0x01
 2ec:	5a 81       	ldd	r21, Y+2	; 0x02
 2ee:	ca 01       	movw	r24, r20
 2f0:	96 95       	lsr	r25
 2f2:	87 95       	ror	r24
 2f4:	96 95       	lsr	r25
 2f6:	87 95       	ror	r24
 2f8:	96 95       	lsr	r25
 2fa:	87 95       	ror	r24
 2fc:	9c 01       	movw	r18, r24
 2fe:	a5 ec       	ldi	r26, 0xC5	; 197
 300:	b0 e2       	ldi	r27, 0x20	; 32
 302:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <__umulhisi3>
 306:	92 95       	swap	r25
 308:	82 95       	swap	r24
 30a:	8f 70       	andi	r24, 0x0F	; 15
 30c:	89 27       	eor	r24, r25
 30e:	9f 70       	andi	r25, 0x0F	; 15
 310:	89 27       	eor	r24, r25
 312:	68 ee       	ldi	r22, 0xE8	; 232
 314:	73 e0       	ldi	r23, 0x03	; 3
 316:	86 9f       	mul	r24, r22
 318:	90 01       	movw	r18, r0
 31a:	87 9f       	mul	r24, r23
 31c:	30 0d       	add	r19, r0
 31e:	96 9f       	mul	r25, r22
 320:	30 0d       	add	r19, r0
 322:	11 24       	eor	r1, r1
 324:	ca 01       	movw	r24, r20
 326:	82 1b       	sub	r24, r18
 328:	93 0b       	sbc	r25, r19
 32a:	96 95       	lsr	r25
 32c:	87 95       	ror	r24
 32e:	96 95       	lsr	r25
 330:	87 95       	ror	r24
 332:	9c 01       	movw	r18, r24
 334:	ab e7       	ldi	r26, 0x7B	; 123
 336:	b4 e1       	ldi	r27, 0x14	; 20
 338:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <__umulhisi3>
 33c:	96 95       	lsr	r25
 33e:	87 95       	ror	r24
 340:	20 e3       	ldi	r18, 0x30	; 48
 342:	28 0f       	add	r18, r24
 344:	8b 81       	ldd	r24, Y+3	; 0x03
 346:	9c 81       	ldd	r25, Y+4	; 0x04
 348:	01 96       	adiw	r24, 0x01	; 1
 34a:	fc 01       	movw	r30, r24
 34c:	20 83       	st	Z, r18
    stringa[2]=(val%100)/10+48;
 34e:	49 81       	ldd	r20, Y+1	; 0x01
 350:	5a 81       	ldd	r21, Y+2	; 0x02
 352:	ca 01       	movw	r24, r20
 354:	96 95       	lsr	r25
 356:	87 95       	ror	r24
 358:	96 95       	lsr	r25
 35a:	87 95       	ror	r24
 35c:	9c 01       	movw	r18, r24
 35e:	ab e7       	ldi	r26, 0x7B	; 123
 360:	b4 e1       	ldi	r27, 0x14	; 20
 362:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <__umulhisi3>
 366:	96 95       	lsr	r25
 368:	87 95       	ror	r24
 36a:	64 e6       	ldi	r22, 0x64	; 100
 36c:	68 9f       	mul	r22, r24
 36e:	90 01       	movw	r18, r0
 370:	69 9f       	mul	r22, r25
 372:	30 0d       	add	r19, r0
 374:	11 24       	eor	r1, r1
 376:	ca 01       	movw	r24, r20
 378:	82 1b       	sub	r24, r18
 37a:	93 0b       	sbc	r25, r19
 37c:	9c 01       	movw	r18, r24
 37e:	ad ec       	ldi	r26, 0xCD	; 205
 380:	bc ec       	ldi	r27, 0xCC	; 204
 382:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <__umulhisi3>
 386:	96 95       	lsr	r25
 388:	87 95       	ror	r24
 38a:	96 95       	lsr	r25
 38c:	87 95       	ror	r24
 38e:	96 95       	lsr	r25
 390:	87 95       	ror	r24
 392:	20 e3       	ldi	r18, 0x30	; 48
 394:	28 0f       	add	r18, r24
 396:	8b 81       	ldd	r24, Y+3	; 0x03
 398:	9c 81       	ldd	r25, Y+4	; 0x04
 39a:	02 96       	adiw	r24, 0x02	; 2
 39c:	fc 01       	movw	r30, r24
 39e:	20 83       	st	Z, r18
    stringa[3]=(val%10)+48;
 3a0:	49 81       	ldd	r20, Y+1	; 0x01
 3a2:	5a 81       	ldd	r21, Y+2	; 0x02
 3a4:	9a 01       	movw	r18, r20
 3a6:	ad ec       	ldi	r26, 0xCD	; 205
 3a8:	bc ec       	ldi	r27, 0xCC	; 204
 3aa:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <__umulhisi3>
 3ae:	9c 01       	movw	r18, r24
 3b0:	36 95       	lsr	r19
 3b2:	27 95       	ror	r18
 3b4:	36 95       	lsr	r19
 3b6:	27 95       	ror	r18
 3b8:	36 95       	lsr	r19
 3ba:	27 95       	ror	r18
 3bc:	c9 01       	movw	r24, r18
 3be:	88 0f       	add	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	88 0f       	add	r24, r24
 3c4:	99 1f       	adc	r25, r25
 3c6:	82 0f       	add	r24, r18
 3c8:	93 1f       	adc	r25, r19
 3ca:	88 0f       	add	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	9a 01       	movw	r18, r20
 3d0:	28 1b       	sub	r18, r24
 3d2:	39 0b       	sbc	r19, r25
 3d4:	82 2f       	mov	r24, r18
 3d6:	20 e3       	ldi	r18, 0x30	; 48
 3d8:	28 0f       	add	r18, r24
 3da:	8b 81       	ldd	r24, Y+3	; 0x03
 3dc:	9c 81       	ldd	r25, Y+4	; 0x04
 3de:	03 96       	adiw	r24, 0x03	; 3
 3e0:	fc 01       	movw	r30, r24
 3e2:	20 83       	st	Z, r18
    stringa[4]=0;
 3e4:	8b 81       	ldd	r24, Y+3	; 0x03
 3e6:	9c 81       	ldd	r25, Y+4	; 0x04
 3e8:	04 96       	adiw	r24, 0x04	; 4
 3ea:	fc 01       	movw	r30, r24
 3ec:	10 82       	st	Z, r1
}
 3ee:	00 00       	nop
 3f0:	0f 90       	pop	r0
 3f2:	0f 90       	pop	r0
 3f4:	0f 90       	pop	r0
 3f6:	0f 90       	pop	r0
 3f8:	df 91       	pop	r29
 3fa:	cf 91       	pop	r28
 3fc:	08 95       	ret

000003fe <__vector_11>:
//OC0A=PD6
//OC0B=PD5
volatile uint8_t senden=0;
char spga[5]={0,0,0,0,0};
ISR(TIMER1_COMPA_vect)
{
 3fe:	1f 92       	push	r1
 400:	0f 92       	push	r0
 402:	0f b6       	in	r0, 0x3f	; 63
 404:	0f 92       	push	r0
 406:	11 24       	eor	r1, r1
 408:	2f 93       	push	r18
 40a:	3f 93       	push	r19
 40c:	4f 93       	push	r20
 40e:	5f 93       	push	r21
 410:	6f 93       	push	r22
 412:	7f 93       	push	r23
 414:	8f 93       	push	r24
 416:	9f 93       	push	r25
 418:	af 93       	push	r26
 41a:	bf 93       	push	r27
 41c:	ef 93       	push	r30
 41e:	ff 93       	push	r31
 420:	cf 93       	push	r28
 422:	df 93       	push	r29
 424:	0f 92       	push	r0
 426:	cd b7       	in	r28, 0x3d	; 61
 428:	de b7       	in	r29, 0x3e	; 62
    uint8_t sreg=SREG;
 42a:	8f e5       	ldi	r24, 0x5F	; 95
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	fc 01       	movw	r30, r24
 430:	80 81       	ld	r24, Z
 432:	89 83       	std	Y+1, r24	; 0x01
    SREG&=~(1<<7);
 434:	8f e5       	ldi	r24, 0x5F	; 95
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	fc 01       	movw	r30, r24
 43a:	20 81       	ld	r18, Z
 43c:	8f e5       	ldi	r24, 0x5F	; 95
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	2f 77       	andi	r18, 0x7F	; 127
 442:	fc 01       	movw	r30, r24
 444:	20 83       	st	Z, r18
    if(senden==1)
 446:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <senden>
 44a:	81 30       	cpi	r24, 0x01	; 1
 44c:	31 f4       	brne	.+12     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
    {
        _puts(spga);
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	91 e0       	ldi	r25, 0x01	; 1
 452:	0e 94 bf 00 	call	0x17e	; 0x17e <_puts>
        _newline();
 456:	0e 94 26 01 	call	0x24c	; 0x24c <_newline>
    }

    SREG=sreg;
 45a:	8f e5       	ldi	r24, 0x5F	; 95
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	29 81       	ldd	r18, Y+1	; 0x01
 460:	fc 01       	movw	r30, r24
 462:	20 83       	st	Z, r18
}
 464:	00 00       	nop
 466:	0f 90       	pop	r0
 468:	df 91       	pop	r29
 46a:	cf 91       	pop	r28
 46c:	ff 91       	pop	r31
 46e:	ef 91       	pop	r30
 470:	bf 91       	pop	r27
 472:	af 91       	pop	r26
 474:	9f 91       	pop	r25
 476:	8f 91       	pop	r24
 478:	7f 91       	pop	r23
 47a:	6f 91       	pop	r22
 47c:	5f 91       	pop	r21
 47e:	4f 91       	pop	r20
 480:	3f 91       	pop	r19
 482:	2f 91       	pop	r18
 484:	0f 90       	pop	r0
 486:	0f be       	out	0x3f, r0	; 63
 488:	0f 90       	pop	r0
 48a:	1f 90       	pop	r1
 48c:	18 95       	reti

0000048e <__vector_18>:
ISR(USART_RX_vect)
{
 48e:	1f 92       	push	r1
 490:	0f 92       	push	r0
 492:	0f b6       	in	r0, 0x3f	; 63
 494:	0f 92       	push	r0
 496:	11 24       	eor	r1, r1
 498:	2f 93       	push	r18
 49a:	3f 93       	push	r19
 49c:	4f 93       	push	r20
 49e:	5f 93       	push	r21
 4a0:	6f 93       	push	r22
 4a2:	7f 93       	push	r23
 4a4:	8f 93       	push	r24
 4a6:	9f 93       	push	r25
 4a8:	af 93       	push	r26
 4aa:	bf 93       	push	r27
 4ac:	ef 93       	push	r30
 4ae:	ff 93       	push	r31
 4b0:	cf 93       	push	r28
 4b2:	df 93       	push	r29
 4b4:	00 d0       	rcall	.+0      	; 0x4b6 <__vector_18+0x28>
 4b6:	cd b7       	in	r28, 0x3d	; 61
 4b8:	de b7       	in	r29, 0x3e	; 62
    uint8_t sreg=SREG;
 4ba:	8f e5       	ldi	r24, 0x5F	; 95
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	fc 01       	movw	r30, r24
 4c0:	80 81       	ld	r24, Z
 4c2:	89 83       	std	Y+1, r24	; 0x01
    SREG&=~(1<<7);
 4c4:	8f e5       	ldi	r24, 0x5F	; 95
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	fc 01       	movw	r30, r24
 4ca:	20 81       	ld	r18, Z
 4cc:	8f e5       	ldi	r24, 0x5F	; 95
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	2f 77       	andi	r18, 0x7F	; 127
 4d2:	fc 01       	movw	r30, r24
 4d4:	20 83       	st	Z, r18
    uint8_t input=_getch();
 4d6:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <_getch>
 4da:	8a 83       	std	Y+2, r24	; 0x02
    switch (input)
 4dc:	8a 81       	ldd	r24, Y+2	; 0x02
 4de:	88 2f       	mov	r24, r24
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	82 36       	cpi	r24, 0x62	; 98
 4e4:	91 05       	cpc	r25, r1
 4e6:	21 f0       	breq	.+8      	; 0x4f0 <__vector_18+0x62>
 4e8:	83 37       	cpi	r24, 0x73	; 115
 4ea:	91 05       	cpc	r25, r1
 4ec:	21 f0       	breq	.+8      	; 0x4f6 <__vector_18+0x68>
 4ee:	07 c0       	rjmp	.+14     	; 0x4fe <__vector_18+0x70>
    {
        case 'b':   senden=0;
 4f0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <senden>
                    break;
 4f4:	04 c0       	rjmp	.+8      	; 0x4fe <__vector_18+0x70>
        case 's':   senden=1;
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <senden>
                    break;
 4fc:	00 00       	nop
    }
    SREG=sreg;
 4fe:	8f e5       	ldi	r24, 0x5F	; 95
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	29 81       	ldd	r18, Y+1	; 0x01
 504:	fc 01       	movw	r30, r24
 506:	20 83       	st	Z, r18
}
 508:	00 00       	nop
 50a:	0f 90       	pop	r0
 50c:	0f 90       	pop	r0
 50e:	df 91       	pop	r29
 510:	cf 91       	pop	r28
 512:	ff 91       	pop	r31
 514:	ef 91       	pop	r30
 516:	bf 91       	pop	r27
 518:	af 91       	pop	r26
 51a:	9f 91       	pop	r25
 51c:	8f 91       	pop	r24
 51e:	7f 91       	pop	r23
 520:	6f 91       	pop	r22
 522:	5f 91       	pop	r21
 524:	4f 91       	pop	r20
 526:	3f 91       	pop	r19
 528:	2f 91       	pop	r18
 52a:	0f 90       	pop	r0
 52c:	0f be       	out	0x3f, r0	; 63
 52e:	0f 90       	pop	r0
 530:	1f 90       	pop	r1
 532:	18 95       	reti

00000534 <main>:
int main(void)
{
 534:	cf 93       	push	r28
 536:	df 93       	push	r29
 538:	cd b7       	in	r28, 0x3d	; 61
 53a:	de b7       	in	r29, 0x3e	; 62
 53c:	67 97       	sbiw	r28, 0x17	; 23
 53e:	0f b6       	in	r0, 0x3f	; 63
 540:	f8 94       	cli
 542:	de bf       	out	0x3e, r29	; 62
 544:	0f be       	out	0x3f, r0	; 63
 546:	cd bf       	out	0x3d, r28	; 61
    SREG|=(1<<7);
 548:	8f e5       	ldi	r24, 0x5F	; 95
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	dc 01       	movw	r26, r24
 54e:	2c 91       	ld	r18, X
 550:	8f e5       	ldi	r24, 0x5F	; 95
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	20 68       	ori	r18, 0x80	; 128
 556:	fc 01       	movw	r30, r24
 558:	20 83       	st	Z, r18
    init_usart(9600);
 55a:	60 e8       	ldi	r22, 0x80	; 128
 55c:	75 e2       	ldi	r23, 0x25	; 37
 55e:	80 e0       	ldi	r24, 0x00	; 0
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	0e 94 48 00 	call	0x90	; 0x90 <init_usart>
    uint16_t adcval;
    uint8_t adcscal;
    DDRD|=(0b11<<5);
 566:	8a e2       	ldi	r24, 0x2A	; 42
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	dc 01       	movw	r26, r24
 56c:	2c 91       	ld	r18, X
 56e:	8a e2       	ldi	r24, 0x2A	; 42
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	20 66       	ori	r18, 0x60	; 96
 574:	fc 01       	movw	r30, r24
 576:	20 83       	st	Z, r18
    /// //////////////////////////////////////////////////////////////PWM
    TCCR0A=0b10100011; //clear OC0A und OC0B bei match, Fast PWM mode
 578:	84 e4       	ldi	r24, 0x44	; 68
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	23 ea       	ldi	r18, 0xA3	; 163
 57e:	dc 01       	movw	r26, r24
 580:	2c 93       	st	X, r18
    TCCR0B=0b00000001; //kein Prescaler
 582:	85 e4       	ldi	r24, 0x45	; 69
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	21 e0       	ldi	r18, 0x01	; 1
 588:	fc 01       	movw	r30, r24
 58a:	20 83       	st	Z, r18
    /// //////////////////////////////////////////////////////////////Delay
    TCCR1B=0b00001101; // CTC Mode
 58c:	81 e8       	ldi	r24, 0x81	; 129
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	2d e0       	ldi	r18, 0x0D	; 13
 592:	dc 01       	movw	r26, r24
 594:	2c 93       	st	X, r18
    OCR1A=7812;
 596:	88 e8       	ldi	r24, 0x88	; 136
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	24 e8       	ldi	r18, 0x84	; 132
 59c:	3e e1       	ldi	r19, 0x1E	; 30
 59e:	fc 01       	movw	r30, r24
 5a0:	31 83       	std	Z+1, r19	; 0x01
 5a2:	20 83       	st	Z, r18
    TIMSK1|=(1<<1);
 5a4:	8f e6       	ldi	r24, 0x6F	; 111
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	dc 01       	movw	r26, r24
 5aa:	2c 91       	ld	r18, X
 5ac:	8f e6       	ldi	r24, 0x6F	; 111
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	22 60       	ori	r18, 0x02	; 2
 5b2:	fc 01       	movw	r30, r24
 5b4:	20 83       	st	Z, r18
    /// /////////////////////////////////////////////////////////////ADC
    ADCSRA=0b11110111;
 5b6:	8a e7       	ldi	r24, 0x7A	; 122
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	27 ef       	ldi	r18, 0xF7	; 247
 5bc:	dc 01       	movw	r26, r24
 5be:	2c 93       	st	X, r18
    ADCSRB=0b00000000;
 5c0:	8b e7       	ldi	r24, 0x7B	; 123
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	fc 01       	movw	r30, r24
 5c6:	10 82       	st	Z, r1
    /// //////////////////////////////////////////////////////////////
    while(1)
    {
        while(!(ADCSRA&(1<<ADIF)));
 5c8:	00 00       	nop
 5ca:	8a e7       	ldi	r24, 0x7A	; 122
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	dc 01       	movw	r26, r24
 5d0:	8c 91       	ld	r24, X
 5d2:	88 2f       	mov	r24, r24
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	80 71       	andi	r24, 0x10	; 16
 5d8:	99 27       	eor	r25, r25
 5da:	89 2b       	or	r24, r25
 5dc:	b1 f3       	breq	.-20     	; 0x5ca <main+0x96>
        ADCSRA|=(1<<ADIF);
 5de:	8a e7       	ldi	r24, 0x7A	; 122
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	fc 01       	movw	r30, r24
 5e4:	20 81       	ld	r18, Z
 5e6:	8a e7       	ldi	r24, 0x7A	; 122
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	20 61       	ori	r18, 0x10	; 16
 5ec:	dc 01       	movw	r26, r24
 5ee:	2c 93       	st	X, r18
        adcval=ADC;
 5f0:	88 e7       	ldi	r24, 0x78	; 120
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	fc 01       	movw	r30, r24
 5f6:	80 81       	ld	r24, Z
 5f8:	91 81       	ldd	r25, Z+1	; 0x01
 5fa:	9a 83       	std	Y+2, r25	; 0x02
 5fc:	89 83       	std	Y+1, r24	; 0x01
        adcscal=(255.0/600.0)*(((adcval<263)?(263):(adcval>863)?863:adcval)-263);
 5fe:	89 81       	ldd	r24, Y+1	; 0x01
 600:	9a 81       	ldd	r25, Y+2	; 0x02
 602:	87 30       	cpi	r24, 0x07	; 7
 604:	91 40       	sbci	r25, 0x01	; 1
 606:	e0 f0       	brcs	.+56     	; 0x640 <main+0x10c>
 608:	89 81       	ldd	r24, Y+1	; 0x01
 60a:	9a 81       	ldd	r25, Y+2	; 0x02
 60c:	80 36       	cpi	r24, 0x60	; 96
 60e:	23 e0       	ldi	r18, 0x03	; 3
 610:	92 07       	cpc	r25, r18
 612:	10 f0       	brcs	.+4      	; 0x618 <main+0xe4>
 614:	8f e5       	ldi	r24, 0x5F	; 95
 616:	93 e0       	ldi	r25, 0x03	; 3
 618:	87 50       	subi	r24, 0x07	; 7
 61a:	91 40       	sbci	r25, 0x01	; 1
 61c:	9c 01       	movw	r18, r24
 61e:	40 e0       	ldi	r20, 0x00	; 0
 620:	50 e0       	ldi	r21, 0x00	; 0
 622:	2c 87       	std	Y+12, r18	; 0x0c
 624:	3d 87       	std	Y+13, r19	; 0x0d
 626:	4e 87       	std	Y+14, r20	; 0x0e
 628:	5f 87       	std	Y+15, r21	; 0x0f
 62a:	6c 85       	ldd	r22, Y+12	; 0x0c
 62c:	7d 85       	ldd	r23, Y+13	; 0x0d
 62e:	8e 85       	ldd	r24, Y+14	; 0x0e
 630:	9f 85       	ldd	r25, Y+15	; 0x0f
 632:	0e 94 ba 03 	call	0x774	; 0x774 <__floatunsisf>
 636:	68 87       	std	Y+8, r22	; 0x08
 638:	79 87       	std	Y+9, r23	; 0x09
 63a:	8a 87       	std	Y+10, r24	; 0x0a
 63c:	9b 87       	std	Y+11, r25	; 0x0b
 63e:	04 c0       	rjmp	.+8      	; 0x648 <main+0x114>
 640:	18 86       	std	Y+8, r1	; 0x08
 642:	19 86       	std	Y+9, r1	; 0x09
 644:	1a 86       	std	Y+10, r1	; 0x0a
 646:	1b 86       	std	Y+11, r1	; 0x0b
 648:	2a e9       	ldi	r18, 0x9A	; 154
 64a:	39 e9       	ldi	r19, 0x99	; 153
 64c:	49 ed       	ldi	r20, 0xD9	; 217
 64e:	5e e3       	ldi	r21, 0x3E	; 62
 650:	68 85       	ldd	r22, Y+8	; 0x08
 652:	79 85       	ldd	r23, Y+9	; 0x09
 654:	8a 85       	ldd	r24, Y+10	; 0x0a
 656:	9b 85       	ldd	r25, Y+11	; 0x0b
 658:	0e 94 20 04 	call	0x840	; 0x840 <__mulsf3>
 65c:	68 8b       	std	Y+16, r22	; 0x10
 65e:	79 8b       	std	Y+17, r23	; 0x11
 660:	8a 8b       	std	Y+18, r24	; 0x12
 662:	9b 8b       	std	Y+19, r25	; 0x13
 664:	88 89       	ldd	r24, Y+16	; 0x10
 666:	99 89       	ldd	r25, Y+17	; 0x11
 668:	aa 89       	ldd	r26, Y+18	; 0x12
 66a:	bb 89       	ldd	r27, Y+19	; 0x13
 66c:	8c 83       	std	Y+4, r24	; 0x04
 66e:	9d 83       	std	Y+5, r25	; 0x05
 670:	ae 83       	std	Y+6, r26	; 0x06
 672:	bf 83       	std	Y+7, r27	; 0x07
 674:	6c 81       	ldd	r22, Y+4	; 0x04
 676:	7d 81       	ldd	r23, Y+5	; 0x05
 678:	8e 81       	ldd	r24, Y+6	; 0x06
 67a:	9f 81       	ldd	r25, Y+7	; 0x07
 67c:	0e 94 8b 03 	call	0x716	; 0x716 <__fixunssfsi>
 680:	6c 8b       	std	Y+20, r22	; 0x14
 682:	7d 8b       	std	Y+21, r23	; 0x15
 684:	8e 8b       	std	Y+22, r24	; 0x16
 686:	9f 8b       	std	Y+23, r25	; 0x17
 688:	9c 89       	ldd	r25, Y+20	; 0x14
 68a:	9b 83       	std	Y+3, r25	; 0x03
        OCR0B=adcscal;
 68c:	88 e4       	ldi	r24, 0x48	; 72
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	2b 81       	ldd	r18, Y+3	; 0x03
 692:	dc 01       	movw	r26, r24
 694:	2c 93       	st	X, r18
        OCR0A=255-adcscal;
 696:	87 e4       	ldi	r24, 0x47	; 71
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	2b 81       	ldd	r18, Y+3	; 0x03
 69c:	20 95       	com	r18
 69e:	fc 01       	movw	r30, r24
 6a0:	20 83       	st	Z, r18
        itoa(adcval,spga,10);
 6a2:	89 81       	ldd	r24, Y+1	; 0x01
 6a4:	9a 81       	ldd	r25, Y+2	; 0x02
 6a6:	4a e0       	ldi	r20, 0x0A	; 10
 6a8:	50 e0       	ldi	r21, 0x00	; 0
 6aa:	61 e0       	ldi	r22, 0x01	; 1
 6ac:	71 e0       	ldi	r23, 0x01	; 1
 6ae:	0e 94 b5 04 	call	0x96a	; 0x96a <itoa>
        while(!(ADCSRA&(1<<ADIF)));
 6b2:	8a cf       	rjmp	.-236    	; 0x5c8 <main+0x94>

000006b4 <__udivmodsi4>:
 6b4:	a1 e2       	ldi	r26, 0x21	; 33
 6b6:	1a 2e       	mov	r1, r26
 6b8:	aa 1b       	sub	r26, r26
 6ba:	bb 1b       	sub	r27, r27
 6bc:	fd 01       	movw	r30, r26
 6be:	0d c0       	rjmp	.+26     	; 0x6da <__udivmodsi4_ep>

000006c0 <__udivmodsi4_loop>:
 6c0:	aa 1f       	adc	r26, r26
 6c2:	bb 1f       	adc	r27, r27
 6c4:	ee 1f       	adc	r30, r30
 6c6:	ff 1f       	adc	r31, r31
 6c8:	a2 17       	cp	r26, r18
 6ca:	b3 07       	cpc	r27, r19
 6cc:	e4 07       	cpc	r30, r20
 6ce:	f5 07       	cpc	r31, r21
 6d0:	20 f0       	brcs	.+8      	; 0x6da <__udivmodsi4_ep>
 6d2:	a2 1b       	sub	r26, r18
 6d4:	b3 0b       	sbc	r27, r19
 6d6:	e4 0b       	sbc	r30, r20
 6d8:	f5 0b       	sbc	r31, r21

000006da <__udivmodsi4_ep>:
 6da:	66 1f       	adc	r22, r22
 6dc:	77 1f       	adc	r23, r23
 6de:	88 1f       	adc	r24, r24
 6e0:	99 1f       	adc	r25, r25
 6e2:	1a 94       	dec	r1
 6e4:	69 f7       	brne	.-38     	; 0x6c0 <__udivmodsi4_loop>
 6e6:	60 95       	com	r22
 6e8:	70 95       	com	r23
 6ea:	80 95       	com	r24
 6ec:	90 95       	com	r25
 6ee:	9b 01       	movw	r18, r22
 6f0:	ac 01       	movw	r20, r24
 6f2:	bd 01       	movw	r22, r26
 6f4:	cf 01       	movw	r24, r30
 6f6:	08 95       	ret

000006f8 <__umulhisi3>:
 6f8:	a2 9f       	mul	r26, r18
 6fa:	b0 01       	movw	r22, r0
 6fc:	b3 9f       	mul	r27, r19
 6fe:	c0 01       	movw	r24, r0
 700:	a3 9f       	mul	r26, r19
 702:	70 0d       	add	r23, r0
 704:	81 1d       	adc	r24, r1
 706:	11 24       	eor	r1, r1
 708:	91 1d       	adc	r25, r1
 70a:	b2 9f       	mul	r27, r18
 70c:	70 0d       	add	r23, r0
 70e:	81 1d       	adc	r24, r1
 710:	11 24       	eor	r1, r1
 712:	91 1d       	adc	r25, r1
 714:	08 95       	ret

00000716 <__fixunssfsi>:
 716:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__fp_splitA>
 71a:	88 f0       	brcs	.+34     	; 0x73e <__fixunssfsi+0x28>
 71c:	9f 57       	subi	r25, 0x7F	; 127
 71e:	98 f0       	brcs	.+38     	; 0x746 <__fixunssfsi+0x30>
 720:	b9 2f       	mov	r27, r25
 722:	99 27       	eor	r25, r25
 724:	b7 51       	subi	r27, 0x17	; 23
 726:	b0 f0       	brcs	.+44     	; 0x754 <__fixunssfsi+0x3e>
 728:	e1 f0       	breq	.+56     	; 0x762 <__fixunssfsi+0x4c>
 72a:	66 0f       	add	r22, r22
 72c:	77 1f       	adc	r23, r23
 72e:	88 1f       	adc	r24, r24
 730:	99 1f       	adc	r25, r25
 732:	1a f0       	brmi	.+6      	; 0x73a <__fixunssfsi+0x24>
 734:	ba 95       	dec	r27
 736:	c9 f7       	brne	.-14     	; 0x72a <__fixunssfsi+0x14>
 738:	14 c0       	rjmp	.+40     	; 0x762 <__fixunssfsi+0x4c>
 73a:	b1 30       	cpi	r27, 0x01	; 1
 73c:	91 f0       	breq	.+36     	; 0x762 <__fixunssfsi+0x4c>
 73e:	0e 94 19 04 	call	0x832	; 0x832 <__fp_zero>
 742:	b1 e0       	ldi	r27, 0x01	; 1
 744:	08 95       	ret
 746:	0c 94 19 04 	jmp	0x832	; 0x832 <__fp_zero>
 74a:	67 2f       	mov	r22, r23
 74c:	78 2f       	mov	r23, r24
 74e:	88 27       	eor	r24, r24
 750:	b8 5f       	subi	r27, 0xF8	; 248
 752:	39 f0       	breq	.+14     	; 0x762 <__fixunssfsi+0x4c>
 754:	b9 3f       	cpi	r27, 0xF9	; 249
 756:	cc f3       	brlt	.-14     	; 0x74a <__fixunssfsi+0x34>
 758:	86 95       	lsr	r24
 75a:	77 95       	ror	r23
 75c:	67 95       	ror	r22
 75e:	b3 95       	inc	r27
 760:	d9 f7       	brne	.-10     	; 0x758 <__fixunssfsi+0x42>
 762:	3e f4       	brtc	.+14     	; 0x772 <__fixunssfsi+0x5c>
 764:	90 95       	com	r25
 766:	80 95       	com	r24
 768:	70 95       	com	r23
 76a:	61 95       	neg	r22
 76c:	7f 4f       	sbci	r23, 0xFF	; 255
 76e:	8f 4f       	sbci	r24, 0xFF	; 255
 770:	9f 4f       	sbci	r25, 0xFF	; 255
 772:	08 95       	ret

00000774 <__floatunsisf>:
 774:	e8 94       	clt
 776:	09 c0       	rjmp	.+18     	; 0x78a <__floatsisf+0x12>

00000778 <__floatsisf>:
 778:	97 fb       	bst	r25, 7
 77a:	3e f4       	brtc	.+14     	; 0x78a <__floatsisf+0x12>
 77c:	90 95       	com	r25
 77e:	80 95       	com	r24
 780:	70 95       	com	r23
 782:	61 95       	neg	r22
 784:	7f 4f       	sbci	r23, 0xFF	; 255
 786:	8f 4f       	sbci	r24, 0xFF	; 255
 788:	9f 4f       	sbci	r25, 0xFF	; 255
 78a:	99 23       	and	r25, r25
 78c:	a9 f0       	breq	.+42     	; 0x7b8 <__floatsisf+0x40>
 78e:	f9 2f       	mov	r31, r25
 790:	96 e9       	ldi	r25, 0x96	; 150
 792:	bb 27       	eor	r27, r27
 794:	93 95       	inc	r25
 796:	f6 95       	lsr	r31
 798:	87 95       	ror	r24
 79a:	77 95       	ror	r23
 79c:	67 95       	ror	r22
 79e:	b7 95       	ror	r27
 7a0:	f1 11       	cpse	r31, r1
 7a2:	f8 cf       	rjmp	.-16     	; 0x794 <__floatsisf+0x1c>
 7a4:	fa f4       	brpl	.+62     	; 0x7e4 <__floatsisf+0x6c>
 7a6:	bb 0f       	add	r27, r27
 7a8:	11 f4       	brne	.+4      	; 0x7ae <__floatsisf+0x36>
 7aa:	60 ff       	sbrs	r22, 0
 7ac:	1b c0       	rjmp	.+54     	; 0x7e4 <__floatsisf+0x6c>
 7ae:	6f 5f       	subi	r22, 0xFF	; 255
 7b0:	7f 4f       	sbci	r23, 0xFF	; 255
 7b2:	8f 4f       	sbci	r24, 0xFF	; 255
 7b4:	9f 4f       	sbci	r25, 0xFF	; 255
 7b6:	16 c0       	rjmp	.+44     	; 0x7e4 <__floatsisf+0x6c>
 7b8:	88 23       	and	r24, r24
 7ba:	11 f0       	breq	.+4      	; 0x7c0 <__floatsisf+0x48>
 7bc:	96 e9       	ldi	r25, 0x96	; 150
 7be:	11 c0       	rjmp	.+34     	; 0x7e2 <__floatsisf+0x6a>
 7c0:	77 23       	and	r23, r23
 7c2:	21 f0       	breq	.+8      	; 0x7cc <__floatsisf+0x54>
 7c4:	9e e8       	ldi	r25, 0x8E	; 142
 7c6:	87 2f       	mov	r24, r23
 7c8:	76 2f       	mov	r23, r22
 7ca:	05 c0       	rjmp	.+10     	; 0x7d6 <__floatsisf+0x5e>
 7cc:	66 23       	and	r22, r22
 7ce:	71 f0       	breq	.+28     	; 0x7ec <__floatsisf+0x74>
 7d0:	96 e8       	ldi	r25, 0x86	; 134
 7d2:	86 2f       	mov	r24, r22
 7d4:	70 e0       	ldi	r23, 0x00	; 0
 7d6:	60 e0       	ldi	r22, 0x00	; 0
 7d8:	2a f0       	brmi	.+10     	; 0x7e4 <__floatsisf+0x6c>
 7da:	9a 95       	dec	r25
 7dc:	66 0f       	add	r22, r22
 7de:	77 1f       	adc	r23, r23
 7e0:	88 1f       	adc	r24, r24
 7e2:	da f7       	brpl	.-10     	; 0x7da <__floatsisf+0x62>
 7e4:	88 0f       	add	r24, r24
 7e6:	96 95       	lsr	r25
 7e8:	87 95       	ror	r24
 7ea:	97 f9       	bld	r25, 7
 7ec:	08 95       	ret

000007ee <__fp_split3>:
 7ee:	57 fd       	sbrc	r21, 7
 7f0:	90 58       	subi	r25, 0x80	; 128
 7f2:	44 0f       	add	r20, r20
 7f4:	55 1f       	adc	r21, r21
 7f6:	59 f0       	breq	.+22     	; 0x80e <__fp_splitA+0x10>
 7f8:	5f 3f       	cpi	r21, 0xFF	; 255
 7fa:	71 f0       	breq	.+28     	; 0x818 <__fp_splitA+0x1a>
 7fc:	47 95       	ror	r20

000007fe <__fp_splitA>:
 7fe:	88 0f       	add	r24, r24
 800:	97 fb       	bst	r25, 7
 802:	99 1f       	adc	r25, r25
 804:	61 f0       	breq	.+24     	; 0x81e <__fp_splitA+0x20>
 806:	9f 3f       	cpi	r25, 0xFF	; 255
 808:	79 f0       	breq	.+30     	; 0x828 <__fp_splitA+0x2a>
 80a:	87 95       	ror	r24
 80c:	08 95       	ret
 80e:	12 16       	cp	r1, r18
 810:	13 06       	cpc	r1, r19
 812:	14 06       	cpc	r1, r20
 814:	55 1f       	adc	r21, r21
 816:	f2 cf       	rjmp	.-28     	; 0x7fc <__fp_split3+0xe>
 818:	46 95       	lsr	r20
 81a:	f1 df       	rcall	.-30     	; 0x7fe <__fp_splitA>
 81c:	08 c0       	rjmp	.+16     	; 0x82e <__fp_splitA+0x30>
 81e:	16 16       	cp	r1, r22
 820:	17 06       	cpc	r1, r23
 822:	18 06       	cpc	r1, r24
 824:	99 1f       	adc	r25, r25
 826:	f1 cf       	rjmp	.-30     	; 0x80a <__fp_splitA+0xc>
 828:	86 95       	lsr	r24
 82a:	71 05       	cpc	r23, r1
 82c:	61 05       	cpc	r22, r1
 82e:	08 94       	sec
 830:	08 95       	ret

00000832 <__fp_zero>:
 832:	e8 94       	clt

00000834 <__fp_szero>:
 834:	bb 27       	eor	r27, r27
 836:	66 27       	eor	r22, r22
 838:	77 27       	eor	r23, r23
 83a:	cb 01       	movw	r24, r22
 83c:	97 f9       	bld	r25, 7
 83e:	08 95       	ret

00000840 <__mulsf3>:
 840:	0e 94 33 04 	call	0x866	; 0x866 <__mulsf3x>
 844:	0c 94 a4 04 	jmp	0x948	; 0x948 <__fp_round>
 848:	0e 94 96 04 	call	0x92c	; 0x92c <__fp_pscA>
 84c:	38 f0       	brcs	.+14     	; 0x85c <__mulsf3+0x1c>
 84e:	0e 94 9d 04 	call	0x93a	; 0x93a <__fp_pscB>
 852:	20 f0       	brcs	.+8      	; 0x85c <__mulsf3+0x1c>
 854:	95 23       	and	r25, r21
 856:	11 f0       	breq	.+4      	; 0x85c <__mulsf3+0x1c>
 858:	0c 94 8d 04 	jmp	0x91a	; 0x91a <__fp_inf>
 85c:	0c 94 93 04 	jmp	0x926	; 0x926 <__fp_nan>
 860:	11 24       	eor	r1, r1
 862:	0c 94 1a 04 	jmp	0x834	; 0x834 <__fp_szero>

00000866 <__mulsf3x>:
 866:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__fp_split3>
 86a:	70 f3       	brcs	.-36     	; 0x848 <__mulsf3+0x8>

0000086c <__mulsf3_pse>:
 86c:	95 9f       	mul	r25, r21
 86e:	c1 f3       	breq	.-16     	; 0x860 <__mulsf3+0x20>
 870:	95 0f       	add	r25, r21
 872:	50 e0       	ldi	r21, 0x00	; 0
 874:	55 1f       	adc	r21, r21
 876:	62 9f       	mul	r22, r18
 878:	f0 01       	movw	r30, r0
 87a:	72 9f       	mul	r23, r18
 87c:	bb 27       	eor	r27, r27
 87e:	f0 0d       	add	r31, r0
 880:	b1 1d       	adc	r27, r1
 882:	63 9f       	mul	r22, r19
 884:	aa 27       	eor	r26, r26
 886:	f0 0d       	add	r31, r0
 888:	b1 1d       	adc	r27, r1
 88a:	aa 1f       	adc	r26, r26
 88c:	64 9f       	mul	r22, r20
 88e:	66 27       	eor	r22, r22
 890:	b0 0d       	add	r27, r0
 892:	a1 1d       	adc	r26, r1
 894:	66 1f       	adc	r22, r22
 896:	82 9f       	mul	r24, r18
 898:	22 27       	eor	r18, r18
 89a:	b0 0d       	add	r27, r0
 89c:	a1 1d       	adc	r26, r1
 89e:	62 1f       	adc	r22, r18
 8a0:	73 9f       	mul	r23, r19
 8a2:	b0 0d       	add	r27, r0
 8a4:	a1 1d       	adc	r26, r1
 8a6:	62 1f       	adc	r22, r18
 8a8:	83 9f       	mul	r24, r19
 8aa:	a0 0d       	add	r26, r0
 8ac:	61 1d       	adc	r22, r1
 8ae:	22 1f       	adc	r18, r18
 8b0:	74 9f       	mul	r23, r20
 8b2:	33 27       	eor	r19, r19
 8b4:	a0 0d       	add	r26, r0
 8b6:	61 1d       	adc	r22, r1
 8b8:	23 1f       	adc	r18, r19
 8ba:	84 9f       	mul	r24, r20
 8bc:	60 0d       	add	r22, r0
 8be:	21 1d       	adc	r18, r1
 8c0:	82 2f       	mov	r24, r18
 8c2:	76 2f       	mov	r23, r22
 8c4:	6a 2f       	mov	r22, r26
 8c6:	11 24       	eor	r1, r1
 8c8:	9f 57       	subi	r25, 0x7F	; 127
 8ca:	50 40       	sbci	r21, 0x00	; 0
 8cc:	9a f0       	brmi	.+38     	; 0x8f4 <__mulsf3_pse+0x88>
 8ce:	f1 f0       	breq	.+60     	; 0x90c <__stack+0xd>
 8d0:	88 23       	and	r24, r24
 8d2:	4a f0       	brmi	.+18     	; 0x8e6 <__mulsf3_pse+0x7a>
 8d4:	ee 0f       	add	r30, r30
 8d6:	ff 1f       	adc	r31, r31
 8d8:	bb 1f       	adc	r27, r27
 8da:	66 1f       	adc	r22, r22
 8dc:	77 1f       	adc	r23, r23
 8de:	88 1f       	adc	r24, r24
 8e0:	91 50       	subi	r25, 0x01	; 1
 8e2:	50 40       	sbci	r21, 0x00	; 0
 8e4:	a9 f7       	brne	.-22     	; 0x8d0 <__mulsf3_pse+0x64>
 8e6:	9e 3f       	cpi	r25, 0xFE	; 254
 8e8:	51 05       	cpc	r21, r1
 8ea:	80 f0       	brcs	.+32     	; 0x90c <__stack+0xd>
 8ec:	0c 94 8d 04 	jmp	0x91a	; 0x91a <__fp_inf>
 8f0:	0c 94 1a 04 	jmp	0x834	; 0x834 <__fp_szero>
 8f4:	5f 3f       	cpi	r21, 0xFF	; 255
 8f6:	e4 f3       	brlt	.-8      	; 0x8f0 <__mulsf3_pse+0x84>
 8f8:	98 3e       	cpi	r25, 0xE8	; 232
 8fa:	d4 f3       	brlt	.-12     	; 0x8f0 <__mulsf3_pse+0x84>
 8fc:	86 95       	lsr	r24
 8fe:	77 95       	ror	r23
 900:	67 95       	ror	r22
 902:	b7 95       	ror	r27
 904:	f7 95       	ror	r31
 906:	e7 95       	ror	r30
 908:	9f 5f       	subi	r25, 0xFF	; 255
 90a:	c1 f7       	brne	.-16     	; 0x8fc <__mulsf3_pse+0x90>
 90c:	fe 2b       	or	r31, r30
 90e:	88 0f       	add	r24, r24
 910:	91 1d       	adc	r25, r1
 912:	96 95       	lsr	r25
 914:	87 95       	ror	r24
 916:	97 f9       	bld	r25, 7
 918:	08 95       	ret

0000091a <__fp_inf>:
 91a:	97 f9       	bld	r25, 7
 91c:	9f 67       	ori	r25, 0x7F	; 127
 91e:	80 e8       	ldi	r24, 0x80	; 128
 920:	70 e0       	ldi	r23, 0x00	; 0
 922:	60 e0       	ldi	r22, 0x00	; 0
 924:	08 95       	ret

00000926 <__fp_nan>:
 926:	9f ef       	ldi	r25, 0xFF	; 255
 928:	80 ec       	ldi	r24, 0xC0	; 192
 92a:	08 95       	ret

0000092c <__fp_pscA>:
 92c:	00 24       	eor	r0, r0
 92e:	0a 94       	dec	r0
 930:	16 16       	cp	r1, r22
 932:	17 06       	cpc	r1, r23
 934:	18 06       	cpc	r1, r24
 936:	09 06       	cpc	r0, r25
 938:	08 95       	ret

0000093a <__fp_pscB>:
 93a:	00 24       	eor	r0, r0
 93c:	0a 94       	dec	r0
 93e:	12 16       	cp	r1, r18
 940:	13 06       	cpc	r1, r19
 942:	14 06       	cpc	r1, r20
 944:	05 06       	cpc	r0, r21
 946:	08 95       	ret

00000948 <__fp_round>:
 948:	09 2e       	mov	r0, r25
 94a:	03 94       	inc	r0
 94c:	00 0c       	add	r0, r0
 94e:	11 f4       	brne	.+4      	; 0x954 <__fp_round+0xc>
 950:	88 23       	and	r24, r24
 952:	52 f0       	brmi	.+20     	; 0x968 <__fp_round+0x20>
 954:	bb 0f       	add	r27, r27
 956:	40 f4       	brcc	.+16     	; 0x968 <__fp_round+0x20>
 958:	bf 2b       	or	r27, r31
 95a:	11 f4       	brne	.+4      	; 0x960 <__fp_round+0x18>
 95c:	60 ff       	sbrs	r22, 0
 95e:	04 c0       	rjmp	.+8      	; 0x968 <__fp_round+0x20>
 960:	6f 5f       	subi	r22, 0xFF	; 255
 962:	7f 4f       	sbci	r23, 0xFF	; 255
 964:	8f 4f       	sbci	r24, 0xFF	; 255
 966:	9f 4f       	sbci	r25, 0xFF	; 255
 968:	08 95       	ret

0000096a <itoa>:
 96a:	45 32       	cpi	r20, 0x25	; 37
 96c:	51 05       	cpc	r21, r1
 96e:	20 f4       	brcc	.+8      	; 0x978 <itoa+0xe>
 970:	42 30       	cpi	r20, 0x02	; 2
 972:	10 f0       	brcs	.+4      	; 0x978 <itoa+0xe>
 974:	0c 94 c0 04 	jmp	0x980	; 0x980 <__itoa_ncheck>
 978:	fb 01       	movw	r30, r22
 97a:	10 82       	st	Z, r1
 97c:	cb 01       	movw	r24, r22
 97e:	08 95       	ret

00000980 <__itoa_ncheck>:
 980:	bb 27       	eor	r27, r27
 982:	4a 30       	cpi	r20, 0x0A	; 10
 984:	31 f4       	brne	.+12     	; 0x992 <__itoa_ncheck+0x12>
 986:	99 23       	and	r25, r25
 988:	22 f4       	brpl	.+8      	; 0x992 <__itoa_ncheck+0x12>
 98a:	bd e2       	ldi	r27, 0x2D	; 45
 98c:	90 95       	com	r25
 98e:	81 95       	neg	r24
 990:	9f 4f       	sbci	r25, 0xFF	; 255
 992:	0c 94 cc 04 	jmp	0x998	; 0x998 <__utoa_common>

00000996 <__utoa_ncheck>:
 996:	bb 27       	eor	r27, r27

00000998 <__utoa_common>:
 998:	fb 01       	movw	r30, r22
 99a:	55 27       	eor	r21, r21
 99c:	aa 27       	eor	r26, r26
 99e:	88 0f       	add	r24, r24
 9a0:	99 1f       	adc	r25, r25
 9a2:	aa 1f       	adc	r26, r26
 9a4:	a4 17       	cp	r26, r20
 9a6:	10 f0       	brcs	.+4      	; 0x9ac <__utoa_common+0x14>
 9a8:	a4 1b       	sub	r26, r20
 9aa:	83 95       	inc	r24
 9ac:	50 51       	subi	r21, 0x10	; 16
 9ae:	b9 f7       	brne	.-18     	; 0x99e <__utoa_common+0x6>
 9b0:	a0 5d       	subi	r26, 0xD0	; 208
 9b2:	aa 33       	cpi	r26, 0x3A	; 58
 9b4:	08 f0       	brcs	.+2      	; 0x9b8 <__utoa_common+0x20>
 9b6:	a9 5d       	subi	r26, 0xD9	; 217
 9b8:	a1 93       	st	Z+, r26
 9ba:	00 97       	sbiw	r24, 0x00	; 0
 9bc:	79 f7       	brne	.-34     	; 0x99c <__utoa_common+0x4>
 9be:	b1 11       	cpse	r27, r1
 9c0:	b1 93       	st	Z+, r27
 9c2:	11 92       	st	Z+, r1
 9c4:	cb 01       	movw	r24, r22
 9c6:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <strrev>

000009ca <strrev>:
 9ca:	dc 01       	movw	r26, r24
 9cc:	fc 01       	movw	r30, r24
 9ce:	67 2f       	mov	r22, r23
 9d0:	71 91       	ld	r23, Z+
 9d2:	77 23       	and	r23, r23
 9d4:	e1 f7       	brne	.-8      	; 0x9ce <strrev+0x4>
 9d6:	32 97       	sbiw	r30, 0x02	; 2
 9d8:	04 c0       	rjmp	.+8      	; 0x9e2 <strrev+0x18>
 9da:	7c 91       	ld	r23, X
 9dc:	6d 93       	st	X+, r22
 9de:	70 83       	st	Z, r23
 9e0:	62 91       	ld	r22, -Z
 9e2:	ae 17       	cp	r26, r30
 9e4:	bf 07       	cpc	r27, r31
 9e6:	c8 f3       	brcs	.-14     	; 0x9da <strrev+0x10>
 9e8:	08 95       	ret

000009ea <_exit>:
 9ea:	f8 94       	cli

000009ec <__stop_program>:
 9ec:	ff cf       	rjmp	.-2      	; 0x9ec <__stop_program>
