
bin\Debug\Countdown7Segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000002b2  00000346  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .fuse         00000003  00820000  00820000  00000350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .debug_aranges 00000060  00000000  00000000  00000353  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000072  00000000  00000000  000003b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000297  00000000  00000000  00000425  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001c1  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c5  00000000  00000000  0000087d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  00000b44  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000010a  00000000  00000000  00000ba4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 eb       	ldi	r30, 0xB2	; 178
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
  8a:	0e 94 bf 00 	call	0x17e	; 0x17e <main>
  8e:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <get4bit>:
#include <avr/io.h>

uint8_t get4bit()     //gibt Wert zwischen 0 und 15 zurück je nach Position des Schalters
{
  96:	df 93       	push	r29
  98:	cf 93       	push	r28
  9a:	00 d0       	rcall	.+0      	; 0x9c <get4bit+0x6>
  9c:	0f 92       	push	r0
  9e:	cd b7       	in	r28, 0x3d	; 61
  a0:	de b7       	in	r29, 0x3e	; 62
    uint8_t schalter=0;
  a2:	1b 82       	std	Y+3, r1	; 0x03
    int i;
    for(i=0;i<4;i++)
  a4:	1a 82       	std	Y+2, r1	; 0x02
  a6:	19 82       	std	Y+1, r1	; 0x01
  a8:	20 c0       	rjmp	.+64     	; 0xea <get4bit+0x54>
    {
        if(!(PINC&1<<i))
  aa:	e6 e2       	ldi	r30, 0x26	; 38
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	88 2f       	mov	r24, r24
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	09 80       	ldd	r0, Y+1	; 0x01
  b6:	02 c0       	rjmp	.+4      	; 0xbc <get4bit+0x26>
  b8:	95 95       	asr	r25
  ba:	87 95       	ror	r24
  bc:	0a 94       	dec	r0
  be:	e2 f7       	brpl	.-8      	; 0xb8 <get4bit+0x22>
  c0:	81 70       	andi	r24, 0x01	; 1
  c2:	90 70       	andi	r25, 0x00	; 0
  c4:	00 97       	sbiw	r24, 0x00	; 0
  c6:	61 f4       	brne	.+24     	; 0xe0 <get4bit+0x4a>
            schalter+=1<<i;
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	09 80       	ldd	r0, Y+1	; 0x01
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <get4bit+0x3e>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	0a 94       	dec	r0
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <get4bit+0x3a>
  d8:	98 2f       	mov	r25, r24
  da:	8b 81       	ldd	r24, Y+3	; 0x03
  dc:	89 0f       	add	r24, r25
  de:	8b 83       	std	Y+3, r24	; 0x03

uint8_t get4bit()     //gibt Wert zwischen 0 und 15 zurück je nach Position des Schalters
{
    uint8_t schalter=0;
    int i;
    for(i=0;i<4;i++)
  e0:	89 81       	ldd	r24, Y+1	; 0x01
  e2:	9a 81       	ldd	r25, Y+2	; 0x02
  e4:	01 96       	adiw	r24, 0x01	; 1
  e6:	9a 83       	std	Y+2, r25	; 0x02
  e8:	89 83       	std	Y+1, r24	; 0x01
  ea:	89 81       	ldd	r24, Y+1	; 0x01
  ec:	9a 81       	ldd	r25, Y+2	; 0x02
  ee:	84 30       	cpi	r24, 0x04	; 4
  f0:	91 05       	cpc	r25, r1
  f2:	dc f2       	brlt	.-74     	; 0xaa <get4bit+0x14>
    {
        if(!(PINC&1<<i))
            schalter+=1<<i;
    }
    return schalter;
  f4:	8b 81       	ldd	r24, Y+3	; 0x03
}
  f6:	0f 90       	pop	r0
  f8:	0f 90       	pop	r0
  fa:	0f 90       	pop	r0
  fc:	cf 91       	pop	r28
  fe:	df 91       	pop	r29
 100:	08 95       	ret

00000102 <delay>:
#include <avr/io.h>

void delay(uint32_t ms)
{
 102:	df 93       	push	r29
 104:	cf 93       	push	r28
 106:	00 d0       	rcall	.+0      	; 0x108 <delay+0x6>
 108:	00 d0       	rcall	.+0      	; 0x10a <delay+0x8>
 10a:	0f 92       	push	r0
 10c:	cd b7       	in	r28, 0x3d	; 61
 10e:	de b7       	in	r29, 0x3e	; 62
 110:	69 83       	std	Y+1, r22	; 0x01
 112:	7a 83       	std	Y+2, r23	; 0x02
 114:	8b 83       	std	Y+3, r24	; 0x03
 116:	9c 83       	std	Y+4, r25	; 0x04
    ms*=371;
 118:	89 81       	ldd	r24, Y+1	; 0x01
 11a:	9a 81       	ldd	r25, Y+2	; 0x02
 11c:	ab 81       	ldd	r26, Y+3	; 0x03
 11e:	bc 81       	ldd	r27, Y+4	; 0x04
 120:	23 e7       	ldi	r18, 0x73	; 115
 122:	31 e0       	ldi	r19, 0x01	; 1
 124:	40 e0       	ldi	r20, 0x00	; 0
 126:	50 e0       	ldi	r21, 0x00	; 0
 128:	bc 01       	movw	r22, r24
 12a:	cd 01       	movw	r24, r26
 12c:	0e 94 2c 01 	call	0x258	; 0x258 <__mulsi3>
 130:	dc 01       	movw	r26, r24
 132:	cb 01       	movw	r24, r22
 134:	89 83       	std	Y+1, r24	; 0x01
 136:	9a 83       	std	Y+2, r25	; 0x02
 138:	ab 83       	std	Y+3, r26	; 0x03
 13a:	bc 83       	std	Y+4, r27	; 0x04
    while(ms--);
 13c:	1d 82       	std	Y+5, r1	; 0x05
 13e:	89 81       	ldd	r24, Y+1	; 0x01
 140:	9a 81       	ldd	r25, Y+2	; 0x02
 142:	ab 81       	ldd	r26, Y+3	; 0x03
 144:	bc 81       	ldd	r27, Y+4	; 0x04
 146:	00 97       	sbiw	r24, 0x00	; 0
 148:	a1 05       	cpc	r26, r1
 14a:	b1 05       	cpc	r27, r1
 14c:	11 f0       	breq	.+4      	; 0x152 <delay+0x50>
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	8d 83       	std	Y+5, r24	; 0x05
 152:	89 81       	ldd	r24, Y+1	; 0x01
 154:	9a 81       	ldd	r25, Y+2	; 0x02
 156:	ab 81       	ldd	r26, Y+3	; 0x03
 158:	bc 81       	ldd	r27, Y+4	; 0x04
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	a1 09       	sbc	r26, r1
 15e:	b1 09       	sbc	r27, r1
 160:	89 83       	std	Y+1, r24	; 0x01
 162:	9a 83       	std	Y+2, r25	; 0x02
 164:	ab 83       	std	Y+3, r26	; 0x03
 166:	bc 83       	std	Y+4, r27	; 0x04
 168:	8d 81       	ldd	r24, Y+5	; 0x05
 16a:	88 23       	and	r24, r24
 16c:	39 f7       	brne	.-50     	; 0x13c <delay+0x3a>
}
 16e:	0f 90       	pop	r0
 170:	0f 90       	pop	r0
 172:	0f 90       	pop	r0
 174:	0f 90       	pop	r0
 176:	0f 90       	pop	r0
 178:	cf 91       	pop	r28
 17a:	df 91       	pop	r29
 17c:	08 95       	ret

0000017e <main>:

uint8_t get4bit();
void delay(uint32_t ms);

int main(void)
{
 17e:	df 93       	push	r29
 180:	cf 93       	push	r28
 182:	cd b7       	in	r28, 0x3d	; 61
 184:	de b7       	in	r29, 0x3e	; 62
 186:	61 97       	sbiw	r28, 0x11	; 17
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	f8 94       	cli
 18c:	de bf       	out	0x3e, r29	; 62
 18e:	0f be       	out	0x3f, r0	; 63
 190:	cd bf       	out	0x3d, r28	; 61
    DDRD=0xFF;
 192:	ea e2       	ldi	r30, 0x2A	; 42
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	8f ef       	ldi	r24, 0xFF	; 255
 198:	80 83       	st	Z, r24
    DDRC=0x00;        //A0 bis A3 auf Eingang
 19a:	e7 e2       	ldi	r30, 0x27	; 39
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	10 82       	st	Z, r1
    PORTC=0x0F;       //A0 bis A3 auf HIGH um PU Widerstand einzuschalten
 1a0:	e8 e2       	ldi	r30, 0x28	; 40
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	8f e0       	ldi	r24, 0x0F	; 15
 1a6:	80 83       	st	Z, r24
    uint8_t ziffern[10]={0b11110111,0b10100100,0b11011101,0b11101101,0b10101110,0b11101011,0b11111011,0b10100111,0b11111111,0b11101111};
 1a8:	ce 01       	movw	r24, r28
 1aa:	03 96       	adiw	r24, 0x03	; 3
 1ac:	9e 87       	std	Y+14, r25	; 0x0e
 1ae:	8d 87       	std	Y+13, r24	; 0x0d
 1b0:	e0 e0       	ldi	r30, 0x00	; 0
 1b2:	f1 e0       	ldi	r31, 0x01	; 1
 1b4:	f8 8b       	std	Y+16, r31	; 0x10
 1b6:	ef 87       	std	Y+15, r30	; 0x0f
 1b8:	fa e0       	ldi	r31, 0x0A	; 10
 1ba:	f9 8b       	std	Y+17, r31	; 0x11
 1bc:	ef 85       	ldd	r30, Y+15	; 0x0f
 1be:	f8 89       	ldd	r31, Y+16	; 0x10
 1c0:	00 80       	ld	r0, Z
 1c2:	8f 85       	ldd	r24, Y+15	; 0x0f
 1c4:	98 89       	ldd	r25, Y+16	; 0x10
 1c6:	01 96       	adiw	r24, 0x01	; 1
 1c8:	98 8b       	std	Y+16, r25	; 0x10
 1ca:	8f 87       	std	Y+15, r24	; 0x0f
 1cc:	ed 85       	ldd	r30, Y+13	; 0x0d
 1ce:	fe 85       	ldd	r31, Y+14	; 0x0e
 1d0:	00 82       	st	Z, r0
 1d2:	8d 85       	ldd	r24, Y+13	; 0x0d
 1d4:	9e 85       	ldd	r25, Y+14	; 0x0e
 1d6:	01 96       	adiw	r24, 0x01	; 1
 1d8:	9e 87       	std	Y+14, r25	; 0x0e
 1da:	8d 87       	std	Y+13, r24	; 0x0d
 1dc:	99 89       	ldd	r25, Y+17	; 0x11
 1de:	91 50       	subi	r25, 0x01	; 1
 1e0:	99 8b       	std	Y+17, r25	; 0x11
 1e2:	e9 89       	ldd	r30, Y+17	; 0x11
 1e4:	ee 23       	and	r30, r30
 1e6:	51 f7       	brne	.-44     	; 0x1bc <main+0x3e>
    uint8_t start=9;
 1e8:	89 e0       	ldi	r24, 0x09	; 9
 1ea:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t cnt=9;
 1ec:	89 e0       	ldi	r24, 0x09	; 9
 1ee:	89 83       	std	Y+1, r24	; 0x01
    PORTD=0xFF;
 1f0:	eb e2       	ldi	r30, 0x2B	; 43
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	8f ef       	ldi	r24, 0xFF	; 255
 1f6:	80 83       	st	Z, r24
    while(1)
    {
        if(get4bit()%10!=start)
 1f8:	0e 94 4b 00 	call	0x96	; 0x96 <get4bit>
 1fc:	9a e0       	ldi	r25, 0x0A	; 10
 1fe:	69 2f       	mov	r22, r25
 200:	0e 94 4b 01 	call	0x296	; 0x296 <__udivmodqi4>
 204:	89 2f       	mov	r24, r25
 206:	98 2f       	mov	r25, r24
 208:	8a 81       	ldd	r24, Y+2	; 0x02
 20a:	98 17       	cp	r25, r24
 20c:	51 f0       	breq	.+20     	; 0x222 <main+0xa4>
        {
            start=get4bit()%10;
 20e:	0e 94 4b 00 	call	0x96	; 0x96 <get4bit>
 212:	9a e0       	ldi	r25, 0x0A	; 10
 214:	69 2f       	mov	r22, r25
 216:	0e 94 4b 01 	call	0x296	; 0x296 <__udivmodqi4>
 21a:	89 2f       	mov	r24, r25
 21c:	8a 83       	std	Y+2, r24	; 0x02
            cnt=start;
 21e:	8a 81       	ldd	r24, Y+2	; 0x02
 220:	89 83       	std	Y+1, r24	; 0x01
        }
        PORTD=ziffern[cnt--];
 222:	ab e2       	ldi	r26, 0x2B	; 43
 224:	b0 e0       	ldi	r27, 0x00	; 0
 226:	89 81       	ldd	r24, Y+1	; 0x01
 228:	28 2f       	mov	r18, r24
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	ce 01       	movw	r24, r28
 22e:	03 96       	adiw	r24, 0x03	; 3
 230:	fc 01       	movw	r30, r24
 232:	e2 0f       	add	r30, r18
 234:	f3 1f       	adc	r31, r19
 236:	80 81       	ld	r24, Z
 238:	8c 93       	st	X, r24
 23a:	89 81       	ldd	r24, Y+1	; 0x01
 23c:	81 50       	subi	r24, 0x01	; 1
 23e:	89 83       	std	Y+1, r24	; 0x01
        delay(500);
 240:	64 ef       	ldi	r22, 0xF4	; 244
 242:	71 e0       	ldi	r23, 0x01	; 1
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0e 94 81 00 	call	0x102	; 0x102 <delay>
        if(cnt==0)
 24c:	89 81       	ldd	r24, Y+1	; 0x01
 24e:	88 23       	and	r24, r24
 250:	99 f6       	brne	.-90     	; 0x1f8 <main+0x7a>
            cnt=start;
 252:	8a 81       	ldd	r24, Y+2	; 0x02
 254:	89 83       	std	Y+1, r24	; 0x01
 256:	d0 cf       	rjmp	.-96     	; 0x1f8 <main+0x7a>

00000258 <__mulsi3>:
 258:	62 9f       	mul	r22, r18
 25a:	d0 01       	movw	r26, r0
 25c:	73 9f       	mul	r23, r19
 25e:	f0 01       	movw	r30, r0
 260:	82 9f       	mul	r24, r18
 262:	e0 0d       	add	r30, r0
 264:	f1 1d       	adc	r31, r1
 266:	64 9f       	mul	r22, r20
 268:	e0 0d       	add	r30, r0
 26a:	f1 1d       	adc	r31, r1
 26c:	92 9f       	mul	r25, r18
 26e:	f0 0d       	add	r31, r0
 270:	83 9f       	mul	r24, r19
 272:	f0 0d       	add	r31, r0
 274:	74 9f       	mul	r23, r20
 276:	f0 0d       	add	r31, r0
 278:	65 9f       	mul	r22, r21
 27a:	f0 0d       	add	r31, r0
 27c:	99 27       	eor	r25, r25
 27e:	72 9f       	mul	r23, r18
 280:	b0 0d       	add	r27, r0
 282:	e1 1d       	adc	r30, r1
 284:	f9 1f       	adc	r31, r25
 286:	63 9f       	mul	r22, r19
 288:	b0 0d       	add	r27, r0
 28a:	e1 1d       	adc	r30, r1
 28c:	f9 1f       	adc	r31, r25
 28e:	bd 01       	movw	r22, r26
 290:	cf 01       	movw	r24, r30
 292:	11 24       	eor	r1, r1
 294:	08 95       	ret

00000296 <__udivmodqi4>:
 296:	99 1b       	sub	r25, r25
 298:	79 e0       	ldi	r23, 0x09	; 9
 29a:	04 c0       	rjmp	.+8      	; 0x2a4 <__udivmodqi4_ep>

0000029c <__udivmodqi4_loop>:
 29c:	99 1f       	adc	r25, r25
 29e:	96 17       	cp	r25, r22
 2a0:	08 f0       	brcs	.+2      	; 0x2a4 <__udivmodqi4_ep>
 2a2:	96 1b       	sub	r25, r22

000002a4 <__udivmodqi4_ep>:
 2a4:	88 1f       	adc	r24, r24
 2a6:	7a 95       	dec	r23
 2a8:	c9 f7       	brne	.-14     	; 0x29c <__udivmodqi4_loop>
 2aa:	80 95       	com	r24
 2ac:	08 95       	ret

000002ae <_exit>:
 2ae:	f8 94       	cli

000002b0 <__stop_program>:
 2b0:	ff cf       	rjmp	.-2      	; 0x2b0 <__stop_program>
