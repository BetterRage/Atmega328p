
bin\Debug\UltraschallDistanz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000009b4  00000a48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .fuse         00000003  00820000  00820000  00000a48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .comment      00000012  00000000  00000000  00000a4b  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a60  2**2
                  CONTENTS, READONLY, OCTETS
  5 .debug_aranges 00000098  00000000  00000000  00000aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   0000099f  00000000  00000000  00000b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 000007fa  00000000  00000000  000014d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   000007bc  00000000  00000000  00001cd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  00000120  00000000  00000000  00002490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    000003f7  00000000  00000000  000025b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 f7 01 	call	0x3ee	; 0x3ee <main>
  78:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <init_usart>:
#ifndef UART_H_INCLUDED
#define UART_H_INCLUDED
#include <avr/io.h>

void init_usart(uint32_t baud)
{
  80:	0f 93       	push	r16
  82:	1f 93       	push	r17
  84:	cf 93       	push	r28
  86:	df 93       	push	r29
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
  8c:	28 97       	sbiw	r28, 0x08	; 8
  8e:	0f b6       	in	r0, 0x3f	; 63
  90:	f8 94       	cli
  92:	de bf       	out	0x3e, r29	; 62
  94:	0f be       	out	0x3f, r0	; 63
  96:	cd bf       	out	0x3d, r28	; 61
  98:	69 83       	std	Y+1, r22	; 0x01
  9a:	7a 83       	std	Y+2, r23	; 0x02
  9c:	8b 83       	std	Y+3, r24	; 0x03
  9e:	9c 83       	std	Y+4, r25	; 0x04
    UBRR0L = (16000000ul/(16ul*baud))-1;
  a0:	89 81       	ldd	r24, Y+1	; 0x01
  a2:	9a 81       	ldd	r25, Y+2	; 0x02
  a4:	ab 81       	ldd	r26, Y+3	; 0x03
  a6:	bc 81       	ldd	r27, Y+4	; 0x04
  a8:	88 0f       	add	r24, r24
  aa:	99 1f       	adc	r25, r25
  ac:	aa 1f       	adc	r26, r26
  ae:	bb 1f       	adc	r27, r27
  b0:	88 0f       	add	r24, r24
  b2:	99 1f       	adc	r25, r25
  b4:	aa 1f       	adc	r26, r26
  b6:	bb 1f       	adc	r27, r27
  b8:	88 0f       	add	r24, r24
  ba:	99 1f       	adc	r25, r25
  bc:	aa 1f       	adc	r26, r26
  be:	bb 1f       	adc	r27, r27
  c0:	88 0f       	add	r24, r24
  c2:	99 1f       	adc	r25, r25
  c4:	aa 1f       	adc	r26, r26
  c6:	bb 1f       	adc	r27, r27
  c8:	8c 01       	movw	r16, r24
  ca:	9d 01       	movw	r18, r26
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	94 e2       	ldi	r25, 0x24	; 36
  d0:	a4 ef       	ldi	r26, 0xF4	; 244
  d2:	b0 e0       	ldi	r27, 0x00	; 0
  d4:	8d 83       	std	Y+5, r24	; 0x05
  d6:	9e 83       	std	Y+6, r25	; 0x06
  d8:	af 83       	std	Y+7, r26	; 0x07
  da:	b8 87       	std	Y+8, r27	; 0x08
  dc:	6d 81       	ldd	r22, Y+5	; 0x05
  de:	7e 81       	ldd	r23, Y+6	; 0x06
  e0:	8f 81       	ldd	r24, Y+7	; 0x07
  e2:	98 85       	ldd	r25, Y+8	; 0x08
  e4:	a9 01       	movw	r20, r18
  e6:	98 01       	movw	r18, r16
  e8:	0e 94 4c 03 	call	0x698	; 0x698 <__udivmodsi4>
  ec:	da 01       	movw	r26, r20
  ee:	c9 01       	movw	r24, r18
  f0:	28 2f       	mov	r18, r24
  f2:	84 ec       	ldi	r24, 0xC4	; 196
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	dc 01       	movw	r26, r24
  fa:	2c 93       	st	X, r18
    UBRR0H = 0;
  fc:	85 ec       	ldi	r24, 0xC5	; 197
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	fc 01       	movw	r30, r24
 102:	10 82       	st	Z, r1
    UCSR0B |= (1<<TXEN0) | (1<<RXEN0)|(1<<RXCIE0);           // Sender und Empfänger aktivieren
 104:	81 ec       	ldi	r24, 0xC1	; 193
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	dc 01       	movw	r26, r24
 10a:	2c 91       	ld	r18, X
 10c:	81 ec       	ldi	r24, 0xC1	; 193
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	28 69       	ori	r18, 0x98	; 152
 112:	fc 01       	movw	r30, r24
 114:	20 83       	st	Z, r18
    UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);         // 8-Bit Übertragung
 116:	82 ec       	ldi	r24, 0xC2	; 194
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	26 e0       	ldi	r18, 0x06	; 6
 11c:	dc 01       	movw	r26, r24
 11e:	2c 93       	st	X, r18
 // Asynchrone Übertragung (UMSEL00=0 und UMSEL01=0)
}
 120:	00 00       	nop
 122:	28 96       	adiw	r28, 0x08	; 8
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	f8 94       	cli
 128:	de bf       	out	0x3e, r29	; 62
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	cd bf       	out	0x3d, r28	; 61
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	1f 91       	pop	r17
 134:	0f 91       	pop	r16
 136:	08 95       	ret

00000138 <_putch>:
void _putch(char ch)
{
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	0f 92       	push	r0
 13e:	cd b7       	in	r28, 0x3d	; 61
 140:	de b7       	in	r29, 0x3e	; 62
 142:	89 83       	std	Y+1, r24	; 0x01
    while(!(UCSR0A & (1<<UDRE0)));
 144:	00 00       	nop
 146:	80 ec       	ldi	r24, 0xC0	; 192
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	fc 01       	movw	r30, r24
 14c:	80 81       	ld	r24, Z
 14e:	88 2f       	mov	r24, r24
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	80 72       	andi	r24, 0x20	; 32
 154:	99 27       	eor	r25, r25
 156:	89 2b       	or	r24, r25
 158:	b1 f3       	breq	.-20     	; 0x146 <_putch+0xe>
    UDR0 = ch;
 15a:	86 ec       	ldi	r24, 0xC6	; 198
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	29 81       	ldd	r18, Y+1	; 0x01
 160:	fc 01       	movw	r30, r24
 162:	20 83       	st	Z, r18
}
 164:	00 00       	nop
 166:	0f 90       	pop	r0
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	08 95       	ret

0000016e <_puts>:
void _puts(char st[])
{
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	00 d0       	rcall	.+0      	; 0x174 <_puts+0x6>
 174:	0f 92       	push	r0
 176:	cd b7       	in	r28, 0x3d	; 61
 178:	de b7       	in	r29, 0x3e	; 62
 17a:	9b 83       	std	Y+3, r25	; 0x03
 17c:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t i=0;
 17e:	19 82       	std	Y+1, r1	; 0x01
    while(st[i])
 180:	0e c0       	rjmp	.+28     	; 0x19e <_puts+0x30>
        _putch(st[i++]);
 182:	89 81       	ldd	r24, Y+1	; 0x01
 184:	91 e0       	ldi	r25, 0x01	; 1
 186:	98 0f       	add	r25, r24
 188:	99 83       	std	Y+1, r25	; 0x01
 18a:	88 2f       	mov	r24, r24
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	2a 81       	ldd	r18, Y+2	; 0x02
 190:	3b 81       	ldd	r19, Y+3	; 0x03
 192:	82 0f       	add	r24, r18
 194:	93 1f       	adc	r25, r19
 196:	fc 01       	movw	r30, r24
 198:	80 81       	ld	r24, Z
 19a:	0e 94 9c 00 	call	0x138	; 0x138 <_putch>
    while(st[i])
 19e:	89 81       	ldd	r24, Y+1	; 0x01
 1a0:	88 2f       	mov	r24, r24
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	2a 81       	ldd	r18, Y+2	; 0x02
 1a6:	3b 81       	ldd	r19, Y+3	; 0x03
 1a8:	82 0f       	add	r24, r18
 1aa:	93 1f       	adc	r25, r19
 1ac:	fc 01       	movw	r30, r24
 1ae:	80 81       	ld	r24, Z
 1b0:	88 23       	and	r24, r24
 1b2:	39 f7       	brne	.-50     	; 0x182 <_puts+0x14>
    _putch(32);
 1b4:	80 e2       	ldi	r24, 0x20	; 32
 1b6:	0e 94 9c 00 	call	0x138	; 0x138 <_putch>
}
 1ba:	00 00       	nop
 1bc:	0f 90       	pop	r0
 1be:	0f 90       	pop	r0
 1c0:	0f 90       	pop	r0
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	08 95       	ret

000001c8 <_getch>:
char _getch(void)
{
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	cd b7       	in	r28, 0x3d	; 61
 1ce:	de b7       	in	r29, 0x3e	; 62
    while(!(UCSR0A & (1<<RXC0)));
 1d0:	00 00       	nop
 1d2:	80 ec       	ldi	r24, 0xC0	; 192
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	fc 01       	movw	r30, r24
 1d8:	80 81       	ld	r24, Z
 1da:	88 23       	and	r24, r24
 1dc:	d4 f7       	brge	.-12     	; 0x1d2 <_getch+0xa>
    return UDR0;
 1de:	86 ec       	ldi	r24, 0xC6	; 198
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	fc 01       	movw	r30, r24
 1e4:	80 81       	ld	r24, Z
}
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <_gets>:

void _gets(char* st)
{
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
 1f0:	00 d0       	rcall	.+0      	; 0x1f2 <_gets+0x6>
 1f2:	cd b7       	in	r28, 0x3d	; 61
 1f4:	de b7       	in	r29, 0x3e	; 62
 1f6:	9a 83       	std	Y+2, r25	; 0x02
 1f8:	89 83       	std	Y+1, r24	; 0x01
    do
    {
        *st=_getch();
 1fa:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <_getch>
 1fe:	28 2f       	mov	r18, r24
 200:	89 81       	ldd	r24, Y+1	; 0x01
 202:	9a 81       	ldd	r25, Y+2	; 0x02
 204:	fc 01       	movw	r30, r24
 206:	20 83       	st	Z, r18
    } while (*st++!=10);  // die Funktion WriteLine von C# schickt einen String,
 208:	89 81       	ldd	r24, Y+1	; 0x01
 20a:	9a 81       	ldd	r25, Y+2	; 0x02
 20c:	9c 01       	movw	r18, r24
 20e:	2f 5f       	subi	r18, 0xFF	; 255
 210:	3f 4f       	sbci	r19, 0xFF	; 255
 212:	3a 83       	std	Y+2, r19	; 0x02
 214:	29 83       	std	Y+1, r18	; 0x01
 216:	fc 01       	movw	r30, r24
 218:	80 81       	ld	r24, Z
 21a:	8a 30       	cpi	r24, 0x0A	; 10
 21c:	71 f7       	brne	.-36     	; 0x1fa <_gets+0xe>
    *--st=0;			  // der mit New Line (\n, ASCII: 10) abschlossen ist.
 21e:	89 81       	ldd	r24, Y+1	; 0x01
 220:	9a 81       	ldd	r25, Y+2	; 0x02
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	9a 83       	std	Y+2, r25	; 0x02
 226:	89 83       	std	Y+1, r24	; 0x01
 228:	89 81       	ldd	r24, Y+1	; 0x01
 22a:	9a 81       	ldd	r25, Y+2	; 0x02
 22c:	fc 01       	movw	r30, r24
 22e:	10 82       	st	Z, r1
}
 230:	00 00       	nop
 232:	0f 90       	pop	r0
 234:	0f 90       	pop	r0
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	08 95       	ret

0000023c <_newline>:
void _newline()
{
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	cd b7       	in	r28, 0x3d	; 61
 242:	de b7       	in	r29, 0x3e	; 62
    _putch(13);   // CR
 244:	8d e0       	ldi	r24, 0x0D	; 13
 246:	0e 94 9c 00 	call	0x138	; 0x138 <_putch>
    _putch(10);   // LF
 24a:	8a e0       	ldi	r24, 0x0A	; 10
 24c:	0e 94 9c 00 	call	0x138	; 0x138 <_putch>
}
 250:	00 00       	nop
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	08 95       	ret

00000258 <itoa8>:
void itoa8(uint16_t val,char *stringa)
{
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	00 d0       	rcall	.+0      	; 0x25e <itoa8+0x6>
 25e:	00 d0       	rcall	.+0      	; 0x260 <itoa8+0x8>
 260:	cd b7       	in	r28, 0x3d	; 61
 262:	de b7       	in	r29, 0x3e	; 62
 264:	9a 83       	std	Y+2, r25	; 0x02
 266:	89 83       	std	Y+1, r24	; 0x01
 268:	7c 83       	std	Y+4, r23	; 0x04
 26a:	6b 83       	std	Y+3, r22	; 0x03
    stringa[0]=(val%10000)/1000+48;
 26c:	49 81       	ldd	r20, Y+1	; 0x01
 26e:	5a 81       	ldd	r21, Y+2	; 0x02
 270:	ca 01       	movw	r24, r20
 272:	92 95       	swap	r25
 274:	82 95       	swap	r24
 276:	8f 70       	andi	r24, 0x0F	; 15
 278:	89 27       	eor	r24, r25
 27a:	9f 70       	andi	r25, 0x0F	; 15
 27c:	89 27       	eor	r24, r25
 27e:	9c 01       	movw	r18, r24
 280:	a7 e4       	ldi	r26, 0x47	; 71
 282:	b3 e0       	ldi	r27, 0x03	; 3
 284:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__umulhisi3>
 288:	96 95       	lsr	r25
 28a:	87 95       	ror	r24
 28c:	96 95       	lsr	r25
 28e:	87 95       	ror	r24
 290:	96 95       	lsr	r25
 292:	87 95       	ror	r24
 294:	60 e1       	ldi	r22, 0x10	; 16
 296:	77 e2       	ldi	r23, 0x27	; 39
 298:	86 9f       	mul	r24, r22
 29a:	90 01       	movw	r18, r0
 29c:	87 9f       	mul	r24, r23
 29e:	30 0d       	add	r19, r0
 2a0:	96 9f       	mul	r25, r22
 2a2:	30 0d       	add	r19, r0
 2a4:	11 24       	eor	r1, r1
 2a6:	ca 01       	movw	r24, r20
 2a8:	82 1b       	sub	r24, r18
 2aa:	93 0b       	sbc	r25, r19
 2ac:	96 95       	lsr	r25
 2ae:	87 95       	ror	r24
 2b0:	96 95       	lsr	r25
 2b2:	87 95       	ror	r24
 2b4:	96 95       	lsr	r25
 2b6:	87 95       	ror	r24
 2b8:	9c 01       	movw	r18, r24
 2ba:	a5 ec       	ldi	r26, 0xC5	; 197
 2bc:	b0 e2       	ldi	r27, 0x20	; 32
 2be:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__umulhisi3>
 2c2:	92 95       	swap	r25
 2c4:	82 95       	swap	r24
 2c6:	8f 70       	andi	r24, 0x0F	; 15
 2c8:	89 27       	eor	r24, r25
 2ca:	9f 70       	andi	r25, 0x0F	; 15
 2cc:	89 27       	eor	r24, r25
 2ce:	80 5d       	subi	r24, 0xD0	; 208
 2d0:	28 2f       	mov	r18, r24
 2d2:	8b 81       	ldd	r24, Y+3	; 0x03
 2d4:	9c 81       	ldd	r25, Y+4	; 0x04
 2d6:	fc 01       	movw	r30, r24
 2d8:	20 83       	st	Z, r18
    stringa[1]=(val%1000)/100+48;
 2da:	49 81       	ldd	r20, Y+1	; 0x01
 2dc:	5a 81       	ldd	r21, Y+2	; 0x02
 2de:	ca 01       	movw	r24, r20
 2e0:	96 95       	lsr	r25
 2e2:	87 95       	ror	r24
 2e4:	96 95       	lsr	r25
 2e6:	87 95       	ror	r24
 2e8:	96 95       	lsr	r25
 2ea:	87 95       	ror	r24
 2ec:	9c 01       	movw	r18, r24
 2ee:	a5 ec       	ldi	r26, 0xC5	; 197
 2f0:	b0 e2       	ldi	r27, 0x20	; 32
 2f2:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__umulhisi3>
 2f6:	92 95       	swap	r25
 2f8:	82 95       	swap	r24
 2fa:	8f 70       	andi	r24, 0x0F	; 15
 2fc:	89 27       	eor	r24, r25
 2fe:	9f 70       	andi	r25, 0x0F	; 15
 300:	89 27       	eor	r24, r25
 302:	68 ee       	ldi	r22, 0xE8	; 232
 304:	73 e0       	ldi	r23, 0x03	; 3
 306:	86 9f       	mul	r24, r22
 308:	90 01       	movw	r18, r0
 30a:	87 9f       	mul	r24, r23
 30c:	30 0d       	add	r19, r0
 30e:	96 9f       	mul	r25, r22
 310:	30 0d       	add	r19, r0
 312:	11 24       	eor	r1, r1
 314:	ca 01       	movw	r24, r20
 316:	82 1b       	sub	r24, r18
 318:	93 0b       	sbc	r25, r19
 31a:	96 95       	lsr	r25
 31c:	87 95       	ror	r24
 31e:	96 95       	lsr	r25
 320:	87 95       	ror	r24
 322:	9c 01       	movw	r18, r24
 324:	ab e7       	ldi	r26, 0x7B	; 123
 326:	b4 e1       	ldi	r27, 0x14	; 20
 328:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__umulhisi3>
 32c:	96 95       	lsr	r25
 32e:	87 95       	ror	r24
 330:	20 e3       	ldi	r18, 0x30	; 48
 332:	28 0f       	add	r18, r24
 334:	8b 81       	ldd	r24, Y+3	; 0x03
 336:	9c 81       	ldd	r25, Y+4	; 0x04
 338:	01 96       	adiw	r24, 0x01	; 1
 33a:	fc 01       	movw	r30, r24
 33c:	20 83       	st	Z, r18
    stringa[2]=(val%100)/10+48;
 33e:	49 81       	ldd	r20, Y+1	; 0x01
 340:	5a 81       	ldd	r21, Y+2	; 0x02
 342:	ca 01       	movw	r24, r20
 344:	96 95       	lsr	r25
 346:	87 95       	ror	r24
 348:	96 95       	lsr	r25
 34a:	87 95       	ror	r24
 34c:	9c 01       	movw	r18, r24
 34e:	ab e7       	ldi	r26, 0x7B	; 123
 350:	b4 e1       	ldi	r27, 0x14	; 20
 352:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__umulhisi3>
 356:	96 95       	lsr	r25
 358:	87 95       	ror	r24
 35a:	64 e6       	ldi	r22, 0x64	; 100
 35c:	68 9f       	mul	r22, r24
 35e:	90 01       	movw	r18, r0
 360:	69 9f       	mul	r22, r25
 362:	30 0d       	add	r19, r0
 364:	11 24       	eor	r1, r1
 366:	ca 01       	movw	r24, r20
 368:	82 1b       	sub	r24, r18
 36a:	93 0b       	sbc	r25, r19
 36c:	9c 01       	movw	r18, r24
 36e:	ad ec       	ldi	r26, 0xCD	; 205
 370:	bc ec       	ldi	r27, 0xCC	; 204
 372:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__umulhisi3>
 376:	96 95       	lsr	r25
 378:	87 95       	ror	r24
 37a:	96 95       	lsr	r25
 37c:	87 95       	ror	r24
 37e:	96 95       	lsr	r25
 380:	87 95       	ror	r24
 382:	20 e3       	ldi	r18, 0x30	; 48
 384:	28 0f       	add	r18, r24
 386:	8b 81       	ldd	r24, Y+3	; 0x03
 388:	9c 81       	ldd	r25, Y+4	; 0x04
 38a:	02 96       	adiw	r24, 0x02	; 2
 38c:	fc 01       	movw	r30, r24
 38e:	20 83       	st	Z, r18
    stringa[3]=(val%10)+48;
 390:	49 81       	ldd	r20, Y+1	; 0x01
 392:	5a 81       	ldd	r21, Y+2	; 0x02
 394:	9a 01       	movw	r18, r20
 396:	ad ec       	ldi	r26, 0xCD	; 205
 398:	bc ec       	ldi	r27, 0xCC	; 204
 39a:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__umulhisi3>
 39e:	9c 01       	movw	r18, r24
 3a0:	36 95       	lsr	r19
 3a2:	27 95       	ror	r18
 3a4:	36 95       	lsr	r19
 3a6:	27 95       	ror	r18
 3a8:	36 95       	lsr	r19
 3aa:	27 95       	ror	r18
 3ac:	c9 01       	movw	r24, r18
 3ae:	88 0f       	add	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	82 0f       	add	r24, r18
 3b8:	93 1f       	adc	r25, r19
 3ba:	88 0f       	add	r24, r24
 3bc:	99 1f       	adc	r25, r25
 3be:	9a 01       	movw	r18, r20
 3c0:	28 1b       	sub	r18, r24
 3c2:	39 0b       	sbc	r19, r25
 3c4:	82 2f       	mov	r24, r18
 3c6:	20 e3       	ldi	r18, 0x30	; 48
 3c8:	28 0f       	add	r18, r24
 3ca:	8b 81       	ldd	r24, Y+3	; 0x03
 3cc:	9c 81       	ldd	r25, Y+4	; 0x04
 3ce:	03 96       	adiw	r24, 0x03	; 3
 3d0:	fc 01       	movw	r30, r24
 3d2:	20 83       	st	Z, r18
    stringa[4]=0;
 3d4:	8b 81       	ldd	r24, Y+3	; 0x03
 3d6:	9c 81       	ldd	r25, Y+4	; 0x04
 3d8:	04 96       	adiw	r24, 0x04	; 4
 3da:	fc 01       	movw	r30, r24
 3dc:	10 82       	st	Z, r1
}
 3de:	00 00       	nop
 3e0:	0f 90       	pop	r0
 3e2:	0f 90       	pop	r0
 3e4:	0f 90       	pop	r0
 3e6:	0f 90       	pop	r0
 3e8:	df 91       	pop	r29
 3ea:	cf 91       	pop	r28
 3ec:	08 95       	ret

000003ee <main>:
#include <util/delay.h>

#define TRIG 3
#define ECHO 2
int main(void)
{
 3ee:	cf 93       	push	r28
 3f0:	df 93       	push	r29
 3f2:	cd b7       	in	r28, 0x3d	; 61
 3f4:	de b7       	in	r29, 0x3e	; 62
 3f6:	af 97       	sbiw	r28, 0x2f	; 47
 3f8:	0f b6       	in	r0, 0x3f	; 63
 3fa:	f8 94       	cli
 3fc:	de bf       	out	0x3e, r29	; 62
 3fe:	0f be       	out	0x3f, r0	; 63
 400:	cd bf       	out	0x3d, r28	; 61
    char streckec[10];
    DDRD|=(1<<TRIG);
 402:	8a e2       	ldi	r24, 0x2A	; 42
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	dc 01       	movw	r26, r24
 408:	2c 91       	ld	r18, X
 40a:	8a e2       	ldi	r24, 0x2A	; 42
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	28 60       	ori	r18, 0x08	; 8
 410:	fc 01       	movw	r30, r24
 412:	20 83       	st	Z, r18
    DDRD&=~(1<<ECHO);
 414:	8a e2       	ldi	r24, 0x2A	; 42
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	dc 01       	movw	r26, r24
 41a:	2c 91       	ld	r18, X
 41c:	8a e2       	ldi	r24, 0x2A	; 42
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	2b 7f       	andi	r18, 0xFB	; 251
 422:	fc 01       	movw	r30, r24
 424:	20 83       	st	Z, r18
    uint16_t zeit;
    uint8_t strecke;
    init_usart(9600);
 426:	60 e8       	ldi	r22, 0x80	; 128
 428:	75 e2       	ldi	r23, 0x25	; 37
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	0e 94 40 00 	call	0x80	; 0x80 <init_usart>
    OCR0A=160;
 432:	87 e4       	ldi	r24, 0x47	; 71
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	20 ea       	ldi	r18, 0xA0	; 160
 438:	dc 01       	movw	r26, r24
 43a:	2c 93       	st	X, r18
    while(1)
    {
       PORTD|= (1<<TRIG);
 43c:	8b e2       	ldi	r24, 0x2B	; 43
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	fc 01       	movw	r30, r24
 442:	20 81       	ld	r18, Z
 444:	8b e2       	ldi	r24, 0x2B	; 43
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	28 60       	ori	r18, 0x08	; 8
 44a:	dc 01       	movw	r26, r24
 44c:	2c 93       	st	X, r18
       TCCR0B|=1;
 44e:	85 e4       	ldi	r24, 0x45	; 69
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	fc 01       	movw	r30, r24
 454:	20 81       	ld	r18, Z
 456:	85 e4       	ldi	r24, 0x45	; 69
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	21 60       	ori	r18, 0x01	; 1
 45c:	dc 01       	movw	r26, r24
 45e:	2c 93       	st	X, r18
       while(!(TIFR0&(1<<1)));
 460:	00 00       	nop
 462:	85 e3       	ldi	r24, 0x35	; 53
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	fc 01       	movw	r30, r24
 468:	80 81       	ld	r24, Z
 46a:	88 2f       	mov	r24, r24
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	82 70       	andi	r24, 0x02	; 2
 470:	99 27       	eor	r25, r25
 472:	89 2b       	or	r24, r25
 474:	b1 f3       	breq	.-20     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
       TCCR0B&=~(1);
 476:	85 e4       	ldi	r24, 0x45	; 69
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	dc 01       	movw	r26, r24
 47c:	2c 91       	ld	r18, X
 47e:	85 e4       	ldi	r24, 0x45	; 69
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	2e 7f       	andi	r18, 0xFE	; 254
 484:	fc 01       	movw	r30, r24
 486:	20 83       	st	Z, r18
       TCNT0=0;
 488:	86 e4       	ldi	r24, 0x46	; 70
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	dc 01       	movw	r26, r24
 48e:	1c 92       	st	X, r1
       TIFR0|=(1<<1);
 490:	85 e3       	ldi	r24, 0x35	; 53
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	fc 01       	movw	r30, r24
 496:	20 81       	ld	r18, Z
 498:	85 e3       	ldi	r24, 0x35	; 53
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	22 60       	ori	r18, 0x02	; 2
 49e:	dc 01       	movw	r26, r24
 4a0:	2c 93       	st	X, r18
       PORTD&=~(1<<TRIG);
 4a2:	8b e2       	ldi	r24, 0x2B	; 43
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	fc 01       	movw	r30, r24
 4a8:	20 81       	ld	r18, Z
 4aa:	8b e2       	ldi	r24, 0x2B	; 43
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	27 7f       	andi	r18, 0xF7	; 247
 4b0:	dc 01       	movw	r26, r24
 4b2:	2c 93       	st	X, r18
       while(!(PIND&(1<<ECHO)));
 4b4:	00 00       	nop
 4b6:	89 e2       	ldi	r24, 0x29	; 41
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	fc 01       	movw	r30, r24
 4bc:	80 81       	ld	r24, Z
 4be:	88 2f       	mov	r24, r24
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	84 70       	andi	r24, 0x04	; 4
 4c4:	99 27       	eor	r25, r25
 4c6:	89 2b       	or	r24, r25
 4c8:	b1 f3       	breq	.-20     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
       TCCR1B|=1;
 4ca:	81 e8       	ldi	r24, 0x81	; 129
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	dc 01       	movw	r26, r24
 4d0:	2c 91       	ld	r18, X
 4d2:	81 e8       	ldi	r24, 0x81	; 129
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	21 60       	ori	r18, 0x01	; 1
 4d8:	fc 01       	movw	r30, r24
 4da:	20 83       	st	Z, r18
       while(PIND&(1<<ECHO));
 4dc:	00 00       	nop
 4de:	89 e2       	ldi	r24, 0x29	; 41
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	dc 01       	movw	r26, r24
 4e4:	8c 91       	ld	r24, X
 4e6:	88 2f       	mov	r24, r24
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	84 70       	andi	r24, 0x04	; 4
 4ec:	99 27       	eor	r25, r25
 4ee:	89 2b       	or	r24, r25
 4f0:	b1 f7       	brne	.-20     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
       TCCR1B=0;
 4f2:	81 e8       	ldi	r24, 0x81	; 129
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	fc 01       	movw	r30, r24
 4f8:	10 82       	st	Z, r1
       zeit=TCNT1/16;
 4fa:	84 e8       	ldi	r24, 0x84	; 132
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	dc 01       	movw	r26, r24
 500:	8d 91       	ld	r24, X+
 502:	9c 91       	ld	r25, X
 504:	92 95       	swap	r25
 506:	82 95       	swap	r24
 508:	8f 70       	andi	r24, 0x0F	; 15
 50a:	89 27       	eor	r24, r25
 50c:	9f 70       	andi	r25, 0x0F	; 15
 50e:	89 27       	eor	r24, r25
 510:	9a 83       	std	Y+2, r25	; 0x02
 512:	89 83       	std	Y+1, r24	; 0x01
       TCNT1=0;
 514:	84 e8       	ldi	r24, 0x84	; 132
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	fc 01       	movw	r30, r24
 51a:	11 82       	std	Z+1, r1	; 0x01
 51c:	10 82       	st	Z, r1
       strecke=343*zeit/1000;
 51e:	49 81       	ldd	r20, Y+1	; 0x01
 520:	5a 81       	ldd	r21, Y+2	; 0x02
 522:	27 e5       	ldi	r18, 0x57	; 87
 524:	31 e0       	ldi	r19, 0x01	; 1
 526:	42 9f       	mul	r20, r18
 528:	c0 01       	movw	r24, r0
 52a:	43 9f       	mul	r20, r19
 52c:	90 0d       	add	r25, r0
 52e:	52 9f       	mul	r21, r18
 530:	90 0d       	add	r25, r0
 532:	11 24       	eor	r1, r1
 534:	96 95       	lsr	r25
 536:	87 95       	ror	r24
 538:	96 95       	lsr	r25
 53a:	87 95       	ror	r24
 53c:	96 95       	lsr	r25
 53e:	87 95       	ror	r24
 540:	9c 01       	movw	r18, r24
 542:	a5 ec       	ldi	r26, 0xC5	; 197
 544:	b0 e2       	ldi	r27, 0x20	; 32
 546:	0e 94 6e 03 	call	0x6dc	; 0x6dc <__umulhisi3>
 54a:	92 95       	swap	r25
 54c:	82 95       	swap	r24
 54e:	8f 70       	andi	r24, 0x0F	; 15
 550:	89 27       	eor	r24, r25
 552:	9f 70       	andi	r25, 0x0F	; 15
 554:	89 27       	eor	r24, r25
 556:	8b 83       	std	Y+3, r24	; 0x03
       itoa(strecke,streckec,10);
 558:	8b 81       	ldd	r24, Y+3	; 0x03
 55a:	88 2f       	mov	r24, r24
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	9e 01       	movw	r18, r28
 560:	2e 5e       	subi	r18, 0xEE	; 238
 562:	3f 4f       	sbci	r19, 0xFF	; 255
 564:	4a e0       	ldi	r20, 0x0A	; 10
 566:	50 e0       	ldi	r21, 0x00	; 0
 568:	b9 01       	movw	r22, r18
 56a:	0e 94 98 04 	call	0x930	; 0x930 <itoa>
       _puts(streckec);
 56e:	ce 01       	movw	r24, r28
 570:	42 96       	adiw	r24, 0x12	; 18
 572:	0e 94 b7 00 	call	0x16e	; 0x16e <_puts>
       _newline();
 576:	0e 94 1e 01 	call	0x23c	; 0x23c <_newline>
 57a:	80 e0       	ldi	r24, 0x00	; 0
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	a8 e4       	ldi	r26, 0x48	; 72
 580:	b3 e4       	ldi	r27, 0x43	; 67
 582:	8c 83       	std	Y+4, r24	; 0x04
 584:	9d 83       	std	Y+5, r25	; 0x05
 586:	ae 83       	std	Y+6, r26	; 0x06
 588:	bf 83       	std	Y+7, r27	; 0x07

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 58a:	20 e0       	ldi	r18, 0x00	; 0
 58c:	30 e0       	ldi	r19, 0x00	; 0
 58e:	4a e7       	ldi	r20, 0x7A	; 122
 590:	55 e4       	ldi	r21, 0x45	; 69
 592:	6c 81       	ldd	r22, Y+4	; 0x04
 594:	7d 81       	ldd	r23, Y+5	; 0x05
 596:	8e 81       	ldd	r24, Y+6	; 0x06
 598:	9f 81       	ldd	r25, Y+7	; 0x07
 59a:	0e 94 03 04 	call	0x806	; 0x806 <__mulsf3>
 59e:	68 a3       	std	Y+32, r22	; 0x20
 5a0:	79 a3       	std	Y+33, r23	; 0x21
 5a2:	8a a3       	std	Y+34, r24	; 0x22
 5a4:	9b a3       	std	Y+35, r25	; 0x23
 5a6:	88 a1       	ldd	r24, Y+32	; 0x20
 5a8:	99 a1       	ldd	r25, Y+33	; 0x21
 5aa:	aa a1       	ldd	r26, Y+34	; 0x22
 5ac:	bb a1       	ldd	r27, Y+35	; 0x23
 5ae:	88 87       	std	Y+8, r24	; 0x08
 5b0:	99 87       	std	Y+9, r25	; 0x09
 5b2:	aa 87       	std	Y+10, r26	; 0x0a
 5b4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
 5b6:	20 e0       	ldi	r18, 0x00	; 0
 5b8:	30 e0       	ldi	r19, 0x00	; 0
 5ba:	40 e8       	ldi	r20, 0x80	; 128
 5bc:	5f e3       	ldi	r21, 0x3F	; 63
 5be:	68 85       	ldd	r22, Y+8	; 0x08
 5c0:	79 85       	ldd	r23, Y+9	; 0x09
 5c2:	8a 85       	ldd	r24, Y+10	; 0x0a
 5c4:	9b 85       	ldd	r25, Y+11	; 0x0b
 5c6:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__cmpsf2>
 5ca:	88 23       	and	r24, r24
 5cc:	2c f4       	brge	.+10     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
		__ticks = 1;
 5ce:	81 e0       	ldi	r24, 0x01	; 1
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	9d 87       	std	Y+13, r25	; 0x0d
 5d4:	8c 87       	std	Y+12, r24	; 0x0c
 5d6:	54 c0       	rjmp	.+168    	; 0x680 <__LOCK_REGION_LENGTH__+0x280>
	else if (__tmp > 65535)
 5d8:	20 e0       	ldi	r18, 0x00	; 0
 5da:	3f ef       	ldi	r19, 0xFF	; 255
 5dc:	4f e7       	ldi	r20, 0x7F	; 127
 5de:	57 e4       	ldi	r21, 0x47	; 71
 5e0:	68 85       	ldd	r22, Y+8	; 0x08
 5e2:	79 85       	ldd	r23, Y+9	; 0x09
 5e4:	8a 85       	ldd	r24, Y+10	; 0x0a
 5e6:	9b 85       	ldd	r25, Y+11	; 0x0b
 5e8:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__gesf2>
 5ec:	18 16       	cp	r1, r24
 5ee:	d4 f5       	brge	.+116    	; 0x664 <__LOCK_REGION_LENGTH__+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 5f0:	20 e0       	ldi	r18, 0x00	; 0
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	40 e2       	ldi	r20, 0x20	; 32
 5f6:	51 e4       	ldi	r21, 0x41	; 65
 5f8:	6c 81       	ldd	r22, Y+4	; 0x04
 5fa:	7d 81       	ldd	r23, Y+5	; 0x05
 5fc:	8e 81       	ldd	r24, Y+6	; 0x06
 5fe:	9f 81       	ldd	r25, Y+7	; 0x07
 600:	0e 94 03 04 	call	0x806	; 0x806 <__mulsf3>
 604:	6c a3       	std	Y+36, r22	; 0x24
 606:	7d a3       	std	Y+37, r23	; 0x25
 608:	8e a3       	std	Y+38, r24	; 0x26
 60a:	9f a3       	std	Y+39, r25	; 0x27
 60c:	8c a1       	ldd	r24, Y+36	; 0x24
 60e:	9d a1       	ldd	r25, Y+37	; 0x25
 610:	ae a1       	ldd	r26, Y+38	; 0x26
 612:	bf a1       	ldd	r27, Y+39	; 0x27
 614:	8c 8f       	std	Y+28, r24	; 0x1c
 616:	9d 8f       	std	Y+29, r25	; 0x1d
 618:	ae 8f       	std	Y+30, r26	; 0x1e
 61a:	bf 8f       	std	Y+31, r27	; 0x1f
 61c:	6c 8d       	ldd	r22, Y+28	; 0x1c
 61e:	7d 8d       	ldd	r23, Y+29	; 0x1d
 620:	8e 8d       	ldd	r24, Y+30	; 0x1e
 622:	9f 8d       	ldd	r25, Y+31	; 0x1f
 624:	0e 94 82 03 	call	0x704	; 0x704 <__fixunssfsi>
 628:	68 a7       	std	Y+40, r22	; 0x28
 62a:	79 a7       	std	Y+41, r23	; 0x29
 62c:	8a a7       	std	Y+42, r24	; 0x2a
 62e:	9b a7       	std	Y+43, r25	; 0x2b
 630:	a8 a5       	ldd	r26, Y+40	; 0x28
 632:	b9 a5       	ldd	r27, Y+41	; 0x29
 634:	bd 87       	std	Y+13, r27	; 0x0d
 636:	ac 87       	std	Y+12, r26	; 0x0c
		while(__ticks)
 638:	10 c0       	rjmp	.+32     	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
 63a:	80 e9       	ldi	r24, 0x90	; 144
 63c:	91 e0       	ldi	r25, 0x01	; 1
 63e:	9f 87       	std	Y+15, r25	; 0x0f
 640:	8e 87       	std	Y+14, r24	; 0x0e
		"sbc %B0,__zero_reg__"    "\n\t"
		"brne 1b"
		: "+d" (__count)
	);
#else
	__asm__ volatile (
 642:	8e 85       	ldd	r24, Y+14	; 0x0e
 644:	9f 85       	ldd	r25, Y+15	; 0x0f
 646:	01 97       	sbiw	r24, 0x01	; 1
 648:	f1 f7       	brne	.-4      	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
 64a:	9f 87       	std	Y+15, r25	; 0x0f
 64c:	8e 87       	std	Y+14, r24	; 0x0e
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
#endif /* __AVR_TINY__ */
}
 64e:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 650:	8c 85       	ldd	r24, Y+12	; 0x0c
 652:	9d 85       	ldd	r25, Y+13	; 0x0d
 654:	01 97       	sbiw	r24, 0x01	; 1
 656:	9d 87       	std	Y+13, r25	; 0x0d
 658:	8c 87       	std	Y+12, r24	; 0x0c
		while(__ticks)
 65a:	8c 85       	ldd	r24, Y+12	; 0x0c
 65c:	9d 85       	ldd	r25, Y+13	; 0x0d
 65e:	89 2b       	or	r24, r25
 660:	61 f7       	brne	.-40     	; 0x63a <__LOCK_REGION_LENGTH__+0x23a>
		}
		return;
 662:	19 c0       	rjmp	.+50     	; 0x696 <__LOCK_REGION_LENGTH__+0x296>
	}
	else
		__ticks = (uint16_t)__tmp;
 664:	68 85       	ldd	r22, Y+8	; 0x08
 666:	79 85       	ldd	r23, Y+9	; 0x09
 668:	8a 85       	ldd	r24, Y+10	; 0x0a
 66a:	9b 85       	ldd	r25, Y+11	; 0x0b
 66c:	0e 94 82 03 	call	0x704	; 0x704 <__fixunssfsi>
 670:	6c a7       	std	Y+44, r22	; 0x2c
 672:	7d a7       	std	Y+45, r23	; 0x2d
 674:	8e a7       	std	Y+46, r24	; 0x2e
 676:	9f a7       	std	Y+47, r25	; 0x2f
 678:	ec a5       	ldd	r30, Y+44	; 0x2c
 67a:	fd a5       	ldd	r31, Y+45	; 0x2d
 67c:	fd 87       	std	Y+13, r31	; 0x0d
 67e:	ec 87       	std	Y+12, r30	; 0x0c
 680:	8c 85       	ldd	r24, Y+12	; 0x0c
 682:	9d 85       	ldd	r25, Y+13	; 0x0d
 684:	99 8b       	std	Y+17, r25	; 0x11
 686:	88 8b       	std	Y+16, r24	; 0x10
	__asm__ volatile (
 688:	88 89       	ldd	r24, Y+16	; 0x10
 68a:	99 89       	ldd	r25, Y+17	; 0x11
 68c:	01 97       	sbiw	r24, 0x01	; 1
 68e:	f1 f7       	brne	.-4      	; 0x68c <__LOCK_REGION_LENGTH__+0x28c>
 690:	99 8b       	std	Y+17, r25	; 0x11
 692:	88 8b       	std	Y+16, r24	; 0x10
}
 694:	00 00       	nop
       PORTD|= (1<<TRIG);
 696:	d2 ce       	rjmp	.-604    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>

00000698 <__udivmodsi4>:
 698:	a1 e2       	ldi	r26, 0x21	; 33
 69a:	1a 2e       	mov	r1, r26
 69c:	aa 1b       	sub	r26, r26
 69e:	bb 1b       	sub	r27, r27
 6a0:	fd 01       	movw	r30, r26
 6a2:	0d c0       	rjmp	.+26     	; 0x6be <__udivmodsi4_ep>

000006a4 <__udivmodsi4_loop>:
 6a4:	aa 1f       	adc	r26, r26
 6a6:	bb 1f       	adc	r27, r27
 6a8:	ee 1f       	adc	r30, r30
 6aa:	ff 1f       	adc	r31, r31
 6ac:	a2 17       	cp	r26, r18
 6ae:	b3 07       	cpc	r27, r19
 6b0:	e4 07       	cpc	r30, r20
 6b2:	f5 07       	cpc	r31, r21
 6b4:	20 f0       	brcs	.+8      	; 0x6be <__udivmodsi4_ep>
 6b6:	a2 1b       	sub	r26, r18
 6b8:	b3 0b       	sbc	r27, r19
 6ba:	e4 0b       	sbc	r30, r20
 6bc:	f5 0b       	sbc	r31, r21

000006be <__udivmodsi4_ep>:
 6be:	66 1f       	adc	r22, r22
 6c0:	77 1f       	adc	r23, r23
 6c2:	88 1f       	adc	r24, r24
 6c4:	99 1f       	adc	r25, r25
 6c6:	1a 94       	dec	r1
 6c8:	69 f7       	brne	.-38     	; 0x6a4 <__udivmodsi4_loop>
 6ca:	60 95       	com	r22
 6cc:	70 95       	com	r23
 6ce:	80 95       	com	r24
 6d0:	90 95       	com	r25
 6d2:	9b 01       	movw	r18, r22
 6d4:	ac 01       	movw	r20, r24
 6d6:	bd 01       	movw	r22, r26
 6d8:	cf 01       	movw	r24, r30
 6da:	08 95       	ret

000006dc <__umulhisi3>:
 6dc:	a2 9f       	mul	r26, r18
 6de:	b0 01       	movw	r22, r0
 6e0:	b3 9f       	mul	r27, r19
 6e2:	c0 01       	movw	r24, r0
 6e4:	a3 9f       	mul	r26, r19
 6e6:	70 0d       	add	r23, r0
 6e8:	81 1d       	adc	r24, r1
 6ea:	11 24       	eor	r1, r1
 6ec:	91 1d       	adc	r25, r1
 6ee:	b2 9f       	mul	r27, r18
 6f0:	70 0d       	add	r23, r0
 6f2:	81 1d       	adc	r24, r1
 6f4:	11 24       	eor	r1, r1
 6f6:	91 1d       	adc	r25, r1
 6f8:	08 95       	ret

000006fa <__cmpsf2>:
 6fa:	0e 94 b1 03 	call	0x762	; 0x762 <__fp_cmp>
 6fe:	08 f4       	brcc	.+2      	; 0x702 <__cmpsf2+0x8>
 700:	81 e0       	ldi	r24, 0x01	; 1
 702:	08 95       	ret

00000704 <__fixunssfsi>:
 704:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__fp_splitA>
 708:	88 f0       	brcs	.+34     	; 0x72c <__fixunssfsi+0x28>
 70a:	9f 57       	subi	r25, 0x7F	; 127
 70c:	98 f0       	brcs	.+38     	; 0x734 <__fixunssfsi+0x30>
 70e:	b9 2f       	mov	r27, r25
 710:	99 27       	eor	r25, r25
 712:	b7 51       	subi	r27, 0x17	; 23
 714:	b0 f0       	brcs	.+44     	; 0x742 <__fixunssfsi+0x3e>
 716:	e1 f0       	breq	.+56     	; 0x750 <__fixunssfsi+0x4c>
 718:	66 0f       	add	r22, r22
 71a:	77 1f       	adc	r23, r23
 71c:	88 1f       	adc	r24, r24
 71e:	99 1f       	adc	r25, r25
 720:	1a f0       	brmi	.+6      	; 0x728 <__fixunssfsi+0x24>
 722:	ba 95       	dec	r27
 724:	c9 f7       	brne	.-14     	; 0x718 <__fixunssfsi+0x14>
 726:	14 c0       	rjmp	.+40     	; 0x750 <__fixunssfsi+0x4c>
 728:	b1 30       	cpi	r27, 0x01	; 1
 72a:	91 f0       	breq	.+36     	; 0x750 <__fixunssfsi+0x4c>
 72c:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__fp_zero>
 730:	b1 e0       	ldi	r27, 0x01	; 1
 732:	08 95       	ret
 734:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <__fp_zero>
 738:	67 2f       	mov	r22, r23
 73a:	78 2f       	mov	r23, r24
 73c:	88 27       	eor	r24, r24
 73e:	b8 5f       	subi	r27, 0xF8	; 248
 740:	39 f0       	breq	.+14     	; 0x750 <__fixunssfsi+0x4c>
 742:	b9 3f       	cpi	r27, 0xF9	; 249
 744:	cc f3       	brlt	.-14     	; 0x738 <__fixunssfsi+0x34>
 746:	86 95       	lsr	r24
 748:	77 95       	ror	r23
 74a:	67 95       	ror	r22
 74c:	b3 95       	inc	r27
 74e:	d9 f7       	brne	.-10     	; 0x746 <__fixunssfsi+0x42>
 750:	3e f4       	brtc	.+14     	; 0x760 <__fixunssfsi+0x5c>
 752:	90 95       	com	r25
 754:	80 95       	com	r24
 756:	70 95       	com	r23
 758:	61 95       	neg	r22
 75a:	7f 4f       	sbci	r23, 0xFF	; 255
 75c:	8f 4f       	sbci	r24, 0xFF	; 255
 75e:	9f 4f       	sbci	r25, 0xFF	; 255
 760:	08 95       	ret

00000762 <__fp_cmp>:
 762:	99 0f       	add	r25, r25
 764:	00 08       	sbc	r0, r0
 766:	55 0f       	add	r21, r21
 768:	aa 0b       	sbc	r26, r26
 76a:	e0 e8       	ldi	r30, 0x80	; 128
 76c:	fe ef       	ldi	r31, 0xFE	; 254
 76e:	16 16       	cp	r1, r22
 770:	17 06       	cpc	r1, r23
 772:	e8 07       	cpc	r30, r24
 774:	f9 07       	cpc	r31, r25
 776:	c0 f0       	brcs	.+48     	; 0x7a8 <__fp_cmp+0x46>
 778:	12 16       	cp	r1, r18
 77a:	13 06       	cpc	r1, r19
 77c:	e4 07       	cpc	r30, r20
 77e:	f5 07       	cpc	r31, r21
 780:	98 f0       	brcs	.+38     	; 0x7a8 <__fp_cmp+0x46>
 782:	62 1b       	sub	r22, r18
 784:	73 0b       	sbc	r23, r19
 786:	84 0b       	sbc	r24, r20
 788:	95 0b       	sbc	r25, r21
 78a:	39 f4       	brne	.+14     	; 0x79a <__fp_cmp+0x38>
 78c:	0a 26       	eor	r0, r26
 78e:	61 f0       	breq	.+24     	; 0x7a8 <__fp_cmp+0x46>
 790:	23 2b       	or	r18, r19
 792:	24 2b       	or	r18, r20
 794:	25 2b       	or	r18, r21
 796:	21 f4       	brne	.+8      	; 0x7a0 <__fp_cmp+0x3e>
 798:	08 95       	ret
 79a:	0a 26       	eor	r0, r26
 79c:	09 f4       	brne	.+2      	; 0x7a0 <__fp_cmp+0x3e>
 79e:	a1 40       	sbci	r26, 0x01	; 1
 7a0:	a6 95       	lsr	r26
 7a2:	8f ef       	ldi	r24, 0xFF	; 255
 7a4:	81 1d       	adc	r24, r1
 7a6:	81 1d       	adc	r24, r1
 7a8:	08 95       	ret

000007aa <__fp_split3>:
 7aa:	57 fd       	sbrc	r21, 7
 7ac:	90 58       	subi	r25, 0x80	; 128
 7ae:	44 0f       	add	r20, r20
 7b0:	55 1f       	adc	r21, r21
 7b2:	59 f0       	breq	.+22     	; 0x7ca <__fp_splitA+0x10>
 7b4:	5f 3f       	cpi	r21, 0xFF	; 255
 7b6:	71 f0       	breq	.+28     	; 0x7d4 <__fp_splitA+0x1a>
 7b8:	47 95       	ror	r20

000007ba <__fp_splitA>:
 7ba:	88 0f       	add	r24, r24
 7bc:	97 fb       	bst	r25, 7
 7be:	99 1f       	adc	r25, r25
 7c0:	61 f0       	breq	.+24     	; 0x7da <__fp_splitA+0x20>
 7c2:	9f 3f       	cpi	r25, 0xFF	; 255
 7c4:	79 f0       	breq	.+30     	; 0x7e4 <__fp_splitA+0x2a>
 7c6:	87 95       	ror	r24
 7c8:	08 95       	ret
 7ca:	12 16       	cp	r1, r18
 7cc:	13 06       	cpc	r1, r19
 7ce:	14 06       	cpc	r1, r20
 7d0:	55 1f       	adc	r21, r21
 7d2:	f2 cf       	rjmp	.-28     	; 0x7b8 <__fp_split3+0xe>
 7d4:	46 95       	lsr	r20
 7d6:	f1 df       	rcall	.-30     	; 0x7ba <__fp_splitA>
 7d8:	08 c0       	rjmp	.+16     	; 0x7ea <__fp_splitA+0x30>
 7da:	16 16       	cp	r1, r22
 7dc:	17 06       	cpc	r1, r23
 7de:	18 06       	cpc	r1, r24
 7e0:	99 1f       	adc	r25, r25
 7e2:	f1 cf       	rjmp	.-30     	; 0x7c6 <__fp_splitA+0xc>
 7e4:	86 95       	lsr	r24
 7e6:	71 05       	cpc	r23, r1
 7e8:	61 05       	cpc	r22, r1
 7ea:	08 94       	sec
 7ec:	08 95       	ret

000007ee <__fp_zero>:
 7ee:	e8 94       	clt

000007f0 <__fp_szero>:
 7f0:	bb 27       	eor	r27, r27
 7f2:	66 27       	eor	r22, r22
 7f4:	77 27       	eor	r23, r23
 7f6:	cb 01       	movw	r24, r22
 7f8:	97 f9       	bld	r25, 7
 7fa:	08 95       	ret

000007fc <__gesf2>:
 7fc:	0e 94 b1 03 	call	0x762	; 0x762 <__fp_cmp>
 800:	08 f4       	brcc	.+2      	; 0x804 <__gesf2+0x8>
 802:	8f ef       	ldi	r24, 0xFF	; 255
 804:	08 95       	ret

00000806 <__mulsf3>:
 806:	0e 94 16 04 	call	0x82c	; 0x82c <__mulsf3x>
 80a:	0c 94 87 04 	jmp	0x90e	; 0x90e <__fp_round>
 80e:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__fp_pscA>
 812:	38 f0       	brcs	.+14     	; 0x822 <__mulsf3+0x1c>
 814:	0e 94 80 04 	call	0x900	; 0x900 <__fp_pscB>
 818:	20 f0       	brcs	.+8      	; 0x822 <__mulsf3+0x1c>
 81a:	95 23       	and	r25, r21
 81c:	11 f0       	breq	.+4      	; 0x822 <__mulsf3+0x1c>
 81e:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__fp_inf>
 822:	0c 94 76 04 	jmp	0x8ec	; 0x8ec <__fp_nan>
 826:	11 24       	eor	r1, r1
 828:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <__fp_szero>

0000082c <__mulsf3x>:
 82c:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__fp_split3>
 830:	70 f3       	brcs	.-36     	; 0x80e <__mulsf3+0x8>

00000832 <__mulsf3_pse>:
 832:	95 9f       	mul	r25, r21
 834:	c1 f3       	breq	.-16     	; 0x826 <__mulsf3+0x20>
 836:	95 0f       	add	r25, r21
 838:	50 e0       	ldi	r21, 0x00	; 0
 83a:	55 1f       	adc	r21, r21
 83c:	62 9f       	mul	r22, r18
 83e:	f0 01       	movw	r30, r0
 840:	72 9f       	mul	r23, r18
 842:	bb 27       	eor	r27, r27
 844:	f0 0d       	add	r31, r0
 846:	b1 1d       	adc	r27, r1
 848:	63 9f       	mul	r22, r19
 84a:	aa 27       	eor	r26, r26
 84c:	f0 0d       	add	r31, r0
 84e:	b1 1d       	adc	r27, r1
 850:	aa 1f       	adc	r26, r26
 852:	64 9f       	mul	r22, r20
 854:	66 27       	eor	r22, r22
 856:	b0 0d       	add	r27, r0
 858:	a1 1d       	adc	r26, r1
 85a:	66 1f       	adc	r22, r22
 85c:	82 9f       	mul	r24, r18
 85e:	22 27       	eor	r18, r18
 860:	b0 0d       	add	r27, r0
 862:	a1 1d       	adc	r26, r1
 864:	62 1f       	adc	r22, r18
 866:	73 9f       	mul	r23, r19
 868:	b0 0d       	add	r27, r0
 86a:	a1 1d       	adc	r26, r1
 86c:	62 1f       	adc	r22, r18
 86e:	83 9f       	mul	r24, r19
 870:	a0 0d       	add	r26, r0
 872:	61 1d       	adc	r22, r1
 874:	22 1f       	adc	r18, r18
 876:	74 9f       	mul	r23, r20
 878:	33 27       	eor	r19, r19
 87a:	a0 0d       	add	r26, r0
 87c:	61 1d       	adc	r22, r1
 87e:	23 1f       	adc	r18, r19
 880:	84 9f       	mul	r24, r20
 882:	60 0d       	add	r22, r0
 884:	21 1d       	adc	r18, r1
 886:	82 2f       	mov	r24, r18
 888:	76 2f       	mov	r23, r22
 88a:	6a 2f       	mov	r22, r26
 88c:	11 24       	eor	r1, r1
 88e:	9f 57       	subi	r25, 0x7F	; 127
 890:	50 40       	sbci	r21, 0x00	; 0
 892:	9a f0       	brmi	.+38     	; 0x8ba <__mulsf3_pse+0x88>
 894:	f1 f0       	breq	.+60     	; 0x8d2 <__mulsf3_pse+0xa0>
 896:	88 23       	and	r24, r24
 898:	4a f0       	brmi	.+18     	; 0x8ac <__mulsf3_pse+0x7a>
 89a:	ee 0f       	add	r30, r30
 89c:	ff 1f       	adc	r31, r31
 89e:	bb 1f       	adc	r27, r27
 8a0:	66 1f       	adc	r22, r22
 8a2:	77 1f       	adc	r23, r23
 8a4:	88 1f       	adc	r24, r24
 8a6:	91 50       	subi	r25, 0x01	; 1
 8a8:	50 40       	sbci	r21, 0x00	; 0
 8aa:	a9 f7       	brne	.-22     	; 0x896 <__mulsf3_pse+0x64>
 8ac:	9e 3f       	cpi	r25, 0xFE	; 254
 8ae:	51 05       	cpc	r21, r1
 8b0:	80 f0       	brcs	.+32     	; 0x8d2 <__mulsf3_pse+0xa0>
 8b2:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__fp_inf>
 8b6:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <__fp_szero>
 8ba:	5f 3f       	cpi	r21, 0xFF	; 255
 8bc:	e4 f3       	brlt	.-8      	; 0x8b6 <__mulsf3_pse+0x84>
 8be:	98 3e       	cpi	r25, 0xE8	; 232
 8c0:	d4 f3       	brlt	.-12     	; 0x8b6 <__mulsf3_pse+0x84>
 8c2:	86 95       	lsr	r24
 8c4:	77 95       	ror	r23
 8c6:	67 95       	ror	r22
 8c8:	b7 95       	ror	r27
 8ca:	f7 95       	ror	r31
 8cc:	e7 95       	ror	r30
 8ce:	9f 5f       	subi	r25, 0xFF	; 255
 8d0:	c1 f7       	brne	.-16     	; 0x8c2 <__mulsf3_pse+0x90>
 8d2:	fe 2b       	or	r31, r30
 8d4:	88 0f       	add	r24, r24
 8d6:	91 1d       	adc	r25, r1
 8d8:	96 95       	lsr	r25
 8da:	87 95       	ror	r24
 8dc:	97 f9       	bld	r25, 7
 8de:	08 95       	ret

000008e0 <__fp_inf>:
 8e0:	97 f9       	bld	r25, 7
 8e2:	9f 67       	ori	r25, 0x7F	; 127
 8e4:	80 e8       	ldi	r24, 0x80	; 128
 8e6:	70 e0       	ldi	r23, 0x00	; 0
 8e8:	60 e0       	ldi	r22, 0x00	; 0
 8ea:	08 95       	ret

000008ec <__fp_nan>:
 8ec:	9f ef       	ldi	r25, 0xFF	; 255
 8ee:	80 ec       	ldi	r24, 0xC0	; 192
 8f0:	08 95       	ret

000008f2 <__fp_pscA>:
 8f2:	00 24       	eor	r0, r0
 8f4:	0a 94       	dec	r0
 8f6:	16 16       	cp	r1, r22
 8f8:	17 06       	cpc	r1, r23
 8fa:	18 06       	cpc	r1, r24
 8fc:	09 06       	cpc	r0, r25
 8fe:	08 95       	ret

00000900 <__fp_pscB>:
 900:	00 24       	eor	r0, r0
 902:	0a 94       	dec	r0
 904:	12 16       	cp	r1, r18
 906:	13 06       	cpc	r1, r19
 908:	14 06       	cpc	r1, r20
 90a:	05 06       	cpc	r0, r21
 90c:	08 95       	ret

0000090e <__fp_round>:
 90e:	09 2e       	mov	r0, r25
 910:	03 94       	inc	r0
 912:	00 0c       	add	r0, r0
 914:	11 f4       	brne	.+4      	; 0x91a <__fp_round+0xc>
 916:	88 23       	and	r24, r24
 918:	52 f0       	brmi	.+20     	; 0x92e <__fp_round+0x20>
 91a:	bb 0f       	add	r27, r27
 91c:	40 f4       	brcc	.+16     	; 0x92e <__fp_round+0x20>
 91e:	bf 2b       	or	r27, r31
 920:	11 f4       	brne	.+4      	; 0x926 <__fp_round+0x18>
 922:	60 ff       	sbrs	r22, 0
 924:	04 c0       	rjmp	.+8      	; 0x92e <__fp_round+0x20>
 926:	6f 5f       	subi	r22, 0xFF	; 255
 928:	7f 4f       	sbci	r23, 0xFF	; 255
 92a:	8f 4f       	sbci	r24, 0xFF	; 255
 92c:	9f 4f       	sbci	r25, 0xFF	; 255
 92e:	08 95       	ret

00000930 <itoa>:
 930:	45 32       	cpi	r20, 0x25	; 37
 932:	51 05       	cpc	r21, r1
 934:	20 f4       	brcc	.+8      	; 0x93e <itoa+0xe>
 936:	42 30       	cpi	r20, 0x02	; 2
 938:	10 f0       	brcs	.+4      	; 0x93e <itoa+0xe>
 93a:	0c 94 a3 04 	jmp	0x946	; 0x946 <__itoa_ncheck>
 93e:	fb 01       	movw	r30, r22
 940:	10 82       	st	Z, r1
 942:	cb 01       	movw	r24, r22
 944:	08 95       	ret

00000946 <__itoa_ncheck>:
 946:	bb 27       	eor	r27, r27
 948:	4a 30       	cpi	r20, 0x0A	; 10
 94a:	31 f4       	brne	.+12     	; 0x958 <__itoa_ncheck+0x12>
 94c:	99 23       	and	r25, r25
 94e:	22 f4       	brpl	.+8      	; 0x958 <__itoa_ncheck+0x12>
 950:	bd e2       	ldi	r27, 0x2D	; 45
 952:	90 95       	com	r25
 954:	81 95       	neg	r24
 956:	9f 4f       	sbci	r25, 0xFF	; 255
 958:	0c 94 af 04 	jmp	0x95e	; 0x95e <__utoa_common>

0000095c <__utoa_ncheck>:
 95c:	bb 27       	eor	r27, r27

0000095e <__utoa_common>:
 95e:	fb 01       	movw	r30, r22
 960:	55 27       	eor	r21, r21
 962:	aa 27       	eor	r26, r26
 964:	88 0f       	add	r24, r24
 966:	99 1f       	adc	r25, r25
 968:	aa 1f       	adc	r26, r26
 96a:	a4 17       	cp	r26, r20
 96c:	10 f0       	brcs	.+4      	; 0x972 <__utoa_common+0x14>
 96e:	a4 1b       	sub	r26, r20
 970:	83 95       	inc	r24
 972:	50 51       	subi	r21, 0x10	; 16
 974:	b9 f7       	brne	.-18     	; 0x964 <__utoa_common+0x6>
 976:	a0 5d       	subi	r26, 0xD0	; 208
 978:	aa 33       	cpi	r26, 0x3A	; 58
 97a:	08 f0       	brcs	.+2      	; 0x97e <__utoa_common+0x20>
 97c:	a9 5d       	subi	r26, 0xD9	; 217
 97e:	a1 93       	st	Z+, r26
 980:	00 97       	sbiw	r24, 0x00	; 0
 982:	79 f7       	brne	.-34     	; 0x962 <__utoa_common+0x4>
 984:	b1 11       	cpse	r27, r1
 986:	b1 93       	st	Z+, r27
 988:	11 92       	st	Z+, r1
 98a:	cb 01       	movw	r24, r22
 98c:	0c 94 c8 04 	jmp	0x990	; 0x990 <strrev>

00000990 <strrev>:
 990:	dc 01       	movw	r26, r24
 992:	fc 01       	movw	r30, r24
 994:	67 2f       	mov	r22, r23
 996:	71 91       	ld	r23, Z+
 998:	77 23       	and	r23, r23
 99a:	e1 f7       	brne	.-8      	; 0x994 <strrev+0x4>
 99c:	32 97       	sbiw	r30, 0x02	; 2
 99e:	04 c0       	rjmp	.+8      	; 0x9a8 <strrev+0x18>
 9a0:	7c 91       	ld	r23, X
 9a2:	6d 93       	st	X+, r22
 9a4:	70 83       	st	Z, r23
 9a6:	62 91       	ld	r22, -Z
 9a8:	ae 17       	cp	r26, r30
 9aa:	bf 07       	cpc	r27, r31
 9ac:	c8 f3       	brcs	.-14     	; 0x9a0 <strrev+0x10>
 9ae:	08 95       	ret

000009b0 <_exit>:
 9b0:	f8 94       	cli

000009b2 <__stop_program>:
 9b2:	ff cf       	rjmp	.-2      	; 0x9b2 <__stop_program>
