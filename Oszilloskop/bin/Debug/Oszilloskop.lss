
bin\Debug\Oszilloskop.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000648  000006fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000648  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  000006fc  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  000006fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000012  00000000  00000000  000006ff  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000714  2**2
                  CONTENTS, READONLY, OCTETS
  6 .debug_aranges 000000c0  00000000  00000000  00000758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_pubnames 0000001d  00000000  00000000  00000818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_info   00000981  00000000  00000000  00000835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 000007c8  00000000  00000000  000011b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_line   000007e8  00000000  00000000  0000197e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_frame  000001a8  00000000  00000000  00002168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_str    000003e2  00000000  00000000  00002310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 42 02 	jmp	0x484	; 0x484 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 30       	cpi	r26, 0x05	; 5
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 95 02 	call	0x52a	; 0x52a <main>
  88:	0c 94 22 03 	jmp	0x644	; 0x644 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <init_usart>:
#ifndef UART_H_INCLUDED
#define UART_H_INCLUDED
#include <avr/io.h>

void init_usart(uint32_t baud)
{
  90:	0f 93       	push	r16
  92:	1f 93       	push	r17
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
  9c:	28 97       	sbiw	r28, 0x08	; 8
  9e:	0f b6       	in	r0, 0x3f	; 63
  a0:	f8 94       	cli
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	0f be       	out	0x3f, r0	; 63
  a6:	cd bf       	out	0x3d, r28	; 61
  a8:	69 83       	std	Y+1, r22	; 0x01
  aa:	7a 83       	std	Y+2, r23	; 0x02
  ac:	8b 83       	std	Y+3, r24	; 0x03
  ae:	9c 83       	std	Y+4, r25	; 0x04
    UBRR0L = (16000000ul/(16ul*baud))-1;
  b0:	89 81       	ldd	r24, Y+1	; 0x01
  b2:	9a 81       	ldd	r25, Y+2	; 0x02
  b4:	ab 81       	ldd	r26, Y+3	; 0x03
  b6:	bc 81       	ldd	r27, Y+4	; 0x04
  b8:	88 0f       	add	r24, r24
  ba:	99 1f       	adc	r25, r25
  bc:	aa 1f       	adc	r26, r26
  be:	bb 1f       	adc	r27, r27
  c0:	88 0f       	add	r24, r24
  c2:	99 1f       	adc	r25, r25
  c4:	aa 1f       	adc	r26, r26
  c6:	bb 1f       	adc	r27, r27
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	aa 1f       	adc	r26, r26
  ce:	bb 1f       	adc	r27, r27
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	aa 1f       	adc	r26, r26
  d6:	bb 1f       	adc	r27, r27
  d8:	8c 01       	movw	r16, r24
  da:	9d 01       	movw	r18, r26
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	94 e2       	ldi	r25, 0x24	; 36
  e0:	a4 ef       	ldi	r26, 0xF4	; 244
  e2:	b0 e0       	ldi	r27, 0x00	; 0
  e4:	8d 83       	std	Y+5, r24	; 0x05
  e6:	9e 83       	std	Y+6, r25	; 0x06
  e8:	af 83       	std	Y+7, r26	; 0x07
  ea:	b8 87       	std	Y+8, r27	; 0x08
  ec:	6d 81       	ldd	r22, Y+5	; 0x05
  ee:	7e 81       	ldd	r23, Y+6	; 0x06
  f0:	8f 81       	ldd	r24, Y+7	; 0x07
  f2:	98 85       	ldd	r25, Y+8	; 0x08
  f4:	a9 01       	movw	r20, r18
  f6:	98 01       	movw	r18, r16
  f8:	0e 94 e6 02 	call	0x5cc	; 0x5cc <__udivmodsi4>
  fc:	da 01       	movw	r26, r20
  fe:	c9 01       	movw	r24, r18
 100:	28 2f       	mov	r18, r24
 102:	84 ec       	ldi	r24, 0xC4	; 196
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	21 50       	subi	r18, 0x01	; 1
 108:	dc 01       	movw	r26, r24
 10a:	2c 93       	st	X, r18
    UBRR0H = 0;
 10c:	85 ec       	ldi	r24, 0xC5	; 197
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	fc 01       	movw	r30, r24
 112:	10 82       	st	Z, r1
    UCSR0B |= (1<<TXEN0) | (1<<RXEN0)|(1<<RXCIE0);           // Sender und Empfänger aktivieren
 114:	81 ec       	ldi	r24, 0xC1	; 193
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	dc 01       	movw	r26, r24
 11a:	2c 91       	ld	r18, X
 11c:	81 ec       	ldi	r24, 0xC1	; 193
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	28 69       	ori	r18, 0x98	; 152
 122:	fc 01       	movw	r30, r24
 124:	20 83       	st	Z, r18
    UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);         // 8-Bit Übertragung
 126:	82 ec       	ldi	r24, 0xC2	; 194
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	26 e0       	ldi	r18, 0x06	; 6
 12c:	dc 01       	movw	r26, r24
 12e:	2c 93       	st	X, r18
 // Asynchrone Übertragung (UMSEL00=0 und UMSEL01=0)
}
 130:	00 00       	nop
 132:	28 96       	adiw	r28, 0x08	; 8
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	f8 94       	cli
 138:	de bf       	out	0x3e, r29	; 62
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	cd bf       	out	0x3d, r28	; 61
 13e:	df 91       	pop	r29
 140:	cf 91       	pop	r28
 142:	1f 91       	pop	r17
 144:	0f 91       	pop	r16
 146:	08 95       	ret

00000148 <_putch>:
void _putch(char ch)
{
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	0f 92       	push	r0
 14e:	cd b7       	in	r28, 0x3d	; 61
 150:	de b7       	in	r29, 0x3e	; 62
 152:	89 83       	std	Y+1, r24	; 0x01
    while(!(UCSR0A & (1<<UDRE0)));
 154:	00 00       	nop
 156:	80 ec       	ldi	r24, 0xC0	; 192
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	fc 01       	movw	r30, r24
 15c:	80 81       	ld	r24, Z
 15e:	88 2f       	mov	r24, r24
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	80 72       	andi	r24, 0x20	; 32
 164:	99 27       	eor	r25, r25
 166:	89 2b       	or	r24, r25
 168:	b1 f3       	breq	.-20     	; 0x156 <_putch+0xe>
    UDR0 = ch;
 16a:	86 ec       	ldi	r24, 0xC6	; 198
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	29 81       	ldd	r18, Y+1	; 0x01
 170:	fc 01       	movw	r30, r24
 172:	20 83       	st	Z, r18
}
 174:	00 00       	nop
 176:	0f 90       	pop	r0
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <_puts>:
void _puts(char st[])
{
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
 182:	00 d0       	rcall	.+0      	; 0x184 <_puts+0x6>
 184:	0f 92       	push	r0
 186:	cd b7       	in	r28, 0x3d	; 61
 188:	de b7       	in	r29, 0x3e	; 62
 18a:	9b 83       	std	Y+3, r25	; 0x03
 18c:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t i=0;
 18e:	19 82       	std	Y+1, r1	; 0x01
    while(st[i])
 190:	0e c0       	rjmp	.+28     	; 0x1ae <_puts+0x30>
        _putch(st[i++]);
 192:	89 81       	ldd	r24, Y+1	; 0x01
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	98 0f       	add	r25, r24
 198:	99 83       	std	Y+1, r25	; 0x01
 19a:	88 2f       	mov	r24, r24
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	2a 81       	ldd	r18, Y+2	; 0x02
 1a0:	3b 81       	ldd	r19, Y+3	; 0x03
 1a2:	82 0f       	add	r24, r18
 1a4:	93 1f       	adc	r25, r19
 1a6:	fc 01       	movw	r30, r24
 1a8:	80 81       	ld	r24, Z
 1aa:	0e 94 a4 00 	call	0x148	; 0x148 <_putch>
    while(st[i])
 1ae:	89 81       	ldd	r24, Y+1	; 0x01
 1b0:	88 2f       	mov	r24, r24
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	2a 81       	ldd	r18, Y+2	; 0x02
 1b6:	3b 81       	ldd	r19, Y+3	; 0x03
 1b8:	82 0f       	add	r24, r18
 1ba:	93 1f       	adc	r25, r19
 1bc:	fc 01       	movw	r30, r24
 1be:	80 81       	ld	r24, Z
 1c0:	88 23       	and	r24, r24
 1c2:	39 f7       	brne	.-50     	; 0x192 <_puts+0x14>
    _putch(32);
 1c4:	80 e2       	ldi	r24, 0x20	; 32
 1c6:	0e 94 a4 00 	call	0x148	; 0x148 <_putch>
}
 1ca:	00 00       	nop
 1cc:	0f 90       	pop	r0
 1ce:	0f 90       	pop	r0
 1d0:	0f 90       	pop	r0
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	08 95       	ret

000001d8 <_getch>:
char _getch(void)
{
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	cd b7       	in	r28, 0x3d	; 61
 1de:	de b7       	in	r29, 0x3e	; 62
    while(!(UCSR0A & (1<<RXC0)));
 1e0:	00 00       	nop
 1e2:	80 ec       	ldi	r24, 0xC0	; 192
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	fc 01       	movw	r30, r24
 1e8:	80 81       	ld	r24, Z
 1ea:	88 23       	and	r24, r24
 1ec:	d4 f7       	brge	.-12     	; 0x1e2 <_getch+0xa>
    return UDR0;
 1ee:	86 ec       	ldi	r24, 0xC6	; 198
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	fc 01       	movw	r30, r24
 1f4:	80 81       	ld	r24, Z
}
 1f6:	df 91       	pop	r29
 1f8:	cf 91       	pop	r28
 1fa:	08 95       	ret

000001fc <_gets>:

void _gets(char* st)
{
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	00 d0       	rcall	.+0      	; 0x202 <_gets+0x6>
 202:	cd b7       	in	r28, 0x3d	; 61
 204:	de b7       	in	r29, 0x3e	; 62
 206:	9a 83       	std	Y+2, r25	; 0x02
 208:	89 83       	std	Y+1, r24	; 0x01
    do
    {
        *st=_getch();
 20a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <_getch>
 20e:	28 2f       	mov	r18, r24
 210:	89 81       	ldd	r24, Y+1	; 0x01
 212:	9a 81       	ldd	r25, Y+2	; 0x02
 214:	fc 01       	movw	r30, r24
 216:	20 83       	st	Z, r18
    } while (*st++!=10);  // die Funktion WriteLine von C# schickt einen String,
 218:	89 81       	ldd	r24, Y+1	; 0x01
 21a:	9a 81       	ldd	r25, Y+2	; 0x02
 21c:	9c 01       	movw	r18, r24
 21e:	2f 5f       	subi	r18, 0xFF	; 255
 220:	3f 4f       	sbci	r19, 0xFF	; 255
 222:	3a 83       	std	Y+2, r19	; 0x02
 224:	29 83       	std	Y+1, r18	; 0x01
 226:	fc 01       	movw	r30, r24
 228:	80 81       	ld	r24, Z
 22a:	8a 30       	cpi	r24, 0x0A	; 10
 22c:	71 f7       	brne	.-36     	; 0x20a <_gets+0xe>
    *--st=0;			  // der mit New Line (\n, ASCII: 10) abschlossen ist.
 22e:	89 81       	ldd	r24, Y+1	; 0x01
 230:	9a 81       	ldd	r25, Y+2	; 0x02
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	9a 83       	std	Y+2, r25	; 0x02
 236:	89 83       	std	Y+1, r24	; 0x01
 238:	89 81       	ldd	r24, Y+1	; 0x01
 23a:	9a 81       	ldd	r25, Y+2	; 0x02
 23c:	fc 01       	movw	r30, r24
 23e:	10 82       	st	Z, r1
}
 240:	00 00       	nop
 242:	0f 90       	pop	r0
 244:	0f 90       	pop	r0
 246:	df 91       	pop	r29
 248:	cf 91       	pop	r28
 24a:	08 95       	ret

0000024c <_newline>:
void _newline()
{
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	cd b7       	in	r28, 0x3d	; 61
 252:	de b7       	in	r29, 0x3e	; 62
    _putch(13);   // CR
 254:	8d e0       	ldi	r24, 0x0D	; 13
 256:	0e 94 a4 00 	call	0x148	; 0x148 <_putch>
    _putch(10);   // LF
 25a:	8a e0       	ldi	r24, 0x0A	; 10
 25c:	0e 94 a4 00 	call	0x148	; 0x148 <_putch>
}
 260:	00 00       	nop
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	08 95       	ret

00000268 <itoa8>:
void itoa8(uint16_t val,char *stringa)
{
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	00 d0       	rcall	.+0      	; 0x26e <itoa8+0x6>
 26e:	00 d0       	rcall	.+0      	; 0x270 <itoa8+0x8>
 270:	cd b7       	in	r28, 0x3d	; 61
 272:	de b7       	in	r29, 0x3e	; 62
 274:	9a 83       	std	Y+2, r25	; 0x02
 276:	89 83       	std	Y+1, r24	; 0x01
 278:	7c 83       	std	Y+4, r23	; 0x04
 27a:	6b 83       	std	Y+3, r22	; 0x03
    stringa[0]=(val%10000)/1000+48;
 27c:	49 81       	ldd	r20, Y+1	; 0x01
 27e:	5a 81       	ldd	r21, Y+2	; 0x02
 280:	ca 01       	movw	r24, r20
 282:	92 95       	swap	r25
 284:	82 95       	swap	r24
 286:	8f 70       	andi	r24, 0x0F	; 15
 288:	89 27       	eor	r24, r25
 28a:	9f 70       	andi	r25, 0x0F	; 15
 28c:	89 27       	eor	r24, r25
 28e:	9c 01       	movw	r18, r24
 290:	a7 e4       	ldi	r26, 0x47	; 71
 292:	b3 e0       	ldi	r27, 0x03	; 3
 294:	0e 94 08 03 	call	0x610	; 0x610 <__umulhisi3>
 298:	96 95       	lsr	r25
 29a:	87 95       	ror	r24
 29c:	96 95       	lsr	r25
 29e:	87 95       	ror	r24
 2a0:	96 95       	lsr	r25
 2a2:	87 95       	ror	r24
 2a4:	60 e1       	ldi	r22, 0x10	; 16
 2a6:	77 e2       	ldi	r23, 0x27	; 39
 2a8:	86 9f       	mul	r24, r22
 2aa:	90 01       	movw	r18, r0
 2ac:	87 9f       	mul	r24, r23
 2ae:	30 0d       	add	r19, r0
 2b0:	96 9f       	mul	r25, r22
 2b2:	30 0d       	add	r19, r0
 2b4:	11 24       	eor	r1, r1
 2b6:	ca 01       	movw	r24, r20
 2b8:	82 1b       	sub	r24, r18
 2ba:	93 0b       	sbc	r25, r19
 2bc:	96 95       	lsr	r25
 2be:	87 95       	ror	r24
 2c0:	96 95       	lsr	r25
 2c2:	87 95       	ror	r24
 2c4:	96 95       	lsr	r25
 2c6:	87 95       	ror	r24
 2c8:	9c 01       	movw	r18, r24
 2ca:	a5 ec       	ldi	r26, 0xC5	; 197
 2cc:	b0 e2       	ldi	r27, 0x20	; 32
 2ce:	0e 94 08 03 	call	0x610	; 0x610 <__umulhisi3>
 2d2:	92 95       	swap	r25
 2d4:	82 95       	swap	r24
 2d6:	8f 70       	andi	r24, 0x0F	; 15
 2d8:	89 27       	eor	r24, r25
 2da:	9f 70       	andi	r25, 0x0F	; 15
 2dc:	89 27       	eor	r24, r25
 2de:	80 5d       	subi	r24, 0xD0	; 208
 2e0:	28 2f       	mov	r18, r24
 2e2:	8b 81       	ldd	r24, Y+3	; 0x03
 2e4:	9c 81       	ldd	r25, Y+4	; 0x04
 2e6:	fc 01       	movw	r30, r24
 2e8:	20 83       	st	Z, r18
    stringa[1]=(val%1000)/100+48;
 2ea:	49 81       	ldd	r20, Y+1	; 0x01
 2ec:	5a 81       	ldd	r21, Y+2	; 0x02
 2ee:	ca 01       	movw	r24, r20
 2f0:	96 95       	lsr	r25
 2f2:	87 95       	ror	r24
 2f4:	96 95       	lsr	r25
 2f6:	87 95       	ror	r24
 2f8:	96 95       	lsr	r25
 2fa:	87 95       	ror	r24
 2fc:	9c 01       	movw	r18, r24
 2fe:	a5 ec       	ldi	r26, 0xC5	; 197
 300:	b0 e2       	ldi	r27, 0x20	; 32
 302:	0e 94 08 03 	call	0x610	; 0x610 <__umulhisi3>
 306:	92 95       	swap	r25
 308:	82 95       	swap	r24
 30a:	8f 70       	andi	r24, 0x0F	; 15
 30c:	89 27       	eor	r24, r25
 30e:	9f 70       	andi	r25, 0x0F	; 15
 310:	89 27       	eor	r24, r25
 312:	68 ee       	ldi	r22, 0xE8	; 232
 314:	73 e0       	ldi	r23, 0x03	; 3
 316:	86 9f       	mul	r24, r22
 318:	90 01       	movw	r18, r0
 31a:	87 9f       	mul	r24, r23
 31c:	30 0d       	add	r19, r0
 31e:	96 9f       	mul	r25, r22
 320:	30 0d       	add	r19, r0
 322:	11 24       	eor	r1, r1
 324:	ca 01       	movw	r24, r20
 326:	82 1b       	sub	r24, r18
 328:	93 0b       	sbc	r25, r19
 32a:	96 95       	lsr	r25
 32c:	87 95       	ror	r24
 32e:	96 95       	lsr	r25
 330:	87 95       	ror	r24
 332:	9c 01       	movw	r18, r24
 334:	ab e7       	ldi	r26, 0x7B	; 123
 336:	b4 e1       	ldi	r27, 0x14	; 20
 338:	0e 94 08 03 	call	0x610	; 0x610 <__umulhisi3>
 33c:	96 95       	lsr	r25
 33e:	87 95       	ror	r24
 340:	20 e3       	ldi	r18, 0x30	; 48
 342:	28 0f       	add	r18, r24
 344:	8b 81       	ldd	r24, Y+3	; 0x03
 346:	9c 81       	ldd	r25, Y+4	; 0x04
 348:	01 96       	adiw	r24, 0x01	; 1
 34a:	fc 01       	movw	r30, r24
 34c:	20 83       	st	Z, r18
    stringa[2]=(val%100)/10+48;
 34e:	49 81       	ldd	r20, Y+1	; 0x01
 350:	5a 81       	ldd	r21, Y+2	; 0x02
 352:	ca 01       	movw	r24, r20
 354:	96 95       	lsr	r25
 356:	87 95       	ror	r24
 358:	96 95       	lsr	r25
 35a:	87 95       	ror	r24
 35c:	9c 01       	movw	r18, r24
 35e:	ab e7       	ldi	r26, 0x7B	; 123
 360:	b4 e1       	ldi	r27, 0x14	; 20
 362:	0e 94 08 03 	call	0x610	; 0x610 <__umulhisi3>
 366:	96 95       	lsr	r25
 368:	87 95       	ror	r24
 36a:	64 e6       	ldi	r22, 0x64	; 100
 36c:	68 9f       	mul	r22, r24
 36e:	90 01       	movw	r18, r0
 370:	69 9f       	mul	r22, r25
 372:	30 0d       	add	r19, r0
 374:	11 24       	eor	r1, r1
 376:	ca 01       	movw	r24, r20
 378:	82 1b       	sub	r24, r18
 37a:	93 0b       	sbc	r25, r19
 37c:	9c 01       	movw	r18, r24
 37e:	ad ec       	ldi	r26, 0xCD	; 205
 380:	bc ec       	ldi	r27, 0xCC	; 204
 382:	0e 94 08 03 	call	0x610	; 0x610 <__umulhisi3>
 386:	96 95       	lsr	r25
 388:	87 95       	ror	r24
 38a:	96 95       	lsr	r25
 38c:	87 95       	ror	r24
 38e:	96 95       	lsr	r25
 390:	87 95       	ror	r24
 392:	20 e3       	ldi	r18, 0x30	; 48
 394:	28 0f       	add	r18, r24
 396:	8b 81       	ldd	r24, Y+3	; 0x03
 398:	9c 81       	ldd	r25, Y+4	; 0x04
 39a:	02 96       	adiw	r24, 0x02	; 2
 39c:	fc 01       	movw	r30, r24
 39e:	20 83       	st	Z, r18
    stringa[3]=(val%10)+48;
 3a0:	49 81       	ldd	r20, Y+1	; 0x01
 3a2:	5a 81       	ldd	r21, Y+2	; 0x02
 3a4:	9a 01       	movw	r18, r20
 3a6:	ad ec       	ldi	r26, 0xCD	; 205
 3a8:	bc ec       	ldi	r27, 0xCC	; 204
 3aa:	0e 94 08 03 	call	0x610	; 0x610 <__umulhisi3>
 3ae:	9c 01       	movw	r18, r24
 3b0:	36 95       	lsr	r19
 3b2:	27 95       	ror	r18
 3b4:	36 95       	lsr	r19
 3b6:	27 95       	ror	r18
 3b8:	36 95       	lsr	r19
 3ba:	27 95       	ror	r18
 3bc:	c9 01       	movw	r24, r18
 3be:	88 0f       	add	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	88 0f       	add	r24, r24
 3c4:	99 1f       	adc	r25, r25
 3c6:	82 0f       	add	r24, r18
 3c8:	93 1f       	adc	r25, r19
 3ca:	88 0f       	add	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	9a 01       	movw	r18, r20
 3d0:	28 1b       	sub	r18, r24
 3d2:	39 0b       	sbc	r19, r25
 3d4:	82 2f       	mov	r24, r18
 3d6:	20 e3       	ldi	r18, 0x30	; 48
 3d8:	28 0f       	add	r18, r24
 3da:	8b 81       	ldd	r24, Y+3	; 0x03
 3dc:	9c 81       	ldd	r25, Y+4	; 0x04
 3de:	03 96       	adiw	r24, 0x03	; 3
 3e0:	fc 01       	movw	r30, r24
 3e2:	20 83       	st	Z, r18
    stringa[4]=0;
 3e4:	8b 81       	ldd	r24, Y+3	; 0x03
 3e6:	9c 81       	ldd	r25, Y+4	; 0x04
 3e8:	04 96       	adiw	r24, 0x04	; 4
 3ea:	fc 01       	movw	r30, r24
 3ec:	10 82       	st	Z, r1
}
 3ee:	00 00       	nop
 3f0:	0f 90       	pop	r0
 3f2:	0f 90       	pop	r0
 3f4:	0f 90       	pop	r0
 3f6:	0f 90       	pop	r0
 3f8:	df 91       	pop	r29
 3fa:	cf 91       	pop	r28
 3fc:	08 95       	ret

000003fe <delay>:
#ifndef MYDELAY_H_INCLUDED
#define MYDELAY_H_INCLUDED
#include <avr/io.h>

void delay(uint32_t ms)
{
 3fe:	cf 93       	push	r28
 400:	df 93       	push	r29
 402:	cd b7       	in	r28, 0x3d	; 61
 404:	de b7       	in	r29, 0x3e	; 62
 406:	28 97       	sbiw	r28, 0x08	; 8
 408:	0f b6       	in	r0, 0x3f	; 63
 40a:	f8 94       	cli
 40c:	de bf       	out	0x3e, r29	; 62
 40e:	0f be       	out	0x3f, r0	; 63
 410:	cd bf       	out	0x3d, r28	; 61
 412:	69 83       	std	Y+1, r22	; 0x01
 414:	7a 83       	std	Y+2, r23	; 0x02
 416:	8b 83       	std	Y+3, r24	; 0x03
 418:	9c 83       	std	Y+4, r25	; 0x04
    ms*=371;
 41a:	49 81       	ldd	r20, Y+1	; 0x01
 41c:	5a 81       	ldd	r21, Y+2	; 0x02
 41e:	6b 81       	ldd	r22, Y+3	; 0x03
 420:	7c 81       	ldd	r23, Y+4	; 0x04
 422:	83 e7       	ldi	r24, 0x73	; 115
 424:	91 e0       	ldi	r25, 0x01	; 1
 426:	dc 01       	movw	r26, r24
 428:	9a 01       	movw	r18, r20
 42a:	ab 01       	movw	r20, r22
 42c:	0e 94 17 03 	call	0x62e	; 0x62e <__muluhisi3>
 430:	6d 83       	std	Y+5, r22	; 0x05
 432:	7e 83       	std	Y+6, r23	; 0x06
 434:	8f 83       	std	Y+7, r24	; 0x07
 436:	98 87       	std	Y+8, r25	; 0x08
 438:	8d 81       	ldd	r24, Y+5	; 0x05
 43a:	9e 81       	ldd	r25, Y+6	; 0x06
 43c:	af 81       	ldd	r26, Y+7	; 0x07
 43e:	b8 85       	ldd	r27, Y+8	; 0x08
 440:	89 83       	std	Y+1, r24	; 0x01
 442:	9a 83       	std	Y+2, r25	; 0x02
 444:	ab 83       	std	Y+3, r26	; 0x03
 446:	bc 83       	std	Y+4, r27	; 0x04
    while(ms--);
 448:	00 00       	nop
 44a:	89 81       	ldd	r24, Y+1	; 0x01
 44c:	9a 81       	ldd	r25, Y+2	; 0x02
 44e:	ab 81       	ldd	r26, Y+3	; 0x03
 450:	bc 81       	ldd	r27, Y+4	; 0x04
 452:	ac 01       	movw	r20, r24
 454:	bd 01       	movw	r22, r26
 456:	41 50       	subi	r20, 0x01	; 1
 458:	51 09       	sbc	r21, r1
 45a:	61 09       	sbc	r22, r1
 45c:	71 09       	sbc	r23, r1
 45e:	49 83       	std	Y+1, r20	; 0x01
 460:	5a 83       	std	Y+2, r21	; 0x02
 462:	6b 83       	std	Y+3, r22	; 0x03
 464:	7c 83       	std	Y+4, r23	; 0x04
 466:	89 2b       	or	r24, r25
 468:	8a 2b       	or	r24, r26
 46a:	8b 2b       	or	r24, r27
 46c:	71 f7       	brne	.-36     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
}
 46e:	00 00       	nop
 470:	00 00       	nop
 472:	28 96       	adiw	r28, 0x08	; 8
 474:	0f b6       	in	r0, 0x3f	; 63
 476:	f8 94       	cli
 478:	de bf       	out	0x3e, r29	; 62
 47a:	0f be       	out	0x3f, r0	; 63
 47c:	cd bf       	out	0x3d, r28	; 61
 47e:	df 91       	pop	r29
 480:	cf 91       	pop	r28
 482:	08 95       	ret

00000484 <__vector_18>:
#include "../Headerfunktionen/mydelay.h"
#include <avr/io.h>
#include <avr/interrupt.h>
unsigned char spgc[5];
ISR(USART_RX_vect)
{
 484:	1f 92       	push	r1
 486:	0f 92       	push	r0
 488:	0f b6       	in	r0, 0x3f	; 63
 48a:	0f 92       	push	r0
 48c:	11 24       	eor	r1, r1
 48e:	2f 93       	push	r18
 490:	3f 93       	push	r19
 492:	4f 93       	push	r20
 494:	5f 93       	push	r21
 496:	6f 93       	push	r22
 498:	7f 93       	push	r23
 49a:	8f 93       	push	r24
 49c:	9f 93       	push	r25
 49e:	af 93       	push	r26
 4a0:	bf 93       	push	r27
 4a2:	ef 93       	push	r30
 4a4:	ff 93       	push	r31
 4a6:	cf 93       	push	r28
 4a8:	df 93       	push	r29
 4aa:	0f 92       	push	r0
 4ac:	cd b7       	in	r28, 0x3d	; 61
 4ae:	de b7       	in	r29, 0x3e	; 62
    uint8_t sreg=SREG;
 4b0:	8f e5       	ldi	r24, 0x5F	; 95
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	fc 01       	movw	r30, r24
 4b6:	80 81       	ld	r24, Z
 4b8:	89 83       	std	Y+1, r24	; 0x01
    SREG&=~(1<<7);
 4ba:	8f e5       	ldi	r24, 0x5F	; 95
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	fc 01       	movw	r30, r24
 4c0:	20 81       	ld	r18, Z
 4c2:	8f e5       	ldi	r24, 0x5F	; 95
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	2f 77       	andi	r18, 0x7F	; 127
 4c8:	fc 01       	movw	r30, r24
 4ca:	20 83       	st	Z, r18
    if(UDR0==49)
 4cc:	86 ec       	ldi	r24, 0xC6	; 198
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	fc 01       	movw	r30, r24
 4d2:	80 81       	ld	r24, Z
 4d4:	81 33       	cpi	r24, 0x31	; 49
 4d6:	79 f4       	brne	.+30     	; 0x4f6 <__vector_18+0x72>
    {
        PORTD|=1<<2;
 4d8:	8b e2       	ldi	r24, 0x2B	; 43
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	fc 01       	movw	r30, r24
 4de:	20 81       	ld	r18, Z
 4e0:	8b e2       	ldi	r24, 0x2B	; 43
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	24 60       	ori	r18, 0x04	; 4
 4e6:	fc 01       	movw	r30, r24
 4e8:	20 83       	st	Z, r18
        _puts(spgc);
 4ea:	80 e0       	ldi	r24, 0x00	; 0
 4ec:	91 e0       	ldi	r25, 0x01	; 1
 4ee:	0e 94 bf 00 	call	0x17e	; 0x17e <_puts>
        _newline();
 4f2:	0e 94 26 01 	call	0x24c	; 0x24c <_newline>
    }
    SREG=sreg;
 4f6:	8f e5       	ldi	r24, 0x5F	; 95
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	29 81       	ldd	r18, Y+1	; 0x01
 4fc:	fc 01       	movw	r30, r24
 4fe:	20 83       	st	Z, r18
}
 500:	00 00       	nop
 502:	0f 90       	pop	r0
 504:	df 91       	pop	r29
 506:	cf 91       	pop	r28
 508:	ff 91       	pop	r31
 50a:	ef 91       	pop	r30
 50c:	bf 91       	pop	r27
 50e:	af 91       	pop	r26
 510:	9f 91       	pop	r25
 512:	8f 91       	pop	r24
 514:	7f 91       	pop	r23
 516:	6f 91       	pop	r22
 518:	5f 91       	pop	r21
 51a:	4f 91       	pop	r20
 51c:	3f 91       	pop	r19
 51e:	2f 91       	pop	r18
 520:	0f 90       	pop	r0
 522:	0f be       	out	0x3f, r0	; 63
 524:	0f 90       	pop	r0
 526:	1f 90       	pop	r1
 528:	18 95       	reti

0000052a <main>:
int main(void)
{
 52a:	cf 93       	push	r28
 52c:	df 93       	push	r29
 52e:	00 d0       	rcall	.+0      	; 0x530 <main+0x6>
 530:	cd b7       	in	r28, 0x3d	; 61
 532:	de b7       	in	r29, 0x3e	; 62
    uint16_t spg;
    ADCSRA|=0x07;
 534:	8a e7       	ldi	r24, 0x7A	; 122
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	fc 01       	movw	r30, r24
 53a:	20 81       	ld	r18, Z
 53c:	8a e7       	ldi	r24, 0x7A	; 122
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	27 60       	ori	r18, 0x07	; 7
 542:	fc 01       	movw	r30, r24
 544:	20 83       	st	Z, r18
    ADCSRA|=(1<<ADEN);
 546:	8a e7       	ldi	r24, 0x7A	; 122
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	fc 01       	movw	r30, r24
 54c:	20 81       	ld	r18, Z
 54e:	8a e7       	ldi	r24, 0x7A	; 122
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	20 68       	ori	r18, 0x80	; 128
 554:	fc 01       	movw	r30, r24
 556:	20 83       	st	Z, r18
    ADMUX|=0x40;
 558:	8c e7       	ldi	r24, 0x7C	; 124
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	fc 01       	movw	r30, r24
 55e:	20 81       	ld	r18, Z
 560:	8c e7       	ldi	r24, 0x7C	; 124
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	20 64       	ori	r18, 0x40	; 64
 566:	fc 01       	movw	r30, r24
 568:	20 83       	st	Z, r18
    SREG|=(1<<7);
 56a:	8f e5       	ldi	r24, 0x5F	; 95
 56c:	90 e0       	ldi	r25, 0x00	; 0
 56e:	fc 01       	movw	r30, r24
 570:	20 81       	ld	r18, Z
 572:	8f e5       	ldi	r24, 0x5F	; 95
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	20 68       	ori	r18, 0x80	; 128
 578:	fc 01       	movw	r30, r24
 57a:	20 83       	st	Z, r18
    init_usart(19200);
 57c:	60 e0       	ldi	r22, 0x00	; 0
 57e:	7b e4       	ldi	r23, 0x4B	; 75
 580:	80 e0       	ldi	r24, 0x00	; 0
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	0e 94 48 00 	call	0x90	; 0x90 <init_usart>
    while(1)
    {
        ADCSRA|=(1<<ADSC);
 588:	8a e7       	ldi	r24, 0x7A	; 122
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	fc 01       	movw	r30, r24
 58e:	20 81       	ld	r18, Z
 590:	8a e7       	ldi	r24, 0x7A	; 122
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	20 64       	ori	r18, 0x40	; 64
 596:	fc 01       	movw	r30, r24
 598:	20 83       	st	Z, r18
        while(ADCSRA&(1<<ADSC));
 59a:	00 00       	nop
 59c:	8a e7       	ldi	r24, 0x7A	; 122
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	fc 01       	movw	r30, r24
 5a2:	80 81       	ld	r24, Z
 5a4:	88 2f       	mov	r24, r24
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	80 74       	andi	r24, 0x40	; 64
 5aa:	99 27       	eor	r25, r25
 5ac:	89 2b       	or	r24, r25
 5ae:	b1 f7       	brne	.-20     	; 0x59c <main+0x72>
        spg=ADC;
 5b0:	88 e7       	ldi	r24, 0x78	; 120
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	fc 01       	movw	r30, r24
 5b6:	80 81       	ld	r24, Z
 5b8:	91 81       	ldd	r25, Z+1	; 0x01
 5ba:	9a 83       	std	Y+2, r25	; 0x02
 5bc:	89 83       	std	Y+1, r24	; 0x01
        itoa8(spg,spgc);
 5be:	89 81       	ldd	r24, Y+1	; 0x01
 5c0:	9a 81       	ldd	r25, Y+2	; 0x02
 5c2:	60 e0       	ldi	r22, 0x00	; 0
 5c4:	71 e0       	ldi	r23, 0x01	; 1
 5c6:	0e 94 34 01 	call	0x268	; 0x268 <itoa8>
        ADCSRA|=(1<<ADSC);
 5ca:	de cf       	rjmp	.-68     	; 0x588 <main+0x5e>

000005cc <__udivmodsi4>:
 5cc:	a1 e2       	ldi	r26, 0x21	; 33
 5ce:	1a 2e       	mov	r1, r26
 5d0:	aa 1b       	sub	r26, r26
 5d2:	bb 1b       	sub	r27, r27
 5d4:	fd 01       	movw	r30, r26
 5d6:	0d c0       	rjmp	.+26     	; 0x5f2 <__udivmodsi4_ep>

000005d8 <__udivmodsi4_loop>:
 5d8:	aa 1f       	adc	r26, r26
 5da:	bb 1f       	adc	r27, r27
 5dc:	ee 1f       	adc	r30, r30
 5de:	ff 1f       	adc	r31, r31
 5e0:	a2 17       	cp	r26, r18
 5e2:	b3 07       	cpc	r27, r19
 5e4:	e4 07       	cpc	r30, r20
 5e6:	f5 07       	cpc	r31, r21
 5e8:	20 f0       	brcs	.+8      	; 0x5f2 <__udivmodsi4_ep>
 5ea:	a2 1b       	sub	r26, r18
 5ec:	b3 0b       	sbc	r27, r19
 5ee:	e4 0b       	sbc	r30, r20
 5f0:	f5 0b       	sbc	r31, r21

000005f2 <__udivmodsi4_ep>:
 5f2:	66 1f       	adc	r22, r22
 5f4:	77 1f       	adc	r23, r23
 5f6:	88 1f       	adc	r24, r24
 5f8:	99 1f       	adc	r25, r25
 5fa:	1a 94       	dec	r1
 5fc:	69 f7       	brne	.-38     	; 0x5d8 <__udivmodsi4_loop>
 5fe:	60 95       	com	r22
 600:	70 95       	com	r23
 602:	80 95       	com	r24
 604:	90 95       	com	r25
 606:	9b 01       	movw	r18, r22
 608:	ac 01       	movw	r20, r24
 60a:	bd 01       	movw	r22, r26
 60c:	cf 01       	movw	r24, r30
 60e:	08 95       	ret

00000610 <__umulhisi3>:
 610:	a2 9f       	mul	r26, r18
 612:	b0 01       	movw	r22, r0
 614:	b3 9f       	mul	r27, r19
 616:	c0 01       	movw	r24, r0
 618:	a3 9f       	mul	r26, r19
 61a:	70 0d       	add	r23, r0
 61c:	81 1d       	adc	r24, r1
 61e:	11 24       	eor	r1, r1
 620:	91 1d       	adc	r25, r1
 622:	b2 9f       	mul	r27, r18
 624:	70 0d       	add	r23, r0
 626:	81 1d       	adc	r24, r1
 628:	11 24       	eor	r1, r1
 62a:	91 1d       	adc	r25, r1
 62c:	08 95       	ret

0000062e <__muluhisi3>:
 62e:	0e 94 08 03 	call	0x610	; 0x610 <__umulhisi3>
 632:	a5 9f       	mul	r26, r21
 634:	90 0d       	add	r25, r0
 636:	b4 9f       	mul	r27, r20
 638:	90 0d       	add	r25, r0
 63a:	a4 9f       	mul	r26, r20
 63c:	80 0d       	add	r24, r0
 63e:	91 1d       	adc	r25, r1
 640:	11 24       	eor	r1, r1
 642:	08 95       	ret

00000644 <_exit>:
 644:	f8 94       	cli

00000646 <__stop_program>:
 646:	ff cf       	rjmp	.-2      	; 0x646 <__stop_program>
