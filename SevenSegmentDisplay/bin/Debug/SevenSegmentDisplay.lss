
bin\Debug\SevenSegmentDisplay.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000002a4  00000338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .fuse         00000003  00820000  00820000  00000342  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .debug_aranges 00000020  00000000  00000000  00000345  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000005c  00000000  00000000  00000365  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001f4  00000000  00000000  000003c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000148  00000000  00000000  000005b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000243  00000000  00000000  000006fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00000940  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000d5  00000000  00000000  00000990  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ea       	ldi	r30, 0xA4	; 164
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
  8a:	0e 94 01 01 	call	0x202	; 0x202 <main>
  8e:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <delay>:
#ifndef MYDELAY_H_INCLUDED
#define MYDELAY_H_INCLUDED
#include <avr/io.h>

void delay(uint32_t ms)
{
  96:	df 93       	push	r29
  98:	cf 93       	push	r28
  9a:	00 d0       	rcall	.+0      	; 0x9c <delay+0x6>
  9c:	00 d0       	rcall	.+0      	; 0x9e <delay+0x8>
  9e:	0f 92       	push	r0
  a0:	cd b7       	in	r28, 0x3d	; 61
  a2:	de b7       	in	r29, 0x3e	; 62
  a4:	69 83       	std	Y+1, r22	; 0x01
  a6:	7a 83       	std	Y+2, r23	; 0x02
  a8:	8b 83       	std	Y+3, r24	; 0x03
  aa:	9c 83       	std	Y+4, r25	; 0x04
    ms*=371;
  ac:	89 81       	ldd	r24, Y+1	; 0x01
  ae:	9a 81       	ldd	r25, Y+2	; 0x02
  b0:	ab 81       	ldd	r26, Y+3	; 0x03
  b2:	bc 81       	ldd	r27, Y+4	; 0x04
  b4:	23 e7       	ldi	r18, 0x73	; 115
  b6:	31 e0       	ldi	r19, 0x01	; 1
  b8:	40 e0       	ldi	r20, 0x00	; 0
  ba:	50 e0       	ldi	r21, 0x00	; 0
  bc:	bc 01       	movw	r22, r24
  be:	cd 01       	movw	r24, r26
  c0:	0e 94 25 01 	call	0x24a	; 0x24a <__mulsi3>
  c4:	dc 01       	movw	r26, r24
  c6:	cb 01       	movw	r24, r22
  c8:	89 83       	std	Y+1, r24	; 0x01
  ca:	9a 83       	std	Y+2, r25	; 0x02
  cc:	ab 83       	std	Y+3, r26	; 0x03
  ce:	bc 83       	std	Y+4, r27	; 0x04
    while(ms--);
  d0:	1d 82       	std	Y+5, r1	; 0x05
  d2:	89 81       	ldd	r24, Y+1	; 0x01
  d4:	9a 81       	ldd	r25, Y+2	; 0x02
  d6:	ab 81       	ldd	r26, Y+3	; 0x03
  d8:	bc 81       	ldd	r27, Y+4	; 0x04
  da:	00 97       	sbiw	r24, 0x00	; 0
  dc:	a1 05       	cpc	r26, r1
  de:	b1 05       	cpc	r27, r1
  e0:	11 f0       	breq	.+4      	; 0xe6 <delay+0x50>
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	8d 83       	std	Y+5, r24	; 0x05
  e6:	89 81       	ldd	r24, Y+1	; 0x01
  e8:	9a 81       	ldd	r25, Y+2	; 0x02
  ea:	ab 81       	ldd	r26, Y+3	; 0x03
  ec:	bc 81       	ldd	r27, Y+4	; 0x04
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	a1 09       	sbc	r26, r1
  f2:	b1 09       	sbc	r27, r1
  f4:	89 83       	std	Y+1, r24	; 0x01
  f6:	9a 83       	std	Y+2, r25	; 0x02
  f8:	ab 83       	std	Y+3, r26	; 0x03
  fa:	bc 83       	std	Y+4, r27	; 0x04
  fc:	8d 81       	ldd	r24, Y+5	; 0x05
  fe:	88 23       	and	r24, r24
 100:	39 f7       	brne	.-50     	; 0xd0 <delay+0x3a>
}
 102:	0f 90       	pop	r0
 104:	0f 90       	pop	r0
 106:	0f 90       	pop	r0
 108:	0f 90       	pop	r0
 10a:	0f 90       	pop	r0
 10c:	cf 91       	pop	r28
 10e:	df 91       	pop	r29
 110:	08 95       	ret

00000112 <get4bit>:
#ifndef DREHSCHALTER_H_INCLUDED
#define DREHSCHALTER_H_INCLUDED
#include <avr/io.h>

uint8_t get4bit()     //gibt Wert zwischen 0 und 15 zur√ºck je nach Position des Schalters
{
 112:	df 93       	push	r29
 114:	cf 93       	push	r28
 116:	00 d0       	rcall	.+0      	; 0x118 <get4bit+0x6>
 118:	0f 92       	push	r0
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
    uint8_t schalter=0;
 11e:	1b 82       	std	Y+3, r1	; 0x03
    int i;
    for(i=0;i<4;i++)
 120:	1a 82       	std	Y+2, r1	; 0x02
 122:	19 82       	std	Y+1, r1	; 0x01
 124:	20 c0       	rjmp	.+64     	; 0x166 <get4bit+0x54>
    {
        if(!(PINC&1<<i))
 126:	e6 e2       	ldi	r30, 0x26	; 38
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	88 2f       	mov	r24, r24
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	09 80       	ldd	r0, Y+1	; 0x01
 132:	02 c0       	rjmp	.+4      	; 0x138 <get4bit+0x26>
 134:	95 95       	asr	r25
 136:	87 95       	ror	r24
 138:	0a 94       	dec	r0
 13a:	e2 f7       	brpl	.-8      	; 0x134 <get4bit+0x22>
 13c:	81 70       	andi	r24, 0x01	; 1
 13e:	90 70       	andi	r25, 0x00	; 0
 140:	00 97       	sbiw	r24, 0x00	; 0
 142:	61 f4       	brne	.+24     	; 0x15c <get4bit+0x4a>
            schalter+=1<<i;
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	09 80       	ldd	r0, Y+1	; 0x01
 14a:	02 c0       	rjmp	.+4      	; 0x150 <get4bit+0x3e>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	0a 94       	dec	r0
 152:	e2 f7       	brpl	.-8      	; 0x14c <get4bit+0x3a>
 154:	98 2f       	mov	r25, r24
 156:	8b 81       	ldd	r24, Y+3	; 0x03
 158:	89 0f       	add	r24, r25
 15a:	8b 83       	std	Y+3, r24	; 0x03

uint8_t get4bit()     //gibt Wert zwischen 0 und 15 zur√ºck je nach Position des Schalters
{
    uint8_t schalter=0;
    int i;
    for(i=0;i<4;i++)
 15c:	89 81       	ldd	r24, Y+1	; 0x01
 15e:	9a 81       	ldd	r25, Y+2	; 0x02
 160:	01 96       	adiw	r24, 0x01	; 1
 162:	9a 83       	std	Y+2, r25	; 0x02
 164:	89 83       	std	Y+1, r24	; 0x01
 166:	89 81       	ldd	r24, Y+1	; 0x01
 168:	9a 81       	ldd	r25, Y+2	; 0x02
 16a:	84 30       	cpi	r24, 0x04	; 4
 16c:	91 05       	cpc	r25, r1
 16e:	dc f2       	brlt	.-74     	; 0x126 <get4bit+0x14>
    {
        if(!(PINC&1<<i))
            schalter+=1<<i;
    }
    return schalter;
 170:	8b 81       	ldd	r24, Y+3	; 0x03
}
 172:	0f 90       	pop	r0
 174:	0f 90       	pop	r0
 176:	0f 90       	pop	r0
 178:	cf 91       	pop	r28
 17a:	df 91       	pop	r29
 17c:	08 95       	ret

0000017e <showdigit>:
#include <avr/io.h>

void showdigit(uint8_t digit)
/*  7 segment anzeige anschlieﬂen von links oben nach rechts unten:
    D3 D9 D8 D2 D4 D6 D5 D7                                            */
{
 17e:	df 93       	push	r29
 180:	cf 93       	push	r28
 182:	0f 92       	push	r0
 184:	cd b7       	in	r28, 0x3d	; 61
 186:	de b7       	in	r29, 0x3e	; 62
 188:	89 83       	std	Y+1, r24	; 0x01
    PORTD=0x00;
 18a:	eb e2       	ldi	r30, 0x2B	; 43
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	10 82       	st	Z, r1
    PORTB=0x00;
 190:	e5 e2       	ldi	r30, 0x25	; 37
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	10 82       	st	Z, r1
    static uint8_t ziffern[10]={0b11110111,0b10100100,0b11011101,0b11101101,0b10101110,0b11101011,0b11111011,0b10100111,0b11111111,0b11101111};
    if(ziffern[digit]&1)
 196:	89 81       	ldd	r24, Y+1	; 0x01
 198:	88 2f       	mov	r24, r24
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	fc 01       	movw	r30, r24
 19e:	e0 50       	subi	r30, 0x00	; 0
 1a0:	ff 4f       	sbci	r31, 0xFF	; 255
 1a2:	80 81       	ld	r24, Z
 1a4:	88 2f       	mov	r24, r24
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	81 70       	andi	r24, 0x01	; 1
 1aa:	90 70       	andi	r25, 0x00	; 0
 1ac:	88 23       	and	r24, r24
 1ae:	39 f0       	breq	.+14     	; 0x1be <showdigit+0x40>
    {
        PORTB|=1;
 1b0:	a5 e2       	ldi	r26, 0x25	; 37
 1b2:	b0 e0       	ldi	r27, 0x00	; 0
 1b4:	e5 e2       	ldi	r30, 0x25	; 37
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	81 60       	ori	r24, 0x01	; 1
 1bc:	8c 93       	st	X, r24
    }
    if(ziffern[digit]&1<<1)
 1be:	89 81       	ldd	r24, Y+1	; 0x01
 1c0:	88 2f       	mov	r24, r24
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	fc 01       	movw	r30, r24
 1c6:	e0 50       	subi	r30, 0x00	; 0
 1c8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ca:	80 81       	ld	r24, Z
 1cc:	88 2f       	mov	r24, r24
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	82 70       	andi	r24, 0x02	; 2
 1d2:	90 70       	andi	r25, 0x00	; 0
 1d4:	00 97       	sbiw	r24, 0x00	; 0
 1d6:	39 f0       	breq	.+14     	; 0x1e6 <showdigit+0x68>
    {
        PORTB|=1<<1;
 1d8:	a5 e2       	ldi	r26, 0x25	; 37
 1da:	b0 e0       	ldi	r27, 0x00	; 0
 1dc:	e5 e2       	ldi	r30, 0x25	; 37
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	82 60       	ori	r24, 0x02	; 2
 1e4:	8c 93       	st	X, r24
    }
    PORTD=ziffern[digit];
 1e6:	ab e2       	ldi	r26, 0x2B	; 43
 1e8:	b0 e0       	ldi	r27, 0x00	; 0
 1ea:	89 81       	ldd	r24, Y+1	; 0x01
 1ec:	88 2f       	mov	r24, r24
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	fc 01       	movw	r30, r24
 1f2:	e0 50       	subi	r30, 0x00	; 0
 1f4:	ff 4f       	sbci	r31, 0xFF	; 255
 1f6:	80 81       	ld	r24, Z
 1f8:	8c 93       	st	X, r24
}
 1fa:	0f 90       	pop	r0
 1fc:	cf 91       	pop	r28
 1fe:	df 91       	pop	r29
 200:	08 95       	ret

00000202 <main>:
#include <avr/io.h>



int main(void)
{
 202:	df 93       	push	r29
 204:	cf 93       	push	r28
 206:	0f 92       	push	r0
 208:	cd b7       	in	r28, 0x3d	; 61
 20a:	de b7       	in	r29, 0x3e	; 62
    DDRD=0b111111<<2;  //6 bits des D registers f¸r die 7 segment anzeige
 20c:	ea e2       	ldi	r30, 0x2A	; 42
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	8c ef       	ldi	r24, 0xFC	; 252
 212:	80 83       	st	Z, r24
    DDRB=0b00000011;        //2 bits des B registers
 214:	e4 e2       	ldi	r30, 0x24	; 36
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	83 e0       	ldi	r24, 0x03	; 3
 21a:	80 83       	st	Z, r24
    DDRC=0x00;        //A0 bis A3 auf Eingang
 21c:	e7 e2       	ldi	r30, 0x27	; 39
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	10 82       	st	Z, r1
    PORTC=0x0F;       //A0 bis A3 auf HIGH um PU Widerstand einzuschalten
 222:	e8 e2       	ldi	r30, 0x28	; 40
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	8f e0       	ldi	r24, 0x0F	; 15
 228:	80 83       	st	Z, r24

    uint8_t led=0;
 22a:	19 82       	std	Y+1, r1	; 0x01
    PORTD=0x00;
 22c:	eb e2       	ldi	r30, 0x2B	; 43
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	10 82       	st	Z, r1
    while(1)
    {
        led=get4bit()%10;
 232:	0e 94 89 00 	call	0x112	; 0x112 <get4bit>
 236:	9a e0       	ldi	r25, 0x0A	; 10
 238:	69 2f       	mov	r22, r25
 23a:	0e 94 44 01 	call	0x288	; 0x288 <__udivmodqi4>
 23e:	89 2f       	mov	r24, r25
 240:	89 83       	std	Y+1, r24	; 0x01
        showdigit(led);
 242:	89 81       	ldd	r24, Y+1	; 0x01
 244:	0e 94 bf 00 	call	0x17e	; 0x17e <showdigit>
 248:	f4 cf       	rjmp	.-24     	; 0x232 <main+0x30>

0000024a <__mulsi3>:
 24a:	62 9f       	mul	r22, r18
 24c:	d0 01       	movw	r26, r0
 24e:	73 9f       	mul	r23, r19
 250:	f0 01       	movw	r30, r0
 252:	82 9f       	mul	r24, r18
 254:	e0 0d       	add	r30, r0
 256:	f1 1d       	adc	r31, r1
 258:	64 9f       	mul	r22, r20
 25a:	e0 0d       	add	r30, r0
 25c:	f1 1d       	adc	r31, r1
 25e:	92 9f       	mul	r25, r18
 260:	f0 0d       	add	r31, r0
 262:	83 9f       	mul	r24, r19
 264:	f0 0d       	add	r31, r0
 266:	74 9f       	mul	r23, r20
 268:	f0 0d       	add	r31, r0
 26a:	65 9f       	mul	r22, r21
 26c:	f0 0d       	add	r31, r0
 26e:	99 27       	eor	r25, r25
 270:	72 9f       	mul	r23, r18
 272:	b0 0d       	add	r27, r0
 274:	e1 1d       	adc	r30, r1
 276:	f9 1f       	adc	r31, r25
 278:	63 9f       	mul	r22, r19
 27a:	b0 0d       	add	r27, r0
 27c:	e1 1d       	adc	r30, r1
 27e:	f9 1f       	adc	r31, r25
 280:	bd 01       	movw	r22, r26
 282:	cf 01       	movw	r24, r30
 284:	11 24       	eor	r1, r1
 286:	08 95       	ret

00000288 <__udivmodqi4>:
 288:	99 1b       	sub	r25, r25
 28a:	79 e0       	ldi	r23, 0x09	; 9
 28c:	04 c0       	rjmp	.+8      	; 0x296 <__udivmodqi4_ep>

0000028e <__udivmodqi4_loop>:
 28e:	99 1f       	adc	r25, r25
 290:	96 17       	cp	r25, r22
 292:	08 f0       	brcs	.+2      	; 0x296 <__udivmodqi4_ep>
 294:	96 1b       	sub	r25, r22

00000296 <__udivmodqi4_ep>:
 296:	88 1f       	adc	r24, r24
 298:	7a 95       	dec	r23
 29a:	c9 f7       	brne	.-14     	; 0x28e <__udivmodqi4_loop>
 29c:	80 95       	com	r24
 29e:	08 95       	ret

000002a0 <_exit>:
 2a0:	f8 94       	cli

000002a2 <__stop_program>:
 2a2:	ff cf       	rjmp	.-2      	; 0x2a2 <__stop_program>
