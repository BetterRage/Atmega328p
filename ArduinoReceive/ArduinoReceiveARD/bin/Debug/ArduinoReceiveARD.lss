
bin\Debug\ArduinoReceiveARD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000280  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .fuse         00000003  00820000  00820000  000002f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  000002f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000007d  00000000  00000000  00000317  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000203  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000013c  00000000  00000000  00000597  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000242  00000000  00000000  000006d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000080  00000000  00000000  00000918  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000e6  00000000  00000000  00000998  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <main>
  78:	0c 94 3e 01 	jmp	0x27c	; 0x27c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <init_usart>:
#ifndef UART_H_INCLUDED
#define UART_H_INCLUDED
#include <avr/io.h>

void init_usart(void)
{
  80:	df 93       	push	r29
  82:	cf 93       	push	r28
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
    UBRR0L = 103;                                //(16000000ul/(16ul*9600ul))-1;       //Baudrate 9600
  88:	e4 ec       	ldi	r30, 0xC4	; 196
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	87 e6       	ldi	r24, 0x67	; 103
  8e:	80 83       	st	Z, r24
    UBRR0H = 0;
  90:	e5 ec       	ldi	r30, 0xC5	; 197
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1
    UCSR0B |= (1<<TXEN0) | (1<<RXEN0);           // Sender und Empfänger aktivieren
  96:	a1 ec       	ldi	r26, 0xC1	; 193
  98:	b0 e0       	ldi	r27, 0x00	; 0
  9a:	e1 ec       	ldi	r30, 0xC1	; 193
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	88 61       	ori	r24, 0x18	; 24
  a2:	8c 93       	st	X, r24
    UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);         // 8-Bit Übertragung
  a4:	e2 ec       	ldi	r30, 0xC2	; 194
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	86 e0       	ldi	r24, 0x06	; 6
  aa:	80 83       	st	Z, r24
 // Asynchrone Übertragung (UMSEL00=0 und UMSEL01=0);
}
  ac:	cf 91       	pop	r28
  ae:	df 91       	pop	r29
  b0:	08 95       	ret

000000b2 <_putch>:
void _putch(unsigned char ch)
{
  b2:	df 93       	push	r29
  b4:	cf 93       	push	r28
  b6:	0f 92       	push	r0
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
  bc:	89 83       	std	Y+1, r24	; 0x01
    while(!(UCSR0A & (1<<UDRE0)));
  be:	e0 ec       	ldi	r30, 0xC0	; 192
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	88 2f       	mov	r24, r24
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	80 72       	andi	r24, 0x20	; 32
  ca:	90 70       	andi	r25, 0x00	; 0
  cc:	00 97       	sbiw	r24, 0x00	; 0
  ce:	b9 f3       	breq	.-18     	; 0xbe <_putch+0xc>
    UDR0 = ch;
  d0:	e6 ec       	ldi	r30, 0xC6	; 198
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	89 81       	ldd	r24, Y+1	; 0x01
  d6:	80 83       	st	Z, r24
}
  d8:	0f 90       	pop	r0
  da:	cf 91       	pop	r28
  dc:	df 91       	pop	r29
  de:	08 95       	ret

000000e0 <_puts>:
void _puts(char st[])
{
  e0:	df 93       	push	r29
  e2:	cf 93       	push	r28
  e4:	00 d0       	rcall	.+0      	; 0xe6 <_puts+0x6>
  e6:	0f 92       	push	r0
  e8:	cd b7       	in	r28, 0x3d	; 61
  ea:	de b7       	in	r29, 0x3e	; 62
  ec:	9b 83       	std	Y+3, r25	; 0x03
  ee:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t i=0;
  f0:	19 82       	std	Y+1, r1	; 0x01
  f2:	10 c0       	rjmp	.+32     	; 0x114 <_puts+0x34>
    while(st[i])
        _putch(st[i++]);
  f4:	89 81       	ldd	r24, Y+1	; 0x01
  f6:	28 2f       	mov	r18, r24
  f8:	30 e0       	ldi	r19, 0x00	; 0
  fa:	8a 81       	ldd	r24, Y+2	; 0x02
  fc:	9b 81       	ldd	r25, Y+3	; 0x03
  fe:	fc 01       	movw	r30, r24
 100:	e2 0f       	add	r30, r18
 102:	f3 1f       	adc	r31, r19
 104:	80 81       	ld	r24, Z
 106:	98 2f       	mov	r25, r24
 108:	89 81       	ldd	r24, Y+1	; 0x01
 10a:	8f 5f       	subi	r24, 0xFF	; 255
 10c:	89 83       	std	Y+1, r24	; 0x01
 10e:	89 2f       	mov	r24, r25
 110:	0e 94 59 00 	call	0xb2	; 0xb2 <_putch>
    UDR0 = ch;
}
void _puts(char st[])
{
    uint8_t i=0;
    while(st[i])
 114:	89 81       	ldd	r24, Y+1	; 0x01
 116:	28 2f       	mov	r18, r24
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	8a 81       	ldd	r24, Y+2	; 0x02
 11c:	9b 81       	ldd	r25, Y+3	; 0x03
 11e:	fc 01       	movw	r30, r24
 120:	e2 0f       	add	r30, r18
 122:	f3 1f       	adc	r31, r19
 124:	80 81       	ld	r24, Z
 126:	88 23       	and	r24, r24
 128:	29 f7       	brne	.-54     	; 0xf4 <_puts+0x14>
        _putch(st[i++]);
    _putch(32);
 12a:	80 e2       	ldi	r24, 0x20	; 32
 12c:	0e 94 59 00 	call	0xb2	; 0xb2 <_putch>
}
 130:	0f 90       	pop	r0
 132:	0f 90       	pop	r0
 134:	0f 90       	pop	r0
 136:	cf 91       	pop	r28
 138:	df 91       	pop	r29
 13a:	08 95       	ret

0000013c <_getc>:
uint8_t _getc()
{
 13c:	df 93       	push	r29
 13e:	cf 93       	push	r28
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
    while(!(UCSR0A & (1 << RXC0)));
 144:	e0 ec       	ldi	r30, 0xC0	; 192
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	88 23       	and	r24, r24
 14c:	dc f7       	brge	.-10     	; 0x144 <_getc+0x8>
    return UDR0;
 14e:	e6 ec       	ldi	r30, 0xC6	; 198
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
}
 154:	cf 91       	pop	r28
 156:	df 91       	pop	r29
 158:	08 95       	ret

0000015a <_newline>:
void _newline()
{
 15a:	df 93       	push	r29
 15c:	cf 93       	push	r28
 15e:	cd b7       	in	r28, 0x3d	; 61
 160:	de b7       	in	r29, 0x3e	; 62
    _putch(13);   // CR
 162:	8d e0       	ldi	r24, 0x0D	; 13
 164:	0e 94 59 00 	call	0xb2	; 0xb2 <_putch>
    _putch(10);   // LF
 168:	8a e0       	ldi	r24, 0x0A	; 10
 16a:	0e 94 59 00 	call	0xb2	; 0xb2 <_putch>
}
 16e:	cf 91       	pop	r28
 170:	df 91       	pop	r29
 172:	08 95       	ret

00000174 <delay>:
#ifndef MYDELAY_H_INCLUDED
#define MYDELAY_H_INCLUDED
#include <avr/io.h>

void delay(uint32_t ms)
{
 174:	df 93       	push	r29
 176:	cf 93       	push	r28
 178:	00 d0       	rcall	.+0      	; 0x17a <delay+0x6>
 17a:	00 d0       	rcall	.+0      	; 0x17c <delay+0x8>
 17c:	0f 92       	push	r0
 17e:	cd b7       	in	r28, 0x3d	; 61
 180:	de b7       	in	r29, 0x3e	; 62
 182:	69 83       	std	Y+1, r22	; 0x01
 184:	7a 83       	std	Y+2, r23	; 0x02
 186:	8b 83       	std	Y+3, r24	; 0x03
 188:	9c 83       	std	Y+4, r25	; 0x04
    ms*=371;
 18a:	89 81       	ldd	r24, Y+1	; 0x01
 18c:	9a 81       	ldd	r25, Y+2	; 0x02
 18e:	ab 81       	ldd	r26, Y+3	; 0x03
 190:	bc 81       	ldd	r27, Y+4	; 0x04
 192:	23 e7       	ldi	r18, 0x73	; 115
 194:	31 e0       	ldi	r19, 0x01	; 1
 196:	40 e0       	ldi	r20, 0x00	; 0
 198:	50 e0       	ldi	r21, 0x00	; 0
 19a:	bc 01       	movw	r22, r24
 19c:	cd 01       	movw	r24, r26
 19e:	0e 94 1f 01 	call	0x23e	; 0x23e <__mulsi3>
 1a2:	dc 01       	movw	r26, r24
 1a4:	cb 01       	movw	r24, r22
 1a6:	89 83       	std	Y+1, r24	; 0x01
 1a8:	9a 83       	std	Y+2, r25	; 0x02
 1aa:	ab 83       	std	Y+3, r26	; 0x03
 1ac:	bc 83       	std	Y+4, r27	; 0x04
    while(ms--);
 1ae:	1d 82       	std	Y+5, r1	; 0x05
 1b0:	89 81       	ldd	r24, Y+1	; 0x01
 1b2:	9a 81       	ldd	r25, Y+2	; 0x02
 1b4:	ab 81       	ldd	r26, Y+3	; 0x03
 1b6:	bc 81       	ldd	r27, Y+4	; 0x04
 1b8:	00 97       	sbiw	r24, 0x00	; 0
 1ba:	a1 05       	cpc	r26, r1
 1bc:	b1 05       	cpc	r27, r1
 1be:	11 f0       	breq	.+4      	; 0x1c4 <delay+0x50>
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	8d 83       	std	Y+5, r24	; 0x05
 1c4:	89 81       	ldd	r24, Y+1	; 0x01
 1c6:	9a 81       	ldd	r25, Y+2	; 0x02
 1c8:	ab 81       	ldd	r26, Y+3	; 0x03
 1ca:	bc 81       	ldd	r27, Y+4	; 0x04
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	a1 09       	sbc	r26, r1
 1d0:	b1 09       	sbc	r27, r1
 1d2:	89 83       	std	Y+1, r24	; 0x01
 1d4:	9a 83       	std	Y+2, r25	; 0x02
 1d6:	ab 83       	std	Y+3, r26	; 0x03
 1d8:	bc 83       	std	Y+4, r27	; 0x04
 1da:	8d 81       	ldd	r24, Y+5	; 0x05
 1dc:	88 23       	and	r24, r24
 1de:	39 f7       	brne	.-50     	; 0x1ae <delay+0x3a>
}
 1e0:	0f 90       	pop	r0
 1e2:	0f 90       	pop	r0
 1e4:	0f 90       	pop	r0
 1e6:	0f 90       	pop	r0
 1e8:	0f 90       	pop	r0
 1ea:	cf 91       	pop	r28
 1ec:	df 91       	pop	r29
 1ee:	08 95       	ret

000001f0 <main>:
#include "../../Headerfunktionen/UART.h"
#include "../../Headerfunktionen/mydelay.h"
#include <avr/io.h>

int main(void)
{
 1f0:	df 93       	push	r29
 1f2:	cf 93       	push	r28
 1f4:	cd b7       	in	r28, 0x3d	; 61
 1f6:	de b7       	in	r29, 0x3e	; 62
    DDRD=0b00011100;
 1f8:	ea e2       	ldi	r30, 0x2A	; 42
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	8c e1       	ldi	r24, 0x1C	; 28
 1fe:	80 83       	st	Z, r24
    init_usart();
 200:	0e 94 40 00 	call	0x80	; 0x80 <init_usart>
    while(1)
    {
        if((UCSR0A & (1<<UDRE0)))
 204:	e0 ec       	ldi	r30, 0xC0	; 192
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	80 81       	ld	r24, Z
 20a:	88 2f       	mov	r24, r24
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	80 72       	andi	r24, 0x20	; 32
 210:	90 70       	andi	r25, 0x00	; 0
 212:	00 97       	sbiw	r24, 0x00	; 0
 214:	b9 f3       	breq	.-18     	; 0x204 <main+0x14>
        {
            PORTD=1<<(UDR0-48);
 216:	ab e2       	ldi	r26, 0x2B	; 43
 218:	b0 e0       	ldi	r27, 0x00	; 0
 21a:	e6 ec       	ldi	r30, 0xC6	; 198
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	80 81       	ld	r24, Z
 220:	88 2f       	mov	r24, r24
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	9c 01       	movw	r18, r24
 226:	20 53       	subi	r18, 0x30	; 48
 228:	30 40       	sbci	r19, 0x00	; 0
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	02 2e       	mov	r0, r18
 230:	02 c0       	rjmp	.+4      	; 0x236 <main+0x46>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	0a 94       	dec	r0
 238:	e2 f7       	brpl	.-8      	; 0x232 <main+0x42>
 23a:	8c 93       	st	X, r24
 23c:	e3 cf       	rjmp	.-58     	; 0x204 <main+0x14>

0000023e <__mulsi3>:
 23e:	62 9f       	mul	r22, r18
 240:	d0 01       	movw	r26, r0
 242:	73 9f       	mul	r23, r19
 244:	f0 01       	movw	r30, r0
 246:	82 9f       	mul	r24, r18
 248:	e0 0d       	add	r30, r0
 24a:	f1 1d       	adc	r31, r1
 24c:	64 9f       	mul	r22, r20
 24e:	e0 0d       	add	r30, r0
 250:	f1 1d       	adc	r31, r1
 252:	92 9f       	mul	r25, r18
 254:	f0 0d       	add	r31, r0
 256:	83 9f       	mul	r24, r19
 258:	f0 0d       	add	r31, r0
 25a:	74 9f       	mul	r23, r20
 25c:	f0 0d       	add	r31, r0
 25e:	65 9f       	mul	r22, r21
 260:	f0 0d       	add	r31, r0
 262:	99 27       	eor	r25, r25
 264:	72 9f       	mul	r23, r18
 266:	b0 0d       	add	r27, r0
 268:	e1 1d       	adc	r30, r1
 26a:	f9 1f       	adc	r31, r25
 26c:	63 9f       	mul	r22, r19
 26e:	b0 0d       	add	r27, r0
 270:	e1 1d       	adc	r30, r1
 272:	f9 1f       	adc	r31, r25
 274:	bd 01       	movw	r22, r26
 276:	cf 01       	movw	r24, r30
 278:	11 24       	eor	r1, r1
 27a:	08 95       	ret

0000027c <_exit>:
 27c:	f8 94       	cli

0000027e <__stop_program>:
 27e:	ff cf       	rjmp	.-2      	; 0x27e <__stop_program>
