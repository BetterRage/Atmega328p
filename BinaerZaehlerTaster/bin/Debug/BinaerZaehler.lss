
bin\Debug\BinaerZaehler.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000001bc  00000250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .fuse         00000003  00820000  00820000  00000250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .comment      00000012  00000000  00000000  00000253  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY, OCTETS
  5 .debug_aranges 00000080  00000000  00000000  000002a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_pubnames 0000001d  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   000007f3  00000000  00000000  00000345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 000006f5  00000000  00000000  00000b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   00000386  00000000  00000000  0000122d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_frame  00000054  00000000  00000000  000015b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    000003a1  00000000  00000000  00001608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
  78:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <delay32>:
#ifndef DELAY1174_H
#define DELAY1174_H
void delay32(uint32_t ms)
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	cd b7       	in	r28, 0x3d	; 61
  86:	de b7       	in	r29, 0x3e	; 62
  88:	60 97       	sbiw	r28, 0x10	; 16
  8a:	0f b6       	in	r0, 0x3f	; 63
  8c:	f8 94       	cli
  8e:	de bf       	out	0x3e, r29	; 62
  90:	0f be       	out	0x3f, r0	; 63
  92:	cd bf       	out	0x3d, r28	; 61
  94:	69 87       	std	Y+9, r22	; 0x09
  96:	7a 87       	std	Y+10, r23	; 0x0a
  98:	8b 87       	std	Y+11, r24	; 0x0b
  9a:	9c 87       	std	Y+12, r25	; 0x0c
    uint32_t ms32=ms*382;
  9c:	49 85       	ldd	r20, Y+9	; 0x09
  9e:	5a 85       	ldd	r21, Y+10	; 0x0a
  a0:	6b 85       	ldd	r22, Y+11	; 0x0b
  a2:	7c 85       	ldd	r23, Y+12	; 0x0c
  a4:	8e e7       	ldi	r24, 0x7E	; 126
  a6:	91 e0       	ldi	r25, 0x01	; 1
  a8:	dc 01       	movw	r26, r24
  aa:	9a 01       	movw	r18, r20
  ac:	ab 01       	movw	r20, r22
  ae:	0e 94 c2 00 	call	0x184	; 0x184 <__muluhisi3>
  b2:	6d 87       	std	Y+13, r22	; 0x0d
  b4:	7e 87       	std	Y+14, r23	; 0x0e
  b6:	8f 87       	std	Y+15, r24	; 0x0f
  b8:	98 8b       	std	Y+16, r25	; 0x10
  ba:	8d 85       	ldd	r24, Y+13	; 0x0d
  bc:	9e 85       	ldd	r25, Y+14	; 0x0e
  be:	af 85       	ldd	r26, Y+15	; 0x0f
  c0:	b8 89       	ldd	r27, Y+16	; 0x10
  c2:	8d 83       	std	Y+5, r24	; 0x05
  c4:	9e 83       	std	Y+6, r25	; 0x06
  c6:	af 83       	std	Y+7, r26	; 0x07
  c8:	b8 87       	std	Y+8, r27	; 0x08
    uint32_t zahl=0;
  ca:	19 82       	std	Y+1, r1	; 0x01
  cc:	1a 82       	std	Y+2, r1	; 0x02
  ce:	1b 82       	std	Y+3, r1	; 0x03
  d0:	1c 82       	std	Y+4, r1	; 0x04
    while(zahl<ms32)
  d2:	0b c0       	rjmp	.+22     	; 0xea <delay32+0x6a>
        zahl++;
  d4:	89 81       	ldd	r24, Y+1	; 0x01
  d6:	9a 81       	ldd	r25, Y+2	; 0x02
  d8:	ab 81       	ldd	r26, Y+3	; 0x03
  da:	bc 81       	ldd	r27, Y+4	; 0x04
  dc:	01 96       	adiw	r24, 0x01	; 1
  de:	a1 1d       	adc	r26, r1
  e0:	b1 1d       	adc	r27, r1
  e2:	89 83       	std	Y+1, r24	; 0x01
  e4:	9a 83       	std	Y+2, r25	; 0x02
  e6:	ab 83       	std	Y+3, r26	; 0x03
  e8:	bc 83       	std	Y+4, r27	; 0x04
    while(zahl<ms32)
  ea:	49 81       	ldd	r20, Y+1	; 0x01
  ec:	5a 81       	ldd	r21, Y+2	; 0x02
  ee:	6b 81       	ldd	r22, Y+3	; 0x03
  f0:	7c 81       	ldd	r23, Y+4	; 0x04
  f2:	8d 81       	ldd	r24, Y+5	; 0x05
  f4:	9e 81       	ldd	r25, Y+6	; 0x06
  f6:	af 81       	ldd	r26, Y+7	; 0x07
  f8:	b8 85       	ldd	r27, Y+8	; 0x08
  fa:	48 17       	cp	r20, r24
  fc:	59 07       	cpc	r21, r25
  fe:	6a 07       	cpc	r22, r26
 100:	7b 07       	cpc	r23, r27
 102:	40 f3       	brcs	.-48     	; 0xd4 <delay32+0x54>
}
 104:	00 00       	nop
 106:	00 00       	nop
 108:	60 96       	adiw	r28, 0x10	; 16
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	f8 94       	cli
 10e:	de bf       	out	0x3e, r29	; 62
 110:	0f be       	out	0x3f, r0	; 63
 112:	cd bf       	out	0x3d, r28	; 61
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	08 95       	ret

0000011a <main>:
#include <avr/io.h>
#include "Delay1174.h"
#define  F_CPU 16000000UL

int main(void)
{
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	0f 92       	push	r0
 120:	cd b7       	in	r28, 0x3d	; 61
 122:	de b7       	in	r29, 0x3e	; 62
    DDRC=0x00;
 124:	87 e2       	ldi	r24, 0x27	; 39
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	fc 01       	movw	r30, r24
 12a:	10 82       	st	Z, r1
    //PORTC=0x01;
    DDRD=0b11111100;
 12c:	8a e2       	ldi	r24, 0x2A	; 42
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	2c ef       	ldi	r18, 0xFC	; 252
 132:	fc 01       	movw	r30, r24
 134:	20 83       	st	Z, r18
    uint8_t led=0x01;
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	89 83       	std	Y+1, r24	; 0x01
    while(1)
    {
        PORTD=led<<2;
 13a:	8b e2       	ldi	r24, 0x2B	; 43
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	29 81       	ldd	r18, Y+1	; 0x01
 140:	22 0f       	add	r18, r18
 142:	22 0f       	add	r18, r18
 144:	fc 01       	movw	r30, r24
 146:	20 83       	st	Z, r18
        if((PINC&0x01))
 148:	86 e2       	ldi	r24, 0x26	; 38
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	fc 01       	movw	r30, r24
 14e:	80 81       	ld	r24, Z
 150:	88 2f       	mov	r24, r24
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	81 70       	andi	r24, 0x01	; 1
 156:	99 27       	eor	r25, r25
 158:	89 2b       	or	r24, r25
 15a:	79 f3       	breq	.-34     	; 0x13a <main+0x20>
        {
            delay32(20);
 15c:	64 e1       	ldi	r22, 0x14	; 20
 15e:	70 e0       	ldi	r23, 0x00	; 0
 160:	80 e0       	ldi	r24, 0x00	; 0
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 40 00 	call	0x80	; 0x80 <delay32>
            if((PINC&0x01))
 168:	86 e2       	ldi	r24, 0x26	; 38
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	fc 01       	movw	r30, r24
 16e:	80 81       	ld	r24, Z
 170:	88 2f       	mov	r24, r24
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	81 70       	andi	r24, 0x01	; 1
 176:	99 27       	eor	r25, r25
 178:	89 2b       	or	r24, r25
 17a:	f9 f2       	breq	.-66     	; 0x13a <main+0x20>
                led++;
 17c:	89 81       	ldd	r24, Y+1	; 0x01
 17e:	8f 5f       	subi	r24, 0xFF	; 255
 180:	89 83       	std	Y+1, r24	; 0x01
        PORTD=led<<2;
 182:	db cf       	rjmp	.-74     	; 0x13a <main+0x20>

00000184 <__muluhisi3>:
 184:	0e 94 cd 00 	call	0x19a	; 0x19a <__umulhisi3>
 188:	a5 9f       	mul	r26, r21
 18a:	90 0d       	add	r25, r0
 18c:	b4 9f       	mul	r27, r20
 18e:	90 0d       	add	r25, r0
 190:	a4 9f       	mul	r26, r20
 192:	80 0d       	add	r24, r0
 194:	91 1d       	adc	r25, r1
 196:	11 24       	eor	r1, r1
 198:	08 95       	ret

0000019a <__umulhisi3>:
 19a:	a2 9f       	mul	r26, r18
 19c:	b0 01       	movw	r22, r0
 19e:	b3 9f       	mul	r27, r19
 1a0:	c0 01       	movw	r24, r0
 1a2:	a3 9f       	mul	r26, r19
 1a4:	70 0d       	add	r23, r0
 1a6:	81 1d       	adc	r24, r1
 1a8:	11 24       	eor	r1, r1
 1aa:	91 1d       	adc	r25, r1
 1ac:	b2 9f       	mul	r27, r18
 1ae:	70 0d       	add	r23, r0
 1b0:	81 1d       	adc	r24, r1
 1b2:	11 24       	eor	r1, r1
 1b4:	91 1d       	adc	r25, r1
 1b6:	08 95       	ret

000001b8 <_exit>:
 1b8:	f8 94       	cli

000001ba <__stop_program>:
 1ba:	ff cf       	rjmp	.-2      	; 0x1ba <__stop_program>
